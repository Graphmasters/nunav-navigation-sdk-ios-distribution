#import <Foundation/NSArray.h>
#import <Foundation/NSDictionary.h>
#import <Foundation/NSError.h>
#import <Foundation/NSObject.h>
#import <Foundation/NSSet.h>
#import <Foundation/NSString.h>
#import <Foundation/NSValue.h>

@class NSDKMDuration, NSDKMGenericNavigationZoomProviderZoomStep, NSDKMKotlinArray<T>, NSDKMBaseCameraComponentCompanion, NSDKMBaseCameraComponent, UIView, NSDKMFreezable, NSDKMLatLng, NSDKMCameraUpdatePadding, NSDKMCameraUpdate, NSDKMNavigationCameraUpdateProviderCompanion, NSDKMLocation, NSDKMSpeed, NSDKMGenericNavigationZoomProviderCompanion, NSDKMLength, NSDKMRoutingEventAwareZoomProviderZoomRange, NSDKMRoutingEventAwareZoomProviderCompanion, NSDKMKotlinIntRange, NSDKMStatefulManeuverAwareTiltProviderCompanion, NSDKMPredictedLocationProviderCompanion, NSDKMRouteUtils, NSDKMRouteWaypoint, NSDKMOnRouteProjectorProjectedLocation, NSDKMRouteFeatureCreatorRouteFeature, NSDKMColorUtils, NSDKMKotlinFloatArray, NSDKMColorUtilsColor, NSDKMKotlinEnumCompanion, NSDKMKotlinEnum<E>, NSDKMRelativeSpeedRouteFeatureCreatorCategory, NSDKMRouteFeatureCreatorCompanion, NSDKMManeuverIconProvider, NSDKMManeuverIconProviderManeuverIcon, NSDKMTurnInfo, UIImage, NSDKMManeuverMapIconCreatorCompanion, NSDKMManeuverMapIconCreatorManeuverMapIcon, NSDKMTurnCommand, NSDKMLaneIcon, NSDKMLaneIconComposition, NSDKMLaneIconCompositionProvider, NSDKMLaneInfoLane, NSDKMLaneInfo, NSDKMDetachConstants, NSDKMDurationConverterResult, NSDKMDistanceConverterResult, NSDKMMeasurementSystem, NSDKMDistanceConverterCompanion, NSDKMDurationConverterCompanion, NSDKMFormatUtils, NSDKMLabelParser, NSDKMTurnInfoUtils, NSDKMVoiceInstructionContext, NSDKMBaseLaneVoiceInstructionStringGeneratorLaneSection, NSDKMNavigationState, NSDKMVoiceInstructionHandlerInterceptorResult, NSDKMManeuver, NSDKMDurationBasedVoiceInstructionStageProviderCompanion, NSDKMKotlinLongRange, NSDKMBaseLaneVoiceInstructionStringGenerator, NSDKMGenericSpeakableConditionCreator, NSDKMGermanSpeakableDirectionProviderPrefixConfig, NSDKMGermanSpeakableDirectionProviderCompanion, NSLocale, NSDKMRoute, NSDKMKotlinException, NSDKMRouteData, NSDKMBaseNavigationSdkCompanion, NSDKMSimpleNavigationEventHandler, NSDKMBaseNavigationSdk, NSDKMIosInternetConnectionValidatorCompanion, NSDKMRouteProviderRouteRequest, NSDKMRouteComparisonProvider, NSDKMRouteRouteDelta, NSDKMRouteComparisonResult, NSDKMRouteDeltaGenerator, NSDKMCredentialsApiKey, NSDKMCredentialsBasic, NSDKMHttpClientFactory, NSDKMKtor_client_coreHttpClient, NSDKMAccelerationEffectedSpeedTrackerCompanion, NSDKMCalculatingSpeedTrackerCompanion, NSDKMJKalmanFilter, NSDKMJKalmanFilterCompanion, NSDKMJKalmanMatrix<A>, NSDKMJKalmanMatrixApache, NSDKMJKalmanStepsCompanion, NSDKMKalmanPair<T>, NSDKMDeviceStatisticsProviderCompanion, NSDKMDeviceStatisticsProviderThermalState, NSDKMDeviceStatisticsProviderDeviceState, NSDKMDeviceStatisticsProviderDeviceStatistics, NSDKMLocationCompanion, NSDKMRouteSegment, NSDKMProjectionFinderOptions, NSDKMDistanceAlignmentProjectionFinderCompanion, NSDKMDistanceAlignmentProjectionFinderProjectionResult, NSDKMOnRoutePredictorOptions, NSDKMSpeedBasedOnRoutePredictorCompanion, NSDKMOnRouteShifterShiftedLocation, NSDKMOnRouteShifterShiftParameters, NSDKMRouteProgressTrackerRouteProgress, NSDKMDefaultNavigationStateRepositoryCompanion, NSDKMNavigationResult, NSDKMOnRouteTrackerState, NSDKMProgressHelper, NSDKMKotlinThrowable, NSDKMDistanceBasedLeavingDestinationValidatorCompanion, NSDKMRouteRequestJob, NSDKMKtorRouteProviderProbeDto, NSDKMKtorRouteProviderGetRouteBodyCompanion, NSDKMKtorRouteProviderGetRouteBody, NSDKMKtorRouteProviderProbeDtoCompanion, NSDKMRouteProviderType, NSDKMRouteProviderRouteRequestDestination, NSDKMRouteDto, NSDKMRouteDataDto, NSDKMFullRouteDtoConverterCompanion, NSDKMRouteDestinationInfo, NSDKMRouteDtoDestinationInfo, NSDKMFullRouteDtoConverter, NSDKMRouteDataDtoCompanion, NSDKMRouteDtoRouteLeg, NSDKMRouteDtoCompanion, NSDKMRouteDtoGeoPoint, NSDKMRouteDtoDestinationInfoCompanion, NSDKMRouteDtoEnforcementCompanion, NSDKMRouteDtoEnforcement, NSDKMRouteDtoGeoPointCompanion, NSDKMRouteDtoRouteLegStep, NSDKMRouteDtoRouteLegFuelStation, NSDKMRouteDtoRouteLegParkingArea, NSDKMRouteDtoRouteLegCompanion, NSDKMRouteDtoRouteLegFuelStationCompanion, NSDKMRouteDtoRouteLegParkingAreaCompanion, NSDKMRouteDtoRouteLegStepLane, NSDKMRouteDtoRouteLegStepTurnInfo, NSDKMRouteDtoRouteLegStepCompanion, NSDKMRouteDtoRouteLegStepLaneCompanion, NSDKMRouteDtoRouteLegStepTurnInfoCompanion, NSDKMRouteUtils_, NSDKMWeightedChanceCalculator, NSDKMChanceBasedOnRouteTrackerCompanion, NSDKMChanceCalculatorCompanion, NSDKMHeadingBasedChanceCalculatorCompanion, NSDKMTurnCommandAlignmentChanceCalculatorCompanion, NSDKMLaneInfoLaneLaneTurn, NSDKMRoadClassCompanion, NSDKMRoadClass, NSDKMRoutableFactory, NSDKMRouteStep, NSDKMRouteEnforcement, NSDKMRouteFuelStation, NSDKMRouteParkingArea, NSDKMRouteEnforcementType, NSDKMRouteFuelStationType, NSDKMRouteParkingAreaType, NSDKMRouteWaypointGpsQuality, NSDKMTurnCommandCompanion, NSDKMTurnInfoStreetSide, NSDKMVehicleConfigProperties, NSDKMTemplates, NSDKMGenericVehicleConfig, NSDKMTruckConfig, NSDKMVehicleConfigDimensions, NSDKMCLLocationConverter, CLLocation, CLLocationManager, NSDKMGMLog, NSDKMDurationCompanion, NSDKMLengthCompanion, NSDKMSpeedCompanion, NSDKMTimestampCompanion, NSDKMTimestamp, NSDKMGMAnalytics, NSDKMCoroutineDispatchers, NSDKMKotlinx_coroutines_coreCoroutineDispatcher, NSDKMMainThread, NSDKMIncrementor, NSDKMAbstractOptimizationProblemCompanion, NSDKMRealVector, NSDKMAbstractEvaluation, NSDKMLeastSquaresFactoryCompanion, NSDKMLevenbergMarquardtOptimizerCompanion, NSDKMAbstractOptimizationProblem<PAIR>, NSDKMPair<K, V>, NSDKMPrecisionCompanion, NSDKMIncrementorCompanion, NSDKMMatrixUtilsCompanion, NSDKMKotlinDoubleArray, NSDKMAbstractRealMatrixCompanion, NSDKMAbstractRealMatrix, NSDKMArrayRealVector, NSDKMBlockRealMatrixCompanion, NSDKMBlockRealMatrix, NSDKMLUDecompositionCompanion, NSDKMQRDecomposition, NSDKMCartesian, NSDKMGeodesy, NSDKMGeodesySegment, NSDKMLatLngCompanion, NSDKMUUID, NSDKMTime, NSDKMSkie_CancellationHandler, NSDKMSkie_SuspendResult, NSDKMSkie_SuspendResultCanceled, NSError, NSDKMSkie_SuspendResultError, NSDKMSkie_SuspendResultSuccess, NSDKMLaneIconProvider, NSDKMLaneIconProviderLaneIcon, NSDKMTimestampConverterResult, NSDKMHourCycle, NSDKMDayTimeTimestampConverterCompanion, NSDKMSdkDurationConverterResult, NSDKMHourDurationConverterCompanion, NSDKMSdkDurationConverterUnit, NSDKMTimestampUtils, NSDKMNavigationUIStateNavigationError, NSDKMNavigationUIState, NSDKMFormattedRouteProgressUIState, NSDKMRouteProgressUIStateFormatter, NSDKMRouteProgressUIStateFollowingRoute, NSDKMRouteProgressUIStateConverter, NSDKMRouteProgressUIStateLoading, NSDKMManeuverUIStateConverter, NSDKMManeuverUIStatePrimaryManeuverInfo, NSDKMManeuverUIStateFollowingRoute, NSDKMManeuverUIStateLoading, NSDKMManeuverUIStateSecondaryManeuverInfoFollowingManeuver, NSDKMManeuverUIStateSecondaryManeuverInfoLaneInfo, NSDKMFormattedManeuverUIState, NSDKMManeuverUIStateFormatter, NSDKMKotlinUnit, NSDKMKotlinCValue<T>, NSDKMKotlinDelegates, NSDKMSkieColdFlowIterator<E>, NSDKMSkie_SuspendHandler, NSDKMKtor_client_coreHttpRequestData, NSDKMKtor_httpOutgoingContentWriteChannelContent, NSDKMKtor_httpOutgoingContentProtocolUpgrade, NSDKMKtor_utilsPipeline<TSubject, TContext>, NSDKMKtor_ioMemory, NSDKMKtor_ioChunkBuffer, NSDKMKotlinByteArray, NSDKMKtor_ioBuffer, NSDKMKtor_ioByteReadPacket, NSDKMKtor_client_coreHttpClientCall, NSDKMKtor_utilsTypeInfo, NSDKMKtor_httpOutgoingContentNoContent, NSDKMKtor_httpOutgoingContentReadChannelContent, NSDKMKtor_httpOutgoingContentByteArrayContent, NSDKMKotlinx_serialization_corePolymorphicKind, NSDKMKotlinx_serialization_corePrimitiveKind, NSDKMKotlinx_serialization_coreSerialKindCONTEXTUAL, NSDKMKotlinx_serialization_coreSerialKindENUM, NSDKMKotlinx_serialization_coreStructureKind, NSDKMKotlinx_serialization_corePolymorphicKindOPEN, NSDKMKotlinx_serialization_corePolymorphicKindSEALED, NSDKMKotlinx_serialization_corePrimitiveKindBOOLEAN, NSDKMKotlinx_serialization_corePrimitiveKindBYTE, NSDKMKotlinx_serialization_corePrimitiveKindCHAR, NSDKMKotlinx_serialization_corePrimitiveKindDOUBLE, NSDKMKotlinx_serialization_corePrimitiveKindFLOAT, NSDKMKotlinx_serialization_corePrimitiveKindINT, NSDKMKotlinx_serialization_corePrimitiveKindLONG, NSDKMKotlinx_serialization_corePrimitiveKindSHORT, NSDKMKotlinx_serialization_corePrimitiveKindSTRING, NSDKMKotlinx_serialization_coreStructureKindCLASS, NSDKMKotlinx_serialization_coreStructureKindLIST, NSDKMKotlinx_serialization_coreStructureKindMAP, NSDKMKotlinx_serialization_coreStructureKindOBJECT, NSDate, NSDKMKotlinIntProgressionCompanion, NSDKMKotlinIntIterator, NSDKMKotlinIntProgression, NSDKMKotlinIntRangeCompanion, NSDKMKotlinFloatIterator, NSDKMKotlinLongProgressionCompanion, NSDKMKotlinLongIterator, NSDKMKotlinLongProgression, NSDKMKotlinLongRangeCompanion, NSDKMKtor_client_coreHttpClientEngineConfig, NSDKMKtor_client_coreHttpClientConfig<T>, NSDKMKtor_eventsEvents, NSDKMKtor_client_coreHttpReceivePipeline, NSDKMKtor_client_coreHttpRequestPipeline, NSDKMKtor_client_coreHttpResponsePipeline, NSDKMKtor_client_coreHttpSendPipeline, NSDKMKtor_client_coreHttpResponseData, NSDKMKotlinRuntimeException, NSDKMKotlinAbstractCoroutineContextElement, NSDKMKotlinx_coroutines_coreCoroutineDispatcherKey, NSDKMKotlinDoubleIterator, NSDKMKotlinIllegalStateException, NSDKMKotlinAutofreeScope, NSDKMKotlinCValuesRef<T>, NSDKMKotlinCValues<T>, NSDKMKtor_httpUrl, NSDKMKtor_httpHttpMethod, NSDKMKtor_httpOutgoingContent, NSDKMKtor_utilsAttributeKey<T>, NSDKMKtor_httpContentType, NSDKMKtor_httpHttpStatusCode, NSDKMKtor_utilsPipelinePhase, NSDKMKtor_ioMemoryCompanion, NSDKMKtor_ioBufferCompanion, NSDKMKtor_ioChunkBufferCompanion, NSDKMKotlinByteIterator, NSDKMKtor_ioInputCompanion, NSDKMKtor_ioInput, NSDKMKtor_ioByteReadPacketCompanion, NSDKMKotlinCancellationException, NSDKMKtor_client_coreHttpClientCallCompanion, NSDKMKtor_client_coreHttpResponse, NSDKMKotlinx_serialization_coreSerialKind, NSDKMKtor_client_coreProxyConfig, NSDKMKtor_eventsEventDefinition<T>, NSDKMKtor_client_coreHttpReceivePipelinePhases, NSDKMKtor_client_coreHttpRequestPipelinePhases, NSDKMKtor_client_coreHttpRequestBuilder, NSDKMKtor_client_coreHttpResponsePipelinePhases, NSDKMKtor_client_coreHttpResponseContainer, NSDKMKtor_client_coreHttpSendPipelinePhases, NSDKMKtor_utilsGMTDate, NSDKMKtor_httpHttpProtocolVersion, NSDKMKotlinx_serialization_coreSerializersModule, NSDKMKotlinNothing, NSDKMKotlinAbstractCoroutineContextKey<B, E>, NSDKMKotlinDeferScope, NSDKMKotlinKTypeProjection, NSDKMKtor_httpUrlCompanion, NSDKMKtor_httpURLProtocol, NSDKMKtor_httpHttpMethodCompanion, NSDKMKtor_httpHeaderValueParam, NSDKMKtor_httpHeaderValueWithParametersCompanion, NSDKMKtor_httpHeaderValueWithParameters, NSDKMKtor_httpContentTypeCompanion, NSDKMKtor_httpHttpStatusCodeCompanion, NSDKMKtor_httpHeadersBuilder, NSDKMKtor_client_coreHttpRequestBuilderCompanion, NSDKMKtor_httpURLBuilder, NSDKMKtor_utilsGMTDateCompanion, NSDKMKtor_utilsWeekDay, NSDKMKtor_utilsMonth, NSDKMKtor_httpHttpProtocolVersionCompanion, NSDKMKotlinKVariance, NSDKMKotlinKTypeProjectionCompanion, NSDKMKtor_httpURLProtocolCompanion, NSDKMKtor_utilsStringValuesBuilderImpl, NSDKMKtor_httpURLBuilderCompanion, NSDKMKtor_utilsWeekDayCompanion, NSDKMKtor_utilsMonthCompanion;

@protocol NSDKMExecutor, NSDKMNavigationSdk, NSDKMPaddingProvider, NSDKMRouteDetachStateProvider, NSDKMNavigationCameraHandlerCameraTrackingListener, NSDKMNavigationCameraHandlerCameraUpdateListener, NSDKMNavigationCameraHandler, NSDKMCameraUpdateProvider, NSDKMCameraLocationProvider, NSDKMHeadingProvider, NSDKMZoomProvider, NSDKMTiltProvider, NSDKMOnRoutePredictor, NSDKMSpeedTracker, NSDKMTimeProvider, NSDKMLocationProviderLocationUpdateListener, NSDKMLocationProvider, NSDKMRouteFeatureCreator, NSDKMRelativeSpeedRouteFeatureCreatorColorProvider, NSDKMKotlinComparable, NSDKMDurationConverter, NSDKMDistanceConverter, NSDKMRoutable, NSDKMViewImageRenderer, NSDKMVoiceInstructionStringGenerator, NSDKMVoiceInstructionHandlerInterceptor, NSDKMVoiceInstructionHandler, NSDKMOnNavigationStateUpdatedListener, NSDKMVoiceInstructionDispatcher, NSDKMVoiceInstructionContextProvider, NSDKMVoiceInstructionStageProvider, NSDKMSpeakableConditionCreator, NSDKMLanguageProvider, NSDKMSpeakableDirectionProvider, NSDKMInterceptingValidatorInterceptor, NSDKMLocationUpdateListener, NSDKMOnCurrentDestinationChangedListener, NSDKMNavigationEventHandlerOnDestinationReachedListener, NSDKMOnDestinationsChangedListener, NSDKMNavigationEventHandlerOnInitialRouteReceivedListener, NSDKMNavigationEventHandlerOnLeavingDestinationListener, NSDKMNavigationEventHandlerOnNavigationStartedListener, NSDKMOnNavigationStateInitializedListener, NSDKMNavigationEventHandlerOnNavigationStoppedListener, NSDKMNavigationEventHandlerOnOffRouteListener, NSDKMNavigationEventHandlerOnRouteRequestFailedListener, NSDKMNavigationEventHandlerOnRouteUpdateListener, NSDKMNavigationEventHandlerOnTrackingSpeedReachedListener, NSDKMStatisticsProvider, NSDKMVehicleConfig, NSDKMDestinationRepository, NSDKMLocationRepository, NSDKMNavigationEventHandler, NSDKMOnRouteProjector, NSDKMRouteProgressTracker, NSDKMSessionClient, NSDKMRouteProvider, NSDKMInternetConnectionValidator, NSDKMUpdateRateProvider, NSDKMSessionParamProvider, NSDKMRoutingParamProvider, NSDKMCredentials, NSDKMKtor_client_coreHttpClientEngine, NSDKMAccelerationEffectedSpeedTrackerDecelerationModifier, NSDKMRealMatrix, NSDKMDeviceStatisticsProviderDeviceStateProvider, NSDKMOnRouteProjectorOnRouteProjectorListener, NSDKMProjectionFinder, NSDKMDistanceAlignmentProjectionFinderProjectionResultListener, NSDKMOnRoutePredictorOnRoutePredictionListener, NSDKMOnRouteShifter, NSDKMNavigationStateRepository, NSDKMOnRouteTracker, NSDKMValidator, NSDKMSessionClientCallback, NSDKMSessionRepository, NSDKMSessionIdGenerator, NSDKMNavigationEventHandlerOnDestinationChangedListener, NSDKMNavigationEngine, NSDKMRouteRepositoryRouteUpdatedListener, NSDKMRouteProgressTrackerOnRouteProgressUpdatedListener, NSDKMOnRouteTrackerOnRouteStateListener, NSDKMRouteRepository, NSDKMRouteProgressStateUpdater, NSDKMSchedulingRouteRepositoryOffRouteRequestValidator, NSDKMRouteRequestJobListener, NSDKMRouteDtoConverter, NSDKMKotlinx_serialization_coreKSerializer, NSDKMRouteMerger, NSDKMChanceCalculator, NSDKMExecutorFuture, CLLocationManagerDelegate, NSDKMLogger, NSDKMSerializable, NSDKMMeasurementSystemProvider, NSDKMAnalyticsHandler, NSDKMOptimizationProblem, NSDKMLeastSquaresProblemEvaluation, NSDKMLeastSquaresProblem, NSDKMMultivariateJacobianFunction, NSDKMLeastSquaresOptimizerOptimum, NSDKMLeastSquaresOptimizer, NSDKMKotlinIterator, NSDKMIncrementorMaxCountExceededCallback, NSDKMAnyMatrix, NSDKMRealMatrixPreservingVisitor, NSDKMDecompositionSolver, NSDKMKotlinx_coroutines_coreFlow, NSDKMKotlinx_coroutines_coreFlowCollector, NSDKMKotlinx_coroutines_coreStateFlow, NSDKMKotlinx_coroutines_coreSharedFlow, NSDKMKotlinx_coroutines_coreMutableSharedFlow, NSDKMKotlinx_coroutines_coreMutableStateFlow, NSDKMKotlinx_coroutines_coreRunnable, NSDKMSkie_DispatcherDelegate, NSDKMTimestampConverter, NSDKMSdkDurationConverter, NSDKMViewModel, NSDKMRouteProgressUIState, NSDKMManeuverUIState, NSDKMManeuverUIStateSecondaryManeuverInfo, NSDKMKotlinReadWriteProperty, NSDKMKotlinKProperty, NSDKMKtor_ioByteWriteChannel, NSDKMKtor_ioByteReadChannel, NSDKMKotlinCoroutineContext, NSDKMKotlinSuspendFunction1, NSDKMKotlinAppendable, NSDKMKotlinx_coroutines_coreJob, NSDKMKotlinSuspendFunction2, NSDKMKotlinx_coroutines_coreSelectClause1, NSDKMKotlinx_coroutines_coreSelectClause2, NSDKMKotlinIterable, NSDKMKotlinClosedRange, NSDKMKotlinOpenEndRange, NSDKMKotlinx_coroutines_coreCoroutineScope, NSDKMKtor_ioCloseable, NSDKMKtor_client_coreHttpClientEngineCapability, NSDKMKtor_utilsAttributes, NSDKMKotlinx_serialization_coreEncoder, NSDKMKotlinx_serialization_coreSerialDescriptor, NSDKMKotlinx_serialization_coreSerializationStrategy, NSDKMKotlinx_serialization_coreDecoder, NSDKMKotlinx_serialization_coreDeserializationStrategy, NSDKMKotlinCoroutineContextKey, NSDKMKotlinCoroutineContextElement, NSDKMKotlinContinuation, NSDKMKotlinContinuationInterceptor, NSDKMKotlinReadOnlyProperty, NSDKMKotlinKType, NSDKMKotlinKAnnotatedElement, NSDKMKotlinKCallable, NSDKMKtor_httpHeaders, NSDKMKtor_ioReadSession, NSDKMKtor_ioObjectPool, NSDKMKotlinFunction, NSDKMKotlinx_coroutines_coreChildHandle, NSDKMKotlinx_coroutines_coreChildJob, NSDKMKotlinx_coroutines_coreDisposableHandle, NSDKMKotlinSequence, NSDKMKotlinx_coroutines_coreSelectClause0, NSDKMKtor_client_coreHttpRequest, NSDKMKotlinKClass, NSDKMKotlinx_coroutines_coreSelectInstance, NSDKMKotlinx_coroutines_coreSelectClause, NSDKMKtor_client_coreHttpClientPlugin, NSDKMKotlinx_serialization_coreCompositeEncoder, NSDKMKotlinAnnotation, NSDKMKotlinx_serialization_coreCompositeDecoder, NSDKMKotlinNativePlacement, NSDKMKotlinKClassifier, NSDKMKtor_httpParameters, NSDKMKotlinMapEntry, NSDKMKtor_utilsStringValues, NSDKMKotlinx_coroutines_coreParentJob, NSDKMKtor_httpHttpMessage, NSDKMKotlinKDeclarationContainer, NSDKMKtor_httpHttpMessageBuilder, NSDKMKotlinx_serialization_coreSerializersModuleCollector, NSDKMKtor_utilsStringValuesBuilder, NSDKMKtor_httpParametersBuilder;

// Due to an Obj-C/Swift interop limitation, SKIE cannot generate Swift types with a lambda type argument.
// Example of such type is: A<() -> Unit> where A<T> is a generic class.
// To avoid compilation errors SKIE replaces these type arguments with __SkieLambdaErrorType, resulting in A<__SkieLambdaErrorType>.
// Generated declarations that reference __SkieLambdaErrorType cannot be called in any way and the __SkieLambdaErrorType class cannot be used.
// The original declarations can still be used in the same way as other declarations hidden by SKIE (and with the same limitations as without SKIE).
@interface __SkieLambdaErrorType : NSObject
- (instancetype _Nonnull)init __attribute__((unavailable));
+ (instancetype _Nonnull)new __attribute__((unavailable));
@end

@class __SkieLambdaErrorType, NSDKMBase, NSDKMMutableSet<ObjectType>, NSDKMMutableDictionary<KeyType, ObjectType>, NSError, NSDKMNumber, NSDKMByte, NSDKMUByte, NSDKMShort, NSDKMUShort, NSDKMInt, NSDKMUInt, NSDKMLong, NSDKMULong, NSDKMFloat, NSDKMDouble, NSDKMBoolean, NSDKMBaseCameraComponent, NSDKMBaseCameraComponentCompanion, NSDKMCameraComponent, NSDKMFreezable, NSDKMCameraUpdate, NSDKMCameraUpdatePadding, NSDKMDetachAwareCameraUpdateProviderDelegate, NSDKMDetachedCameraUpdateProvider, NSDKMNavigationCameraUpdateProvider, NSDKMNavigationCameraUpdateProviderCompanion, NSDKMSchedulingCameraHandler, NSDKMPredictionHeadingProvider, NSDKMGenericNavigationZoomProvider, NSDKMGenericNavigationZoomProviderCompanion, NSDKMGenericNavigationZoomProviderZoomStep, NSDKMRoutingEventAwareZoomProvider, NSDKMRoutingEventAwareZoomProviderCompanion, NSDKMRoutingEventAwareZoomProviderZoomRange, NSDKMPredictionCameraLocationProvider, NSDKMStatefulManeuverAwareTiltProvider, NSDKMStatefulManeuverAwareTiltProviderCompanion, NSDKMPredictedLocationProvider, NSDKMPredictedLocationProviderCompanion, NSDKMRouteUtils, NSDKMAbsoluteSpeedRouteFeatureCreator, NSDKMColorUtils, NSDKMColorUtilsColor, NSDKMColoringRouteFeatureCreator, NSDKMRelativeSpeedRouteFeatureCreator, NSDKMKotlinEnum<E>, NSDKMRelativeSpeedRouteFeatureCreatorCategory, NSDKMRelativeSpeedRouteFeatureCreatorColorProviderDefaultColorProvider, NSDKMRelativeSpeedRouteFeatureCreatorPartition, NSDKMRouteFeatureCreatorCompanion, NSDKMRouteFeatureCreatorRouteFeature, NSDKMManeuverIconProvider, NSDKMManeuverIconProviderManeuverIcon, NSDKMManeuverMapIconCreator, NSDKMManeuverMapIconCreatorCompanion, NSDKMManeuverMapIconCreatorManeuverMapIcon, NSDKMLaneIcon, NSDKMLaneIconComposition, NSDKMLaneIconCompositionProvider, NSDKMDetachConstants, NSDKMOffRouteDetachStateProvider, NSDKMCompactDurationConverter, NSDKMDetailedDistanceConverter, NSDKMDistanceConverterCompanion, NSDKMDistanceConverterResult, NSDKMDurationConverterCompanion, NSDKMDurationConverterResult, NSDKMFormatUtils, NSDKMRoundedDistanceConverter, NSDKMLabelParser, NSDKMPlainViewImageRenderer, NSDKMTurnInfoUtils, NSDKMBaseLaneVoiceInstructionStringGenerator, NSDKMBaseLaneVoiceInstructionStringGeneratorLaneSection, NSDKMNavigationVoiceInstructionHandler, NSDKMTurnAwareAudioBalanceProvider, NSDKMVoiceInstructionContext, NSDKMVoiceInstructionHandlerInterceptorResult, NSDKMDurationBasedVoiceInstructionStageProvider, NSDKMDurationBasedVoiceInstructionStageProviderCompanion, NSDKMNavigationVoiceInstructionContextProvider, NSDKMGenericSpeakableConditionCreator, NSDKMLocaleVoiceInstructionStringGenerator, NSDKMSlawicSpeakableConditionCreator, NSDKMGermanLaneVoiceCommandStringGenerator, NSDKMGermanSpeakableConditionCreator, NSDKMGermanSpeakableDirectionProvider, NSDKMGermanSpeakableDirectionProviderCompanion, NSDKMGermanSpeakableDirectionProviderPrefixConfig, NSDKMGermanTurnVoiceInstructionStringGenerator, NSDKMEnglishLaneVoiceCommandStringGenerator, NSDKMEnglishSpeakableConditionCreator, NSDKMEnglishSpeakableDirectionProvider, NSDKMEnglishTurnVoiceInstructionStringGenerator, NSDKMNorwegianLanguagePack, NSDKMCzechLanguagePack, NSDKMEstonianLanguagePack, NSDKMSpanishLanguagePack, NSDKMHungarianLanguagePack, NSDKMFrenchLanguagePack, NSDKMItalianLanguagePack, NSDKMBulgarianLanguagePack, NSDKMPortugueseLanguagePack, NSDKMFinnishLanguagePack, NSDKMRussianLanguagePack, NSDKMSwedishLanguagePack, NSDKMTurkishLanguagePack, NSDKMDutchLanguagePack, NSDKMDanishLanguagePack, NSDKMRomanianLanguagePack, NSDKMPolishLanguagePack, NSDKMFoundationLanguageProvider, NSDKMBaseNavigationSdk, NSDKMIosNavigationSdk, NSDKMBaseNavigationSdkCompanion, NSDKMIosInternetConnectionValidator, NSDKMIosInternetConnectionValidatorCompanion, NSDKMDeltaIncludingRouteProvider, NSDKMRouteComparisonProvider, NSDKMRouteComparisonResult, NSDKMRouteDeltaGenerator, NSDKMCredentialsApiKey, NSDKMCredentialsBasic, NSDKMHttpClientFactory, NSDKMAccelerationEffectedSpeedTracker, NSDKMAccelerationEffectedSpeedTrackerCompanion, NSDKMAccelerationEffectedSpeedTrackerSpeedBasedDecelerationModifier, NSDKMCalculatingSpeedTracker, NSDKMCalculatingSpeedTrackerCompanion, NSDKMSimpleSpeedTracker, NSDKMFilterWrapper, NSDKMJKalmanFilter, NSDKMJKalmanFilterCompanion, NSDKMJKalmanMatrix<A>, NSDKMJKalmanMatrixApache, NSDKMJKalmanSteps, NSDKMJKalmanStepsCompanion, NSDKMKalmanPair<T>, NSDKMDeviceStatisticsProvider, NSDKMDeviceStatisticsProviderCompanion, NSDKMDeviceStatisticsProviderDeviceState, NSDKMDeviceStatisticsProviderDeviceStatistics, NSDKMDeviceStatisticsProviderThermalState, NSDKMNavigationStatisticsProvider, NSDKMLocation, NSDKMOnRouteProjectorProjectedLocation, NSDKMDistanceAlignmentProjectionFinder, NSDKMDistanceAlignmentProjectionFinderCompanion, NSDKMDistanceAlignmentProjectionFinderProjectionResult, NSDKMPlainDistanceProjectionFinder, NSDKMProjectionFinderOptions, NSDKMOnRoutePredictorOptions, NSDKMOnRoutePredictorPredictedLocation, NSDKMSpeedBasedOnRoutePredictor, NSDKMSpeedBasedOnRoutePredictorCompanion, NSDKMOnRouteShifterShiftParameters, NSDKMOnRouteShifterShiftedLocation, NSDKMDefaultNavigationStateRepository, NSDKMDefaultNavigationStateRepositoryCompanion, NSDKMNavigationState, NSDKMKtorSessionClient, NSDKMSimpleSessionRepository, NSDKMUUIDSessionIdGenerator, NSDKMNavigationResult, NSDKMSimpleNavigationEventHandler, NSDKMDefaultDestinationRepository, NSDKMSchedulingNavigationEngine, NSDKMDistanceBasedUpdateRateProvider, NSDKMStaticUpdateRateProvider, NSDKMPredictionBasedRouteProgressTracker, NSDKMProgressHelper, NSDKMKotlinThrowable, NSDKMKotlinException, NSDKMRouteProgressTrackerNotYetInitializedException, NSDKMRouteProgressTrackerRouteProgress, NSDKMStatelessRouteProgressStateUpdater, NSDKMInterceptingValidator, NSDKMDistanceBasedReachingDestinationValidator, NSDKMDistanceBasedLeavingDestinationValidator, NSDKMDistanceBasedLeavingDestinationValidatorCompanion, NSDKMCombiningOffRouteRequestValidator, NSDKMDistanceOffRouteRequestValidator, NSDKMDurationOffRouteRequestValidator, NSDKMNoLocationAvailableException, NSDKMRouteRequestJob, NSDKMSchedulingRouteRepository, NSDKMKtorRouteProvider, NSDKMKtorRouteProviderGetRouteBody, NSDKMKtorRouteProviderGetRouteBodyCompanion, NSDKMKtorRouteProviderProbeDto, NSDKMKtorRouteProviderProbeDtoCompanion, NSDKMRouteProviderRouteNotFoundException, NSDKMRouteProviderRouteRequest, NSDKMRouteProviderRouteRequestDestination, NSDKMRouteProviderType, NSDKMFullRouteDtoConverter, NSDKMFullRouteDtoConverterCompanion, NSDKMMergingRouteDtoConverter, NSDKMRouteDataDto, NSDKMRouteDataDtoCompanion, NSDKMRouteDto, NSDKMRouteDtoCompanion, NSDKMRouteDtoDestinationInfo, NSDKMRouteDtoDestinationInfoCompanion, NSDKMRouteDtoEnforcement, NSDKMRouteDtoEnforcementCompanion, NSDKMRouteDtoGeoPoint, NSDKMRouteDtoGeoPointCompanion, NSDKMRouteDtoRouteLeg, NSDKMRouteDtoRouteLegCompanion, NSDKMRouteDtoRouteLegFuelStation, NSDKMRouteDtoRouteLegFuelStationCompanion, NSDKMRouteDtoRouteLegParkingArea, NSDKMRouteDtoRouteLegParkingAreaCompanion, NSDKMRouteDtoRouteLegStep, NSDKMRouteDtoRouteLegStepCompanion, NSDKMRouteDtoRouteLegStepLane, NSDKMRouteDtoRouteLegStepLaneCompanion, NSDKMRouteDtoRouteLegStepTurnInfo, NSDKMRouteDtoRouteLegStepTurnInfoCompanion, NSDKMRouteDtoConverterRouteConversionExceptions, NSDKMCompleteRouteMerger, NSDKMRouteUtils_, NSDKMChanceBasedOnRouteTracker, NSDKMChanceBasedOnRouteTrackerCompanion, NSDKMChanceCalculatorCompanion, NSDKMOnRouteTrackerState, NSDKMWeightedChanceCalculator, NSDKMDistanceBasedChanceCalculator, NSDKMHeadingBasedChanceCalculator, NSDKMHeadingBasedChanceCalculatorCompanion, NSDKMLevelBasedChanceCalculator, NSDKMTurnCommandAlignmentChanceCalculator, NSDKMTurnCommandAlignmentChanceCalculatorCompanion, NSDKMLaneInfo, NSDKMLaneInfoLane, NSDKMLaneInfoLaneLaneTurn, NSDKMManeuver, NSDKMRoadClass, NSDKMRoadClassCompanion, NSDKMRoutableFactory, NSDKMRoute, NSDKMRouteDestinationInfo, NSDKMRouteEnforcement, NSDKMRouteEnforcementType, NSDKMRouteFuelStation, NSDKMRouteFuelStationType, NSDKMRouteParkingArea, NSDKMRouteParkingAreaType, NSDKMRouteRouteDelta, NSDKMRouteSegment, NSDKMRouteStep, NSDKMRouteWaypoint, NSDKMRouteWaypointGpsQuality, NSDKMRouteData, NSDKMTurnCommand, NSDKMTurnCommandCompanion, NSDKMTurnInfo, NSDKMTurnInfoStreetSide, NSDKMNavigationLifeCycleAnalyticsLogger, NSDKMGenericVehicleConfig, NSDKMTemplates, NSDKMTruckConfig, NSDKMVehicleConfigDimensions, NSDKMVehicleConfigProperties, NSDKMCoroutineExecutor, NSDKMFoundationTimeProvider, NSDKMOperationQueueExecutor, NSDKMCLLocationConverter, NSDKMCLLocationProvider, NSDKMIteratingLocationProvider, NSDKMLocationCompanion, NSDKMGMLog, NSDKMPrintLogger, NSDKMDuration, NSDKMDurationCompanion, NSDKMLength, NSDKMLengthCompanion, NSDKMLocaleMeasurementSystemProvider, NSDKMMeasurementSystem, NSDKMSpeed, NSDKMSpeedCompanion, NSDKMTimestamp, NSDKMTimestampCompanion, NSDKMGMAnalytics, NSDKMCoroutineDispatchers, NSDKMMainThread, NSDKMAbstractOptimizationProblem<PAIR>, NSDKMAbstractOptimizationProblemCompanion, NSDKMAbstractEvaluation, NSDKMDenseWeightedEvaluation, NSDKMLeastSquaresAdapter, NSDKMLeastSquaresFactory, NSDKMLeastSquaresFactoryCompanion, NSDKMLevenbergMarquardtOptimizer, NSDKMLevenbergMarquardtOptimizerCompanion, NSDKMLocalLeastSquaresProblem, NSDKMOptimumImpl, NSDKMPrecision, NSDKMPrecisionCompanion, NSDKMIncrementor, NSDKMIncrementorCompanion, NSDKMMatrixUtils, NSDKMMatrixUtilsCompanion, NSDKMPair<K, V>, NSDKMAbstractRealMatrix, NSDKMAbstractRealMatrixCompanion, NSDKMArray2DRowRealMatrix, NSDKMRealVector, NSDKMArrayRealVector, NSDKMBlockRealMatrix, NSDKMBlockRealMatrixCompanion, NSDKMDefaultRealMatrixPreservingVisitor, NSDKMDiagonalMatrix, NSDKMLUDecomposition, NSDKMLUDecompositionCompanion, NSDKMQRDecomposition, NSDKMQRDecompositionSolver, NSDKMCartesian, NSDKMGeodesy, NSDKMGeodesySegment, NSDKMGeodeticCalculator, NSDKMLatLng, NSDKMLatLngCompanion, NSDKMUUID, NSDKMAdjustableBaselineTimeProvider, NSDKMTime, NSDKMSkieColdFlowIterator<E>, NSDKMSkieKotlinFlow<__covariant T>, NSDKMSkieKotlinMutableSharedFlow<T>, NSDKMSkieKotlinMutableStateFlow<T>, NSDKMSkieKotlinOptionalFlow<__covariant T>, NSDKMSkieKotlinOptionalMutableSharedFlow<T>, NSDKMSkieKotlinOptionalMutableStateFlow<T>, NSDKMSkieKotlinOptionalSharedFlow<__covariant T>, NSDKMSkieKotlinOptionalStateFlow<__covariant T>, NSDKMSkieKotlinSharedFlow<__covariant T>, NSDKMSkieKotlinStateFlow<__covariant T>, NSDKMSkie_CancellationHandler, NSDKMSkie_SuspendHandler, NSDKMSkie_SuspendResult, NSDKMSkie_SuspendResultCanceled, NSDKMSkie_SuspendResultError, NSDKMSkie_SuspendResultSuccess, NSDKMLaneIconProvider, NSDKMLaneIconProviderLaneIcon, NSDKMDayTimeTimestampConverter, NSDKMDayTimeTimestampConverterCompanion, NSDKMHourDurationConverter, NSDKMHourDurationConverterCompanion, NSDKMSdkDistanceConverter, NSDKMSdkDurationConverterResult, NSDKMSdkDurationConverterUnit, NSDKMTimestampConverterResult, NSDKMTimestampUtils, NSDKMNavigationUIState, NSDKMNavigationUIStateNavigationError, NSDKMNavigationViewModel, NSDKMFormattedRouteProgressUIState, NSDKMRouteProgressUIStateFormatter, NSDKMRouteProgressViewModel, NSDKMRouteProgressUIStateFollowingRoute, NSDKMRouteProgressUIStateLoading, NSDKMRouteProgressUIStateConverter, NSDKMManeuverViewModel, NSDKMManeuverUIStateFollowingRoute, NSDKMManeuverUIStateLoading, NSDKMManeuverUIStatePrimaryManeuverInfo, NSDKMManeuverUIStateSecondaryManeuverInfoFollowingManeuver, NSDKMManeuverUIStateSecondaryManeuverInfoLaneInfo, NSDKMManeuverUIStateConverter, NSDKMFormattedManeuverUIState, NSDKMManeuverUIStateFormatter, NSDKMHourCycle, NSDKMKotlinDelegates, NSDKM__SkieSuspendWrappersKt, NSDKMSkieTypeExportsKt, NSDKMNavigationSdkNativeKt, NSDKMVehicleConfigKt, NSDKMLocationKt, NSDKMDurationKt, NSDKMLengthKt, NSDKMSpeedKt, NSDKMNormalizedKt, NSDKMDateKt, NSDKMTimeProviderKt, NSDKMKotlinArray<T>, NSDKMKotlinIntProgression, NSDKMKotlinIntRange, NSDKMKotlinFloatArray, NSDKMKotlinEnumCompanion, NSDKMKotlinLongProgression, NSDKMKotlinLongRange, NSDKMKtor_client_coreHttpClient, NSDKMKotlinRuntimeException, NSDKMKotlinIllegalStateException, NSDKMKotlinAbstractCoroutineContextElement, NSDKMKotlinx_coroutines_coreCoroutineDispatcher, NSDKMKotlinDoubleArray, NSDKMKotlinCancellationException, NSDKMKotlinUnit, NSDKMKotlinCValuesRef<T>, NSDKMKotlinCValues<T>, NSDKMKotlinCValue<T>, NSDKMKtor_client_coreHttpRequestData, NSDKMKtor_httpOutgoingContent, NSDKMKtor_httpOutgoingContentWriteChannelContent, NSDKMKtor_httpOutgoingContentProtocolUpgrade, NSDKMKtor_utilsPipeline<TSubject, TContext>, NSDKMKtor_ioMemory, NSDKMKtor_ioBuffer, NSDKMKtor_ioChunkBuffer, NSDKMKotlinByteArray, NSDKMKtor_ioInput, NSDKMKtor_ioByteReadPacket, NSDKMKtor_client_coreHttpClientCall, NSDKMKtor_utilsTypeInfo, NSDKMKtor_httpOutgoingContentNoContent, NSDKMKtor_httpOutgoingContentReadChannelContent, NSDKMKtor_httpOutgoingContentByteArrayContent, NSDKMKotlinx_serialization_coreSerialKind, NSDKMKotlinx_serialization_corePolymorphicKind, NSDKMKotlinx_serialization_corePrimitiveKind, NSDKMKotlinx_serialization_coreSerialKindCONTEXTUAL, NSDKMKotlinx_serialization_coreSerialKindENUM, NSDKMKotlinx_serialization_coreStructureKind, NSDKMKotlinx_serialization_corePolymorphicKindOPEN, NSDKMKotlinx_serialization_corePolymorphicKindSEALED, NSDKMKotlinx_serialization_corePrimitiveKindBOOLEAN, NSDKMKotlinx_serialization_corePrimitiveKindBYTE, NSDKMKotlinx_serialization_corePrimitiveKindCHAR, NSDKMKotlinx_serialization_corePrimitiveKindDOUBLE, NSDKMKotlinx_serialization_corePrimitiveKindFLOAT, NSDKMKotlinx_serialization_corePrimitiveKindINT, NSDKMKotlinx_serialization_corePrimitiveKindLONG, NSDKMKotlinx_serialization_corePrimitiveKindSHORT, NSDKMKotlinx_serialization_corePrimitiveKindSTRING, NSDKMKotlinx_serialization_coreStructureKindCLASS, NSDKMKotlinx_serialization_coreStructureKindLIST, NSDKMKotlinx_serialization_coreStructureKindMAP, NSDKMKotlinx_serialization_coreStructureKindOBJECT, NSDKMKotlinIntProgressionCompanion, NSDKMKotlinIntIterator, NSDKMKotlinIntRangeCompanion, NSDKMKotlinFloatIterator, NSDKMKotlinLongProgressionCompanion, NSDKMKotlinLongIterator, NSDKMKotlinLongRangeCompanion, NSDKMKtor_client_coreHttpClientEngineConfig, NSDKMKtor_client_coreHttpClientConfig<T>, NSDKMKtor_eventsEvents, NSDKMKtor_client_coreHttpReceivePipeline, NSDKMKtor_client_coreHttpRequestPipeline, NSDKMKtor_client_coreHttpResponsePipeline, NSDKMKtor_client_coreHttpSendPipeline, NSDKMKtor_client_coreHttpResponseData, NSDKMKotlinAbstractCoroutineContextKey<B, E>, NSDKMKotlinx_coroutines_coreCoroutineDispatcherKey, NSDKMKotlinDoubleIterator, NSDKMKotlinDeferScope, NSDKMKotlinAutofreeScope, NSDKMKtor_httpUrl, NSDKMKtor_httpHttpMethod, NSDKMKtor_utilsAttributeKey<T>, NSDKMKtor_httpHeaderValueWithParameters, NSDKMKtor_httpContentType, NSDKMKtor_httpHttpStatusCode, NSDKMKtor_utilsPipelinePhase, NSDKMKtor_ioMemoryCompanion, NSDKMKtor_ioBufferCompanion, NSDKMKtor_ioChunkBufferCompanion, NSDKMKotlinByteIterator, NSDKMKtor_ioInputCompanion, NSDKMKtor_ioByteReadPacketCompanion, NSDKMKtor_client_coreHttpClientCallCompanion, NSDKMKtor_client_coreHttpResponse, NSDKMKtor_client_coreProxyConfig, NSDKMKtor_eventsEventDefinition<T>, NSDKMKtor_client_coreHttpReceivePipelinePhases, NSDKMKtor_client_coreHttpRequestPipelinePhases, NSDKMKtor_client_coreHttpRequestBuilder, NSDKMKtor_client_coreHttpResponsePipelinePhases, NSDKMKtor_client_coreHttpResponseContainer, NSDKMKtor_client_coreHttpSendPipelinePhases, NSDKMKtor_utilsGMTDate, NSDKMKtor_httpHttpProtocolVersion, NSDKMKotlinx_serialization_coreSerializersModule, NSDKMKotlinNothing, NSDKMKotlinKTypeProjection, NSDKMKtor_httpUrlCompanion, NSDKMKtor_httpURLProtocol, NSDKMKtor_httpHttpMethodCompanion, NSDKMKtor_httpHeaderValueParam, NSDKMKtor_httpHeaderValueWithParametersCompanion, NSDKMKtor_httpContentTypeCompanion, NSDKMKtor_httpHttpStatusCodeCompanion, NSDKMKtor_utilsStringValuesBuilderImpl, NSDKMKtor_httpHeadersBuilder, NSDKMKtor_client_coreHttpRequestBuilderCompanion, NSDKMKtor_httpURLBuilder, NSDKMKtor_utilsGMTDateCompanion, NSDKMKtor_utilsWeekDay, NSDKMKtor_utilsMonth, NSDKMKtor_httpHttpProtocolVersionCompanion, NSDKMKotlinKVariance, NSDKMKotlinKTypeProjectionCompanion, NSDKMKtor_httpURLProtocolCompanion, NSDKMKtor_httpURLBuilderCompanion, NSDKMKtor_utilsWeekDayCompanion, NSDKMKtor_utilsMonthCompanion, NSString, UIView, NSArray, NSMutableArray, NSDictionary, UIImage, NSSet, NSLocale, CLLocation, CLLocationManager, NSDate;

@protocol NSDKMExecutor, NSDKMLanguageProvider, NSDKMCameraUpdateProvider, NSDKMNavigationCameraHandler, NSDKMNavigationCameraHandlerCameraTrackingListener, NSDKMNavigationCameraHandlerCameraUpdateListener, NSDKMHeadingProvider, NSDKMZoomProvider, NSDKMCameraLocationProvider, NSDKMTiltProvider, NSDKMPaddingProvider, NSDKMLocationProvider, NSDKMRouteFeatureCreator, NSDKMKotlinComparable, NSDKMRelativeSpeedRouteFeatureCreatorColorProvider, NSDKMManeuverImageProvider, NSDKMRouteDetachStateProvider, NSDKMDurationConverter, NSDKMDistanceConverter, NSDKMViewImageRenderer, NSDKMVoiceInstructionStringGenerator, NSDKMVoiceInstructionHandler, NSDKMOnNavigationStateUpdatedListener, NSDKMVoiceInstructionDispatcher, NSDKMVoiceInstructionHandlerInterceptor, NSDKMVoiceInstructionStageProvider, NSDKMVoiceInstructionContextProvider, NSDKMSpeakableConditionCreator, NSDKMSpeakableDirectionProvider, NSDKMNavigationSdk, NSDKMInternetConnectionValidator, NSDKMRouteProvider, NSDKMCredentials, NSDKMSpeedTracker, NSDKMLocationUpdateListener, NSDKMAccelerationEffectedSpeedTrackerDecelerationModifier, NSDKMLocationRepository, NSDKMStatisticsProvider, NSDKMDeviceStatisticsProviderDeviceStateProvider, NSDKMNavigationEventHandlerOnInitialRouteReceivedListener, NSDKMOnRouteProjector, NSDKMOnRouteProjectorOnRouteProjectorListener, NSDKMProjectionFinder, NSDKMDistanceAlignmentProjectionFinderProjectionResultListener, NSDKMOnRoutePredictor, NSDKMOnRoutePredictorOnRoutePredictionListener, NSDKMOnRouteShifter, NSDKMNavigationStateRepository, NSDKMOnNavigationStateInitializedListener, NSDKMSessionClient, NSDKMSessionClientCallback, NSDKMSessionIdGenerator, NSDKMSessionParamProvider, NSDKMSessionRepository, NSDKMNavigationEventHandler, NSDKMNavigationEventHandlerOnDestinationChangedListener, NSDKMNavigationEventHandlerOnDestinationReachedListener, NSDKMNavigationEventHandlerOnLeavingDestinationListener, NSDKMNavigationEventHandlerOnNavigationStartedListener, NSDKMNavigationEventHandlerOnNavigationStoppedListener, NSDKMNavigationEventHandlerOnOffRouteListener, NSDKMNavigationEventHandlerOnRouteRequestFailedListener, NSDKMNavigationEventHandlerOnRouteUpdateListener, NSDKMNavigationEventHandlerOnTrackingSpeedReachedListener, NSDKMDestinationRepository, NSDKMOnCurrentDestinationChangedListener, NSDKMOnDestinationsChangedListener, NSDKMNavigationEngine, NSDKMRouteRepositoryRouteUpdatedListener, NSDKMRouteProgressTrackerOnRouteProgressUpdatedListener, NSDKMOnRouteTrackerOnRouteStateListener, NSDKMUpdateRateProvider, NSDKMRouteProgressTracker, NSDKMRouteProgressStateUpdater, NSDKMValidator, NSDKMInterceptingValidatorInterceptor, NSDKMSchedulingRouteRepositoryOffRouteRequestValidator, NSDKMRouteRepository, NSDKMRouteRequestJobListener, NSDKMRoutingConfig, NSDKMRoutingParamProvider, NSDKMLocationTrailProvider, NSDKMRouteDtoConverter, NSDKMRouteMerger, NSDKMOnRouteTracker, NSDKMChanceCalculator, NSDKMRoutable, NSDKMHeadingDependentRoutable, NSDKMManagedRoutable, NSDKMParkingLocationRoutable, NSDKMVehicleConfig, NSDKMExecutorFuture, NSDKMTimeProvider, NSDKMSerializable, NSDKMLocationProviderLocationUpdateListener, NSDKMLogger, NSDKMMeasurementSystemProvider, NSDKMAnalyticsHandler, NSDKMOptimizationProblem, NSDKMLeastSquaresProblemEvaluation, NSDKMLeastSquaresProblem, NSDKMLeastSquaresOptimizer, NSDKMLeastSquaresOptimizerOptimum, NSDKMMultivariateJacobianFunction, NSDKMKotlinIterator, NSDKMIncrementorMaxCountExceededCallback, NSDKMAnyMatrix, NSDKMRealMatrix, NSDKMDecompositionSolver, NSDKMRealMatrixPreservingVisitor, NSDKMDateTimeFormatter, NSDKMKotlinx_coroutines_coreFlow, NSDKMKotlinx_coroutines_coreSharedFlow, NSDKMKotlinx_coroutines_coreFlowCollector, NSDKMKotlinx_coroutines_coreMutableSharedFlow, NSDKMKotlinx_coroutines_coreStateFlow, NSDKMKotlinx_coroutines_coreMutableStateFlow, NSDKMSkie_DispatcherDelegate, NSDKMTimestampConverter, NSDKMSdkDurationConverter, NSDKMViewModel, NSDKMRouteProgressUIState, NSDKMManeuverUIState, NSDKMManeuverUIStateSecondaryManeuverInfo, NSDKMKotlinIterable, NSDKMKotlinClosedRange, NSDKMKotlinOpenEndRange, NSDKMKotlinx_coroutines_coreCoroutineScope, NSDKMKtor_ioCloseable, NSDKMKtor_client_coreHttpClientEngine, NSDKMKotlinx_serialization_coreSerializationStrategy, NSDKMKotlinx_serialization_coreDeserializationStrategy, NSDKMKotlinx_serialization_coreKSerializer, NSDKMKotlinCoroutineContext, NSDKMKotlinCoroutineContextElement, NSDKMKotlinContinuationInterceptor, NSDKMKotlinx_coroutines_coreRunnable, NSDKMKotlinReadOnlyProperty, NSDKMKotlinReadWriteProperty, NSDKMKotlinKAnnotatedElement, NSDKMKotlinKCallable, NSDKMKotlinKProperty, NSDKMKtor_ioByteWriteChannel, NSDKMKtor_ioByteReadChannel, NSDKMKotlinFunction, NSDKMKotlinSuspendFunction1, NSDKMKotlinAppendable, NSDKMKotlinx_coroutines_coreJob, NSDKMKotlinSuspendFunction2, NSDKMKotlinx_coroutines_coreSelectClause, NSDKMKotlinx_coroutines_coreSelectClause1, NSDKMKotlinx_coroutines_coreSelectClause2, NSDKMKtor_client_coreHttpClientEngineCapability, NSDKMKtor_utilsAttributes, NSDKMKotlinx_serialization_coreEncoder, NSDKMKotlinx_serialization_coreSerialDescriptor, NSDKMKotlinx_serialization_coreDecoder, NSDKMKotlinCoroutineContextKey, NSDKMKotlinContinuation, NSDKMKotlinNativePlacement, NSDKMKotlinKType, NSDKMKtor_utilsStringValues, NSDKMKtor_httpHeaders, NSDKMKtor_ioReadSession, NSDKMKtor_ioObjectPool, NSDKMKotlinx_coroutines_coreDisposableHandle, NSDKMKotlinx_coroutines_coreChildHandle, NSDKMKotlinx_coroutines_coreChildJob, NSDKMKotlinSequence, NSDKMKotlinx_coroutines_coreSelectClause0, NSDKMKtor_httpHttpMessage, NSDKMKtor_client_coreHttpRequest, NSDKMKotlinKDeclarationContainer, NSDKMKotlinKClassifier, NSDKMKotlinKClass, NSDKMKotlinx_coroutines_coreSelectInstance, NSDKMKtor_client_coreHttpClientPlugin, NSDKMKtor_httpHttpMessageBuilder, NSDKMKotlinx_serialization_coreCompositeEncoder, NSDKMKotlinAnnotation, NSDKMKotlinx_serialization_coreCompositeDecoder, NSDKMKtor_httpParameters, NSDKMKotlinMapEntry, NSDKMKotlinx_coroutines_coreParentJob, NSDKMKtor_utilsStringValuesBuilder, NSDKMKotlinx_serialization_coreSerializersModuleCollector, NSDKMKtor_httpParametersBuilder, CLLocationManagerDelegate;

typedef double Skie__TypeDef__0__double __attribute__((__swift_private__));

NS_ASSUME_NONNULL_BEGIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunknown-warning-option"
#pragma clang diagnostic ignored "-Wincompatible-property-type"
#pragma clang diagnostic ignored "-Wnullability"

#pragma push_macro("_Nullable_result")
#if !__has_feature(nullability_nullable_result)
#undef _Nullable_result
#define _Nullable_result _Nullable
#endif

__attribute__((swift_name("KotlinBase")))
@interface NSDKMBase : NSObject
- (instancetype)init __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (void)initialize __attribute__((objc_requires_super));
@end

@interface NSDKMBase (NSDKMBaseCopying) <NSCopying>
@end

__attribute__((swift_name("KotlinMutableSet")))
@interface NSDKMMutableSet<ObjectType> : NSMutableSet<ObjectType>
@end

__attribute__((swift_name("KotlinMutableDictionary")))
@interface NSDKMMutableDictionary<KeyType, ObjectType> : NSMutableDictionary<KeyType, ObjectType>
@end

@interface NSError (NSErrorNSDKMKotlinException)
@property (readonly) id _Nullable kotlinException;
@end

__attribute__((swift_name("KotlinNumber")))
@interface NSDKMNumber : NSNumber
- (instancetype)initWithChar:(char)value __attribute__((unavailable));
- (instancetype)initWithUnsignedChar:(unsigned char)value __attribute__((unavailable));
- (instancetype)initWithShort:(short)value __attribute__((unavailable));
- (instancetype)initWithUnsignedShort:(unsigned short)value __attribute__((unavailable));
- (instancetype)initWithInt:(int)value __attribute__((unavailable));
- (instancetype)initWithUnsignedInt:(unsigned int)value __attribute__((unavailable));
- (instancetype)initWithLong:(long)value __attribute__((unavailable));
- (instancetype)initWithUnsignedLong:(unsigned long)value __attribute__((unavailable));
- (instancetype)initWithLongLong:(long long)value __attribute__((unavailable));
- (instancetype)initWithUnsignedLongLong:(unsigned long long)value __attribute__((unavailable));
- (instancetype)initWithFloat:(float)value __attribute__((unavailable));
- (instancetype)initWithDouble:(double)value __attribute__((unavailable));
- (instancetype)initWithBool:(BOOL)value __attribute__((unavailable));
- (instancetype)initWithInteger:(NSInteger)value __attribute__((unavailable));
- (instancetype)initWithUnsignedInteger:(NSUInteger)value __attribute__((unavailable));
+ (instancetype)numberWithChar:(char)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedChar:(unsigned char)value __attribute__((unavailable));
+ (instancetype)numberWithShort:(short)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedShort:(unsigned short)value __attribute__((unavailable));
+ (instancetype)numberWithInt:(int)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedInt:(unsigned int)value __attribute__((unavailable));
+ (instancetype)numberWithLong:(long)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedLong:(unsigned long)value __attribute__((unavailable));
+ (instancetype)numberWithLongLong:(long long)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedLongLong:(unsigned long long)value __attribute__((unavailable));
+ (instancetype)numberWithFloat:(float)value __attribute__((unavailable));
+ (instancetype)numberWithDouble:(double)value __attribute__((unavailable));
+ (instancetype)numberWithBool:(BOOL)value __attribute__((unavailable));
+ (instancetype)numberWithInteger:(NSInteger)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedInteger:(NSUInteger)value __attribute__((unavailable));
@end

__attribute__((swift_name("KotlinByte")))
@interface NSDKMByte : NSDKMNumber
- (instancetype)initWithChar:(char)value;
+ (instancetype)numberWithChar:(char)value;
@end

__attribute__((swift_name("KotlinUByte")))
@interface NSDKMUByte : NSDKMNumber
- (instancetype)initWithUnsignedChar:(unsigned char)value;
+ (instancetype)numberWithUnsignedChar:(unsigned char)value;
@end

__attribute__((swift_name("KotlinShort")))
@interface NSDKMShort : NSDKMNumber
- (instancetype)initWithShort:(short)value;
+ (instancetype)numberWithShort:(short)value;
@end

__attribute__((swift_name("KotlinUShort")))
@interface NSDKMUShort : NSDKMNumber
- (instancetype)initWithUnsignedShort:(unsigned short)value;
+ (instancetype)numberWithUnsignedShort:(unsigned short)value;
@end

__attribute__((swift_name("KotlinInt")))
@interface NSDKMInt : NSDKMNumber
- (instancetype)initWithInt:(int)value;
+ (instancetype)numberWithInt:(int)value;
@end

__attribute__((swift_name("KotlinUInt")))
@interface NSDKMUInt : NSDKMNumber
- (instancetype)initWithUnsignedInt:(unsigned int)value;
+ (instancetype)numberWithUnsignedInt:(unsigned int)value;
@end

__attribute__((swift_name("KotlinLong")))
@interface NSDKMLong : NSDKMNumber
- (instancetype)initWithLongLong:(long long)value;
+ (instancetype)numberWithLongLong:(long long)value;
@end

__attribute__((swift_name("KotlinULong")))
@interface NSDKMULong : NSDKMNumber
- (instancetype)initWithUnsignedLongLong:(unsigned long long)value;
+ (instancetype)numberWithUnsignedLongLong:(unsigned long long)value;
@end

__attribute__((swift_name("KotlinFloat")))
@interface NSDKMFloat : NSDKMNumber
- (instancetype)initWithFloat:(float)value;
+ (instancetype)numberWithFloat:(float)value;
@end

__attribute__((swift_name("KotlinDouble")))
@interface NSDKMDouble : NSDKMNumber
- (instancetype)initWithDouble:(double)value;
+ (instancetype)numberWithDouble:(double)value;
@end

__attribute__((swift_name("KotlinBoolean")))
@interface NSDKMBoolean : NSDKMNumber
- (instancetype)initWithBool:(BOOL)value;
+ (instancetype)numberWithBool:(BOOL)value;
@end

__attribute__((swift_name("LanguageProvider")))
@protocol NSDKMLanguageProvider
@required
@property (readonly) NSString *languageCode __attribute__((swift_name("languageCode")));
@property (readonly) NSString * _Nullable regionCode __attribute__((swift_name("regionCode")));
@end

__attribute__((swift_name("BaseCameraComponent")))
@interface NSDKMBaseCameraComponent : NSDKMBase
@property (class, readonly, getter=companion) NSDKMBaseCameraComponentCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL cameraTrackingActive __attribute__((swift_name("cameraTrackingActive")));
@property (readonly) id<NSDKMNavigationCameraHandler> navigationCameraHandler __attribute__((swift_name("navigationCameraHandler")));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk paddingProvider:(id<NSDKMPaddingProvider>)paddingProvider updateRate:(NSDKMDuration *)updateRate __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:updateRate:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk paddingProvider:(id<NSDKMPaddingProvider>)paddingProvider detachStateProvider:(id<NSDKMRouteDetachStateProvider>)detachStateProvider updateRate:(NSDKMDuration *)updateRate __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:detachStateProvider:updateRate:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk paddingProvider:(id<NSDKMPaddingProvider>)paddingProvider zoomSteps:(NSDKMKotlinArray<NSDKMGenericNavigationZoomProviderZoomStep *> *)zoomSteps __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:zoomSteps:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk paddingProvider:(id<NSDKMPaddingProvider>)paddingProvider __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk paddingProvider:(id<NSDKMPaddingProvider>)paddingProvider detachStateProvider:(id<NSDKMRouteDetachStateProvider>)detachStateProvider updateRate:(NSDKMDuration *)updateRate zoomSteps:(NSDKMKotlinArray<NSDKMGenericNavigationZoomProviderZoomStep *> *)zoomSteps __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:detachStateProvider:updateRate:zoomSteps:)"))) __attribute__((objc_designated_initializer));
- (void)addCameraTrackingListenerCameraTrackingListener:(id<NSDKMNavigationCameraHandlerCameraTrackingListener>)cameraTrackingListener __attribute__((swift_name("addCameraTrackingListener(cameraTrackingListener:)")));
- (void)addCameraUpdateListenerCameraUpdateListener:(id<NSDKMNavigationCameraHandlerCameraUpdateListener>)cameraUpdateListener __attribute__((swift_name("addCameraUpdateListener(cameraUpdateListener:)")));
- (void)removeCameraTrackingListenerCameraTrackingListener:(id<NSDKMNavigationCameraHandlerCameraTrackingListener>)cameraTrackingListener __attribute__((swift_name("removeCameraTrackingListener(cameraTrackingListener:)")));
- (void)removeCameraUpdateListenerCameraUpdateListener:(id<NSDKMNavigationCameraHandlerCameraUpdateListener>)cameraUpdateListener __attribute__((swift_name("removeCameraUpdateListener(cameraUpdateListener:)")));
- (void)startCameraTracking __attribute__((swift_name("startCameraTracking()")));
- (void)stopCameraTracking __attribute__((swift_name("stopCameraTracking()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BaseCameraComponent.Companion")))
@interface NSDKMBaseCameraComponentCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMBaseCameraComponentCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMDuration *DEFAULT_UPDATE_RATE __attribute__((swift_name("DEFAULT_UPDATE_RATE")));
@property (readonly) float PADDING_TOP_RATIO __attribute__((swift_name("PADDING_TOP_RATIO")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CameraComponent")))
@interface NSDKMCameraComponent : NSDKMBaseCameraComponent
- (instancetype)initWithNavigationSdk:(id<NSDKMNavigationSdk>)navigationSdk mapView:(UIView *)mapView __attribute__((swift_name("init(navigationSdk:mapView:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk paddingProvider:(id<NSDKMPaddingProvider>)paddingProvider updateRate:(NSDKMDuration *)updateRate __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:updateRate:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk paddingProvider:(id<NSDKMPaddingProvider>)paddingProvider detachStateProvider:(id<NSDKMRouteDetachStateProvider>)detachStateProvider updateRate:(NSDKMDuration *)updateRate __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:detachStateProvider:updateRate:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk paddingProvider:(id<NSDKMPaddingProvider>)paddingProvider zoomSteps:(NSDKMKotlinArray<NSDKMGenericNavigationZoomProviderZoomStep *> *)zoomSteps __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:zoomSteps:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk paddingProvider:(id<NSDKMPaddingProvider>)paddingProvider __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk paddingProvider:(id<NSDKMPaddingProvider>)paddingProvider detachStateProvider:(id<NSDKMRouteDetachStateProvider>)detachStateProvider updateRate:(NSDKMDuration *)updateRate zoomSteps:(NSDKMKotlinArray<NSDKMGenericNavigationZoomProviderZoomStep *> *)zoomSteps __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:detachStateProvider:updateRate:zoomSteps:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("Freezable")))
@interface NSDKMFreezable : NSDKMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)freezeObject __attribute__((swift_name("freezeObject()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CameraUpdate")))
@interface NSDKMCameraUpdate : NSDKMFreezable
@property (readonly) NSDKMDouble * _Nullable bearing __attribute__((swift_name("bearing")));
@property (readonly) BOOL dismissible __attribute__((swift_name("dismissible")));
@property (readonly) NSDKMDuration * _Nullable duration __attribute__((swift_name("duration")));
@property (readonly) NSDKMLatLng *latLng __attribute__((swift_name("latLng")));
@property (readonly) NSDKMCameraUpdatePadding *padding __attribute__((swift_name("padding")));
@property (readonly) NSDKMDouble * _Nullable tilt __attribute__((swift_name("tilt")));
@property (readonly) NSDKMDouble * _Nullable zoom __attribute__((swift_name("zoom")));
- (instancetype)initWithLatLng:(NSDKMLatLng *)latLng zoom:(NSDKMDouble * _Nullable)zoom tilt:(NSDKMDouble * _Nullable)tilt bearing:(NSDKMDouble * _Nullable)bearing dismissible:(BOOL)dismissible duration:(NSDKMDuration * _Nullable)duration padding:(NSDKMCameraUpdatePadding *)padding __attribute__((swift_name("init(latLng:zoom:tilt:bearing:dismissible:duration:padding:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMCameraUpdate *)doCopyLatLng:(NSDKMLatLng *)latLng zoom:(NSDKMDouble * _Nullable)zoom tilt:(NSDKMDouble * _Nullable)tilt bearing:(NSDKMDouble * _Nullable)bearing dismissible:(BOOL)dismissible duration:(NSDKMDuration * _Nullable)duration padding:(NSDKMCameraUpdatePadding *)padding __attribute__((swift_name("doCopy(latLng:zoom:tilt:bearing:dismissible:duration:padding:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CameraUpdate.Padding")))
@interface NSDKMCameraUpdatePadding : NSDKMFreezable
@property (readonly) int32_t bottom __attribute__((swift_name("bottom")));
@property (readonly) int32_t left __attribute__((swift_name("left")));
@property (readonly) int32_t right __attribute__((swift_name("right")));
@property (readonly) int32_t top __attribute__((swift_name("top")));
- (instancetype)initWithLeft:(int32_t)left top:(int32_t)top right:(int32_t)right bottom:(int32_t)bottom __attribute__((swift_name("init(left:top:right:bottom:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMCameraUpdatePadding *)doCopyLeft:(int32_t)left top:(int32_t)top right:(int32_t)right bottom:(int32_t)bottom __attribute__((swift_name("doCopy(left:top:right:bottom:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("CameraUpdateProvider")))
@protocol NSDKMCameraUpdateProvider
@required
@property (readonly) NSDKMCameraUpdate *cameraUpdate __attribute__((swift_name("cameraUpdate")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DetachAwareCameraUpdateProviderDelegate")))
@interface NSDKMDetachAwareCameraUpdateProviderDelegate : NSDKMBase <NSDKMCameraUpdateProvider>
@property (readonly) NSDKMCameraUpdate *cameraUpdate __attribute__((swift_name("cameraUpdate")));
- (instancetype)initWithDetachStateProvider:(id<NSDKMRouteDetachStateProvider>)detachStateProvider detachedCameraUpdateProvider:(id<NSDKMCameraUpdateProvider>)detachedCameraUpdateProvider defaultCameraUpdateProvider:(id<NSDKMCameraUpdateProvider>)defaultCameraUpdateProvider __attribute__((swift_name("init(detachStateProvider:detachedCameraUpdateProvider:defaultCameraUpdateProvider:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DetachedCameraUpdateProvider")))
@interface NSDKMDetachedCameraUpdateProvider : NSDKMBase <NSDKMCameraUpdateProvider>
@property (readonly) NSDKMCameraUpdate *cameraUpdate __attribute__((swift_name("cameraUpdate")));
- (instancetype)initWithNavigationSdk:(id<NSDKMNavigationSdk>)navigationSdk paddingProvider:(id<NSDKMPaddingProvider>)paddingProvider __attribute__((swift_name("init(navigationSdk:paddingProvider:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("NavigationCameraHandler")))
@protocol NSDKMNavigationCameraHandler
@required
- (void)addCameraTrackingListenerCameraTrackingListener:(id<NSDKMNavigationCameraHandlerCameraTrackingListener>)cameraTrackingListener __attribute__((swift_name("addCameraTrackingListener(cameraTrackingListener:)")));
- (void)addCameraUpdateListenerCameraUpdateListener:(id<NSDKMNavigationCameraHandlerCameraUpdateListener>)cameraUpdateListener __attribute__((swift_name("addCameraUpdateListener(cameraUpdateListener:)")));
- (void)removeCameraTrackingListenerCameraTrackingListener:(id<NSDKMNavigationCameraHandlerCameraTrackingListener>)cameraTrackingListener __attribute__((swift_name("removeCameraTrackingListener(cameraTrackingListener:)")));
- (void)removeCameraUpdateListenerCameraUpdateListener:(id<NSDKMNavigationCameraHandlerCameraUpdateListener>)cameraUpdateListener __attribute__((swift_name("removeCameraUpdateListener(cameraUpdateListener:)")));
- (void)startCameraTracking __attribute__((swift_name("startCameraTracking()")));
- (void)stopCameraTracking __attribute__((swift_name("stopCameraTracking()")));
@property (readonly) BOOL cameraTrackingActive __attribute__((swift_name("cameraTrackingActive")));
@end

__attribute__((swift_name("NavigationCameraHandlerCameraTrackingListener")))
@protocol NSDKMNavigationCameraHandlerCameraTrackingListener
@required
- (void)onCameraTrackingStarted __attribute__((swift_name("onCameraTrackingStarted()")));
- (void)onCameraTrackingStopped __attribute__((swift_name("onCameraTrackingStopped()")));
@end

__attribute__((swift_name("NavigationCameraHandlerCameraUpdateListener")))
@protocol NSDKMNavigationCameraHandlerCameraUpdateListener
@required
- (void)onCameraUpdateReadyCameraUpdate:(NSDKMCameraUpdate *)cameraUpdate __attribute__((swift_name("onCameraUpdateReady(cameraUpdate:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationCameraUpdateProvider")))
@interface NSDKMNavigationCameraUpdateProvider : NSDKMBase <NSDKMCameraUpdateProvider>
@property (class, readonly, getter=companion) NSDKMNavigationCameraUpdateProviderCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSDKMCameraUpdate *cameraUpdate __attribute__((swift_name("cameraUpdate")));
- (instancetype)initWithCameraLocationProvider:(id<NSDKMCameraLocationProvider>)cameraLocationProvider headingProvider:(id<NSDKMHeadingProvider>)headingProvider zoomProvider:(id<NSDKMZoomProvider>)zoomProvider tiltProvider:(id<NSDKMTiltProvider>)tiltProvider paddingProvider:(id<NSDKMPaddingProvider>)paddingProvider updateDuration:(NSDKMDuration *)updateDuration __attribute__((swift_name("init(cameraLocationProvider:headingProvider:zoomProvider:tiltProvider:paddingProvider:updateDuration:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationCameraUpdateProvider.Companion")))
@interface NSDKMNavigationCameraUpdateProviderCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMNavigationCameraUpdateProviderCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SchedulingCameraHandler")))
@interface NSDKMSchedulingCameraHandler : NSDKMBase <NSDKMNavigationCameraHandler>
@property BOOL cameraTrackingActive __attribute__((swift_name("cameraTrackingActive")));
- (instancetype)initWithCameraUpdateProvider:(id<NSDKMCameraUpdateProvider>)cameraUpdateProvider executor:(id<NSDKMExecutor>)executor nextUpdateOffset:(NSDKMDuration *)nextUpdateOffset __attribute__((swift_name("init(cameraUpdateProvider:executor:nextUpdateOffset:)"))) __attribute__((objc_designated_initializer));
- (void)addCameraTrackingListenerCameraTrackingListener:(id<NSDKMNavigationCameraHandlerCameraTrackingListener>)cameraTrackingListener __attribute__((swift_name("addCameraTrackingListener(cameraTrackingListener:)")));
- (void)addCameraUpdateListenerCameraUpdateListener:(id<NSDKMNavigationCameraHandlerCameraUpdateListener>)cameraUpdateListener __attribute__((swift_name("addCameraUpdateListener(cameraUpdateListener:)")));
- (void)removeCameraTrackingListenerCameraTrackingListener:(id<NSDKMNavigationCameraHandlerCameraTrackingListener>)cameraTrackingListener __attribute__((swift_name("removeCameraTrackingListener(cameraTrackingListener:)")));
- (void)removeCameraUpdateListenerCameraUpdateListener:(id<NSDKMNavigationCameraHandlerCameraUpdateListener>)cameraUpdateListener __attribute__((swift_name("removeCameraUpdateListener(cameraUpdateListener:)")));
- (void)startCameraTracking __attribute__((swift_name("startCameraTracking()")));
- (void)stopCameraTracking __attribute__((swift_name("stopCameraTracking()")));
@end

__attribute__((swift_name("HeadingProvider")))
@protocol NSDKMHeadingProvider
@required
- (NSDKMDouble * _Nullable)getHeadingLocation:(NSDKMLocation *)location __attribute__((swift_name("getHeading(location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PredictionHeadingProvider")))
@interface NSDKMPredictionHeadingProvider : NSDKMBase <NSDKMHeadingProvider>
- (instancetype)initWithOnRoutePredictor:(id<NSDKMOnRoutePredictor>)onRoutePredictor speedTracker:(id<NSDKMSpeedTracker>)speedTracker maxManeuverStopSpeed:(NSDKMSpeed *)maxManeuverStopSpeed __attribute__((swift_name("init(onRoutePredictor:speedTracker:maxManeuverStopSpeed:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithOnRoutePredictor:(id<NSDKMOnRoutePredictor>)onRoutePredictor speedTracker:(id<NSDKMSpeedTracker>)speedTracker maxManeuverStopSpeed:(NSDKMSpeed * _Nullable)maxManeuverStopSpeed maxHeadingDeltaDegrees:(double)maxHeadingDeltaDegrees predictionDuration:(NSDKMDuration *)predictionDuration __attribute__((swift_name("init(onRoutePredictor:speedTracker:maxManeuverStopSpeed:maxHeadingDeltaDegrees:predictionDuration:)"))) __attribute__((objc_designated_initializer));
- (NSDKMDouble * _Nullable)getHeadingLocation:(NSDKMLocation *)location __attribute__((swift_name("getHeading(location:)")));
@end

__attribute__((swift_name("ZoomProvider")))
@protocol NSDKMZoomProvider
@required
- (double)convertSpeed:(NSDKMSpeed *)speed __attribute__((swift_name("convert(speed:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GenericNavigationZoomProvider")))
@interface NSDKMGenericNavigationZoomProvider : NSDKMBase <NSDKMZoomProvider>
@property (class, readonly, getter=companion) NSDKMGenericNavigationZoomProviderCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)initWithZoomSteps:(NSDKMKotlinArray<NSDKMGenericNavigationZoomProviderZoomStep *> *)zoomSteps __attribute__((swift_name("init(zoomSteps:)"))) __attribute__((objc_designated_initializer));
- (double)convertSpeed:(NSDKMSpeed *)speed __attribute__((swift_name("convert(speed:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GenericNavigationZoomProvider.Companion")))
@interface NSDKMGenericNavigationZoomProviderCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMGenericNavigationZoomProviderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKotlinArray<NSDKMGenericNavigationZoomProviderZoomStep *> *ZOOM_STEPS __attribute__((swift_name("ZOOM_STEPS")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GenericNavigationZoomProvider.ZoomStep")))
@interface NSDKMGenericNavigationZoomProviderZoomStep : NSDKMFreezable
@property (readonly) NSDKMSpeed *speed __attribute__((swift_name("speed")));
@property (readonly) double zoom __attribute__((swift_name("zoom")));
- (instancetype)initWithSpeed:(NSDKMSpeed *)speed zoom:(double)zoom __attribute__((swift_name("init(speed:zoom:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMGenericNavigationZoomProviderZoomStep *)doCopySpeed:(NSDKMSpeed *)speed zoom:(double)zoom __attribute__((swift_name("doCopy(speed:zoom:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RoutingEventAwareZoomProvider")))
@interface NSDKMRoutingEventAwareZoomProvider : NSDKMBase <NSDKMZoomProvider>
@property (class, readonly, getter=companion) NSDKMRoutingEventAwareZoomProviderCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)initWithZoomProvider:(id<NSDKMZoomProvider>)zoomProvider navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk minDistance:(NSDKMLength *)minDistance maxSpeed:(NSDKMSpeed *)maxSpeed zoomRange:(NSDKMRoutingEventAwareZoomProviderZoomRange *)zoomRange __attribute__((swift_name("init(zoomProvider:navigationSdk:minDistance:maxSpeed:zoomRange:)"))) __attribute__((objc_designated_initializer));
- (double)convertSpeed:(NSDKMSpeed *)speed __attribute__((swift_name("convert(speed:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RoutingEventAwareZoomProvider.Companion")))
@interface NSDKMRoutingEventAwareZoomProviderCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRoutingEventAwareZoomProviderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) double MAX_ZOOM __attribute__((swift_name("MAX_ZOOM")));
@property (readonly) double MIN_ZOOM __attribute__((swift_name("MIN_ZOOM")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RoutingEventAwareZoomProvider.ZoomRange")))
@interface NSDKMRoutingEventAwareZoomProviderZoomRange : NSDKMBase
@property (readonly) double maxZoom __attribute__((swift_name("maxZoom")));
@property (readonly) double minZoom __attribute__((swift_name("minZoom")));
- (instancetype)initWithMinZoom:(double)minZoom maxZoom:(double)maxZoom __attribute__((swift_name("init(minZoom:maxZoom:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("CameraLocationProvider")))
@protocol NSDKMCameraLocationProvider
@required

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMLocation * _Nullable)getLocationDuration:(NSDKMDuration *)duration error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("getLocation(duration:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PredictionCameraLocationProvider")))
@interface NSDKMPredictionCameraLocationProvider : NSDKMBase <NSDKMCameraLocationProvider>
- (instancetype)initWithNavigationSdk:(id<NSDKMNavigationSdk>)navigationSdk timeProvider:(id<NSDKMTimeProvider>)timeProvider maxManeuverStopSpeed:(NSDKMSpeed *)maxManeuverStopSpeed __attribute__((swift_name("init(navigationSdk:timeProvider:maxManeuverStopSpeed:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMLocation * _Nullable)getLocationDuration:(NSDKMDuration *)duration error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("getLocation(duration:)")));
@end

__attribute__((swift_name("TiltProvider")))
@protocol NSDKMTiltProvider
@required
- (double)getTilt __attribute__((swift_name("getTilt()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StatefulManeuverAwareTiltProvider")))
@interface NSDKMStatefulManeuverAwareTiltProvider : NSDKMBase <NSDKMTiltProvider>
@property (class, readonly, getter=companion) NSDKMStatefulManeuverAwareTiltProviderCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)initWithNavigationSdk:(id<NSDKMNavigationSdk>)navigationSdk minDistance:(NSDKMLength *)minDistance minSpeed:(NSDKMSpeed *)minSpeed tilt3DRange:(NSDKMKotlinIntRange *)tilt3DRange __attribute__((swift_name("init(navigationSdk:minDistance:minSpeed:tilt3DRange:)"))) __attribute__((objc_designated_initializer));
- (double)getTilt __attribute__((swift_name("getTilt()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StatefulManeuverAwareTiltProvider.Companion")))
@interface NSDKMStatefulManeuverAwareTiltProviderCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMStatefulManeuverAwareTiltProviderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) int32_t TILT_3D_MAX __attribute__((swift_name("TILT_3D_MAX")));
@property (readonly) int32_t TILT_3D_MIN __attribute__((swift_name("TILT_3D_MIN")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("PaddingProvider")))
@protocol NSDKMPaddingProvider
@required
- (NSDKMCameraUpdatePadding *)getPadding __attribute__((swift_name("getPadding()")));
@end

__attribute__((swift_name("LocationProvider")))
@protocol NSDKMLocationProvider
@required
- (void)addLocationUpdateListenerLocationUpdateListener:(id<NSDKMLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("addLocationUpdateListener(locationUpdateListener:)")));
- (void)removeLocationUpdateListenerLocationUpdateListener:(id<NSDKMLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("removeLocationUpdateListener(locationUpdateListener:)")));
- (void)startLocationUpdates __attribute__((swift_name("startLocationUpdates()")));
- (void)stopLocationUpdates __attribute__((swift_name("stopLocationUpdates()")));
@property (readonly) BOOL active __attribute__((swift_name("active")));
@property (readonly) NSDKMLocation * _Nullable lastKnownLocation __attribute__((swift_name("lastKnownLocation")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PredictedLocationProvider")))
@interface NSDKMPredictedLocationProvider : NSDKMBase <NSDKMLocationProvider>
@property (class, readonly, getter=companion) NSDKMPredictedLocationProviderCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL active __attribute__((swift_name("active")));
@property (readonly) NSDKMLocation * _Nullable lastKnownLocation __attribute__((swift_name("lastKnownLocation")));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk __attribute__((swift_name("init(executor:navigationSdk:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk routeDetachStateProvider:(id<NSDKMRouteDetachStateProvider> _Nullable)routeDetachStateProvider __attribute__((swift_name("init(executor:navigationSdk:routeDetachStateProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk routeDetachStateProvider:(id<NSDKMRouteDetachStateProvider> _Nullable)routeDetachStateProvider maxManeuverStopSpeed:(NSDKMSpeed *)maxManeuverStopSpeed locationUpdateInterval:(NSDKMDuration *)locationUpdateInterval __attribute__((swift_name("init(executor:navigationSdk:routeDetachStateProvider:maxManeuverStopSpeed:locationUpdateInterval:)"))) __attribute__((objc_designated_initializer));
- (void)addLocationUpdateListenerLocationUpdateListener:(id<NSDKMLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("addLocationUpdateListener(locationUpdateListener:)")));
- (void)removeLocationUpdateListenerLocationUpdateListener:(id<NSDKMLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("removeLocationUpdateListener(locationUpdateListener:)")));
- (void)startLocationUpdates __attribute__((swift_name("startLocationUpdates()")));
- (void)stopLocationUpdates __attribute__((swift_name("stopLocationUpdates()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PredictedLocationProvider.Companion")))
@interface NSDKMPredictedLocationProviderCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMPredictedLocationProviderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMDuration *DEFAULT_LOCATION_UPDATE_INTERVAL __attribute__((swift_name("DEFAULT_LOCATION_UPDATE_INTERVAL")));
@property (readonly) double DEFAULT_NEXT_MANEUVER_STOP_SPEED_KMH __attribute__((swift_name("DEFAULT_NEXT_MANEUVER_STOP_SPEED_KMH")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteUtils")))
@interface NSDKMRouteUtils : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteUtils *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)routeUtils __attribute__((swift_name("init()")));
- (NSArray<NSDKMRouteWaypoint *> *)sliceByProjectionWaypoints:(NSArray<NSDKMRouteWaypoint *> *)waypoints projectedLocation:(NSDKMOnRouteProjectorProjectedLocation *)projectedLocation __attribute__((swift_name("sliceByProjection(waypoints:projectedLocation:)")));
- (NSArray<NSArray<NSDKMRouteWaypoint *> *> *)splitAtIndexWaypoints:(NSArray<NSDKMRouteWaypoint *> *)waypoints indexInclusive:(int32_t)indexInclusive __attribute__((swift_name("splitAtIndex(waypoints:indexInclusive:)")));
@end

__attribute__((swift_name("RouteFeatureCreator")))
@protocol NSDKMRouteFeatureCreator
@required

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSArray<NSDKMRouteFeatureCreatorRouteFeature *> * _Nullable)createFeaturesWaypoints:(NSArray<NSDKMRouteWaypoint *> *)waypoints error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("createFeatures(waypoints:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AbsoluteSpeedRouteFeatureCreator")))
@interface NSDKMAbsoluteSpeedRouteFeatureCreator : NSDKMBase <NSDKMRouteFeatureCreator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSArray<NSDKMRouteFeatureCreatorRouteFeature *> * _Nullable)createFeaturesWaypoints:(NSArray<NSDKMRouteWaypoint *> *)waypoints error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("createFeatures(waypoints:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ColorUtils")))
@interface NSDKMColorUtils : NSDKMBase
@property (class, readonly, getter=shared) NSDKMColorUtils *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)colorUtils __attribute__((swift_name("init()")));
- (NSString *)convertSpeedToColorSpeed:(NSDKMSpeed *)speed brightness:(float)brightness __attribute__((swift_name("convertSpeedToColor(speed:brightness:)")));
- (NSString *)convertToHexRed:(int32_t)red green:(int32_t)green blue:(int32_t)blue __attribute__((swift_name("convertToHex(red:green:blue:)")));
- (NSDKMKotlinFloatArray *)toRGBAHue:(float)hue saturation:(float)saturation brightness:(float)brightness alpha:(float)alpha __attribute__((swift_name("toRGBA(hue:saturation:brightness:alpha:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ColorUtils.Color")))
@interface NSDKMColorUtilsColor : NSDKMBase
@property (readonly) double blue __attribute__((swift_name("blue")));
@property (readonly) double green __attribute__((swift_name("green")));
@property (readonly) double red __attribute__((swift_name("red")));
- (instancetype)initWithRed:(int32_t)red green:(int32_t)green blue:(int32_t)blue __attribute__((swift_name("init(red:green:blue:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithRed:(double)red green:(double)green blue_:(double)blue __attribute__((swift_name("init(red:green:blue_:)"))) __attribute__((objc_designated_initializer));
- (NSDKMColorUtilsColor *)doCopyRed:(double)red green:(double)green blue:(double)blue __attribute__((swift_name("doCopy(red:green:blue:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)toHex __attribute__((swift_name("toHex()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ColoringRouteFeatureCreator")))
@interface NSDKMColoringRouteFeatureCreator : NSDKMBase <NSDKMRouteFeatureCreator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithFillColor:(NSString *)fillColor outlineColor:(NSString *)outlineColor __attribute__((swift_name("init(fillColor:outlineColor:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSArray<NSDKMRouteFeatureCreatorRouteFeature *> * _Nullable)createFeaturesWaypoints:(NSArray<NSDKMRouteWaypoint *> *)waypoints error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("createFeatures(waypoints:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RelativeSpeedRouteFeatureCreator")))
@interface NSDKMRelativeSpeedRouteFeatureCreator : NSDKMBase <NSDKMRouteFeatureCreator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithColorProvider:(id<NSDKMRelativeSpeedRouteFeatureCreatorColorProvider>)colorProvider __attribute__((swift_name("init(colorProvider:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSArray<NSDKMRouteFeatureCreatorRouteFeature *> * _Nullable)createFeaturesWaypoints:(NSArray<NSDKMRouteWaypoint *> *)waypoints error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("createFeatures(waypoints:)")));
@end

__attribute__((swift_name("KotlinComparable")))
@protocol NSDKMKotlinComparable
@required
- (int32_t)compareToOther:(id _Nullable)other __attribute__((swift_name("compareTo(other:)")));
@end

__attribute__((swift_name("KotlinEnum")))
@interface NSDKMKotlinEnum<E> : NSDKMBase <NSDKMKotlinComparable>
@property (class, readonly, getter=companion) NSDKMKotlinEnumCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) int32_t ordinal __attribute__((swift_name("ordinal")));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer));
- (int32_t)compareToOther:(E)other __attribute__((swift_name("compareTo(other:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RelativeSpeedRouteFeatureCreator.Category")))
@interface NSDKMRelativeSpeedRouteFeatureCreatorCategory : NSDKMKotlinEnum<NSDKMRelativeSpeedRouteFeatureCreatorCategory *>
@property (class, readonly) NSDKMRelativeSpeedRouteFeatureCreatorCategory *default_ __attribute__((swift_name("default_")));
@property (class, readonly) NSDKMRelativeSpeedRouteFeatureCreatorCategory *yellow __attribute__((swift_name("yellow")));
@property (class, readonly) NSDKMRelativeSpeedRouteFeatureCreatorCategory *red __attribute__((swift_name("red")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMRelativeSpeedRouteFeatureCreatorCategory *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("RelativeSpeedRouteFeatureCreatorColorProvider")))
@protocol NSDKMRelativeSpeedRouteFeatureCreatorColorProvider
@required
@property (readonly, getter=default) NSString *default_ __attribute__((swift_name("default_")));
@property (readonly) NSString *outline __attribute__((swift_name("outline")));
@property (readonly) NSString *red __attribute__((swift_name("red")));
@property (readonly) NSString *yellow __attribute__((swift_name("yellow")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RelativeSpeedRouteFeatureCreatorColorProviderDefaultColorProvider")))
@interface NSDKMRelativeSpeedRouteFeatureCreatorColorProviderDefaultColorProvider : NSDKMBase <NSDKMRelativeSpeedRouteFeatureCreatorColorProvider>
@property (readonly, getter=default) NSString *default_ __attribute__((swift_name("default_")));
@property (readonly) NSString *outline __attribute__((swift_name("outline")));
@property (readonly) NSString *red __attribute__((swift_name("red")));
@property (readonly) NSString *yellow __attribute__((swift_name("yellow")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RelativeSpeedRouteFeatureCreator.Partition")))
@interface NSDKMRelativeSpeedRouteFeatureCreatorPartition : NSDKMBase
@property (readonly) NSString *color __attribute__((swift_name("color")));
@property (readonly) NSMutableArray<NSDKMLatLng *> *waypoints __attribute__((swift_name("waypoints")));
- (instancetype)initWithColor:(NSString *)color waypoints:(NSMutableArray<NSDKMLatLng *> *)waypoints __attribute__((swift_name("init(color:waypoints:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteFeatureCreatorCompanion")))
@interface NSDKMRouteFeatureCreatorCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteFeatureCreatorCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *FILL_COLOR __attribute__((swift_name("FILL_COLOR")));
@property (readonly) NSString *OUTLINE_COLOR __attribute__((swift_name("OUTLINE_COLOR")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteFeatureCreatorRouteFeature")))
@interface NSDKMRouteFeatureCreatorRouteFeature : NSDKMBase
@property (readonly) NSArray<NSDKMLatLng *> *polyline __attribute__((swift_name("polyline")));
@property (readonly) NSDictionary<NSString *, id> *properties __attribute__((swift_name("properties")));
- (instancetype)initWithPolyline:(NSArray<NSDKMLatLng *> *)polyline properties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("init(polyline:properties:)"))) __attribute__((objc_designated_initializer));
- (NSDKMRouteFeatureCreatorRouteFeature *)doCopyPolyline:(NSArray<NSDKMLatLng *> *)polyline properties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("doCopy(polyline:properties:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManeuverIconProvider")))
@interface NSDKMManeuverIconProvider : NSDKMBase
@property (class, readonly, getter=shared) NSDKMManeuverIconProvider *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)maneuverIconProvider __attribute__((swift_name("init()")));
- (NSDKMManeuverIconProviderManeuverIcon *)getManeuverIconTurnInfo:(NSDKMTurnInfo * _Nullable)turnInfo __attribute__((swift_name("getManeuverIcon(turnInfo:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManeuverIconProvider.ManeuverIcon")))
@interface NSDKMManeuverIconProviderManeuverIcon : NSDKMKotlinEnum<NSDKMManeuverIconProviderManeuverIcon *>
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *unknown __attribute__((swift_name("unknown")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *arriveStraight __attribute__((swift_name("arriveStraight")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *continueLeft __attribute__((swift_name("continueLeft")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *continueSharpLeft __attribute__((swift_name("continueSharpLeft")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *continueSharpRight __attribute__((swift_name("continueSharpRight")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *continueSlightLeft __attribute__((swift_name("continueSlightLeft")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *continueSlightRight __attribute__((swift_name("continueSlightRight")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *continueStraight __attribute__((swift_name("continueStraight")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *continueRight __attribute__((swift_name("continueRight")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *departStraight __attribute__((swift_name("departStraight")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *endOfRoadLeft __attribute__((swift_name("endOfRoadLeft")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *endOfRoadRight __attribute__((swift_name("endOfRoadRight")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *forkSlightLeft __attribute__((swift_name("forkSlightLeft")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *forkSlightRight __attribute__((swift_name("forkSlightRight")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *rampLevelDown __attribute__((swift_name("rampLevelDown")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *rampLevelUp __attribute__((swift_name("rampLevelUp")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *roundaboutLeft __attribute__((swift_name("roundaboutLeft")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *roundaboutRight __attribute__((swift_name("roundaboutRight")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *roundaboutSharpLeft __attribute__((swift_name("roundaboutSharpLeft")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *roundaboutSharpRight __attribute__((swift_name("roundaboutSharpRight")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *roundaboutSlightLeft __attribute__((swift_name("roundaboutSlightLeft")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *roundaboutSlightRight __attribute__((swift_name("roundaboutSlightRight")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *roundaboutStraight __attribute__((swift_name("roundaboutStraight")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *roundaboutRht __attribute__((swift_name("roundaboutRht")));
@property (class, readonly) NSDKMManeuverIconProviderManeuverIcon *uturnRht __attribute__((swift_name("uturnRht")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMManeuverIconProviderManeuverIcon *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("ManeuverImageProvider")))
@protocol NSDKMManeuverImageProvider
@required
- (UIImage *)getImageByTurnInfoTurnInfo:(NSDKMTurnInfo * _Nullable)turnInfo __attribute__((swift_name("getImageByTurnInfo(turnInfo:)")));
@end

__attribute__((swift_name("ManeuverMapIconCreator")))
@interface NSDKMManeuverMapIconCreator : NSDKMBase
@property (class, readonly, getter=companion) NSDKMManeuverMapIconCreatorCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMManeuverMapIconCreatorManeuverMapIcon * _Nullable)createTurnInfo:(NSDKMTurnInfo *)turnInfo showDirectionLabel:(BOOL)showDirectionLabel __attribute__((swift_name("create(turnInfo:showDirectionLabel:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString *)getIconAnchorTurnCommand:(NSDKMTurnCommand *)turnCommand __attribute__((swift_name("getIconAnchor(turnCommand:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (BOOL)isDisplayableTurnInfo:(NSDKMTurnInfo *)turnInfo __attribute__((swift_name("isDisplayable(turnInfo:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManeuverMapIconCreator.Companion")))
@interface NSDKMManeuverMapIconCreatorCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMManeuverMapIconCreatorCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *BOTTOM_LEFT __attribute__((swift_name("BOTTOM_LEFT")));
@property (readonly) NSString *BOTTOM_RIGHT __attribute__((swift_name("BOTTOM_RIGHT")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManeuverMapIconCreator.ManeuverMapIcon")))
@interface NSDKMManeuverMapIconCreatorManeuverMapIcon : NSDKMBase
@property (readonly) NSString *anchor __attribute__((swift_name("anchor")));
@property (readonly) UIImage *image __attribute__((swift_name("image")));
- (instancetype)initWithImage:(UIImage *)image anchor:(NSString *)anchor __attribute__((swift_name("init(image:anchor:)"))) __attribute__((objc_designated_initializer));
- (NSDKMManeuverMapIconCreatorManeuverMapIcon *)doCopyImage:(UIImage *)image anchor:(NSString *)anchor __attribute__((swift_name("doCopy(image:anchor:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LaneIcon")))
@interface NSDKMLaneIcon : NSDKMKotlinEnum<NSDKMLaneIcon *>
@property (class, readonly) NSDKMLaneIcon *left __attribute__((swift_name("left")));
@property (class, readonly) NSDKMLaneIcon *slightLeft __attribute__((swift_name("slightLeft")));
@property (class, readonly) NSDKMLaneIcon *sharpLeft __attribute__((swift_name("sharpLeft")));
@property (class, readonly) NSDKMLaneIcon *right __attribute__((swift_name("right")));
@property (class, readonly) NSDKMLaneIcon *slightRight __attribute__((swift_name("slightRight")));
@property (class, readonly) NSDKMLaneIcon *sharpRight __attribute__((swift_name("sharpRight")));
@property (class, readonly) NSDKMLaneIcon *through __attribute__((swift_name("through")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMLaneIcon *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LaneIconComposition")))
@interface NSDKMLaneIconComposition : NSDKMBase
@property (readonly) NSArray<NSDKMLaneIcon *> *remaining __attribute__((swift_name("remaining")));
@property (readonly) NSDKMLaneIcon * _Nullable use __attribute__((swift_name("use")));
- (instancetype)initWithUse:(NSDKMLaneIcon * _Nullable)use remaining:(NSArray<NSDKMLaneIcon *> *)remaining __attribute__((swift_name("init(use:remaining:)"))) __attribute__((objc_designated_initializer));
- (NSDKMLaneIconComposition *)doCopyUse:(NSDKMLaneIcon * _Nullable)use remaining:(NSArray<NSDKMLaneIcon *> *)remaining __attribute__((swift_name("doCopy(use:remaining:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LaneIconCompositionProvider")))
@interface NSDKMLaneIconCompositionProvider : NSDKMBase
@property (class, readonly, getter=shared) NSDKMLaneIconCompositionProvider *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)laneIconCompositionProvider __attribute__((swift_name("init()")));
- (NSDKMLaneIconComposition *)getLaneIconCompositionLane:(NSDKMLaneInfoLane *)lane turnCommand:(NSDKMTurnCommand * _Nullable)turnCommand __attribute__((swift_name("getLaneIconComposition(lane:turnCommand:)")));
- (NSArray<NSDKMLaneIconComposition *> *)getLaneIconCompositionsLaneInfo:(NSDKMLaneInfo *)laneInfo turnCommand:(NSDKMTurnCommand * _Nullable)turnCommand __attribute__((swift_name("getLaneIconCompositions(laneInfo:turnCommand:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DetachConstants")))
@interface NSDKMDetachConstants : NSDKMBase
@property (class, readonly, getter=shared) NSDKMDetachConstants *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *ROUTE_FILL_COLOR __attribute__((swift_name("ROUTE_FILL_COLOR")));
@property (readonly) NSString *ROUTE_OUTLINE_COLOR __attribute__((swift_name("ROUTE_OUTLINE_COLOR")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)detachConstants __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("RouteDetachStateProvider")))
@protocol NSDKMRouteDetachStateProvider
@required
@property (readonly) BOOL detached __attribute__((swift_name("detached")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OffRouteDetachStateProvider")))
@interface NSDKMOffRouteDetachStateProvider : NSDKMBase <NSDKMRouteDetachStateProvider>
@property (readonly) BOOL detached __attribute__((swift_name("detached")));
- (instancetype)initWithNavigationSdk:(id<NSDKMNavigationSdk>)navigationSdk __attribute__((swift_name("init(navigationSdk:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithNavigationSdk:(id<NSDKMNavigationSdk>)navigationSdk minRouteDistance:(NSDKMLength *)minRouteDistance __attribute__((swift_name("init(navigationSdk:minRouteDistance:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("DurationConverter")))
@protocol NSDKMDurationConverter
@required
- (NSArray<NSDKMDurationConverterResult *> *)convertDuration:(NSDKMDuration *)duration __attribute__((swift_name("convert(duration:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CompactDurationConverter")))
@interface NSDKMCompactDurationConverter : NSDKMBase <NSDKMDurationConverter>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSArray<NSDKMDurationConverterResult *> *)convertDuration:(NSDKMDuration *)duration __attribute__((swift_name("convert(duration:)")));
@end

__attribute__((swift_name("DistanceConverter")))
@protocol NSDKMDistanceConverter
@required
- (NSDKMDistanceConverterResult *)convertLength:(NSDKMLength *)length measurementSystem:(NSDKMMeasurementSystem *)measurementSystem __attribute__((swift_name("convert(length:measurementSystem:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DetailedDistanceConverter")))
@interface NSDKMDetailedDistanceConverter : NSDKMBase <NSDKMDistanceConverter>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMDistanceConverterResult *)convertLength:(NSDKMLength *)length measurementSystem:(NSDKMMeasurementSystem *)measurementSystem __attribute__((swift_name("convert(length:measurementSystem:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceConverterCompanion")))
@interface NSDKMDistanceConverterCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMDistanceConverterCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *UNIT_FEET __attribute__((swift_name("UNIT_FEET")));
@property (readonly) NSString *UNIT_KILOMETER __attribute__((swift_name("UNIT_KILOMETER")));
@property (readonly) NSString *UNIT_METERS __attribute__((swift_name("UNIT_METERS")));
@property (readonly) NSString *UNIT_MILES __attribute__((swift_name("UNIT_MILES")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceConverterResult")))
@interface NSDKMDistanceConverterResult : NSDKMBase
@property (readonly) NSString *unit __attribute__((swift_name("unit")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
- (instancetype)initWithValue:(NSString *)value unit:(NSString *)unit __attribute__((swift_name("init(value:unit:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DurationConverterCompanion")))
@interface NSDKMDurationConverterCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMDurationConverterCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *UNIT_HOURS __attribute__((swift_name("UNIT_HOURS")));
@property (readonly) NSString *UNIT_MINUTES __attribute__((swift_name("UNIT_MINUTES")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DurationConverterResult")))
@interface NSDKMDurationConverterResult : NSDKMBase
@property (readonly) NSString *unit __attribute__((swift_name("unit")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
- (instancetype)initWithValue:(NSString *)value unit:(NSString *)unit __attribute__((swift_name("init(value:unit:)"))) __attribute__((objc_designated_initializer));
- (NSDKMDurationConverterResult *)doCopyValue:(NSString *)value unit:(NSString *)unit __attribute__((swift_name("doCopy(value:unit:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormatUtils")))
@interface NSDKMFormatUtils : NSDKMBase
@property (class, readonly, getter=shared) NSDKMFormatUtils *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)formatUtils __attribute__((swift_name("init()")));
- (double)roundDouble:(double)double_ decimalPlaces:(int32_t)decimalPlaces __attribute__((swift_name("round(double:decimalPlaces:)")));
- (int32_t)roundByIntervalDouble:(double)double_ interval:(int32_t)interval __attribute__((swift_name("roundByInterval(double:interval:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RoundedDistanceConverter")))
@interface NSDKMRoundedDistanceConverter : NSDKMBase <NSDKMDistanceConverter>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMDistanceConverterResult *)convertLength:(NSDKMLength *)length measurementSystem:(NSDKMMeasurementSystem *)measurementSystem __attribute__((swift_name("convert(length:measurementSystem:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LabelParser")))
@interface NSDKMLabelParser : NSDKMBase
@property (class, readonly, getter=shared) NSDKMLabelParser *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)labelParser __attribute__((swift_name("init()")));
- (BOOL)isLatLngLabelLabel:(NSString *)label __attribute__((swift_name("isLatLngLabel(label:)")));
- (NSString * _Nullable)parseSubtitleLabel:(NSString *)label __attribute__((swift_name("parseSubtitle(label:)")));
- (NSString * _Nullable)parseSubtitleRoutable:(id<NSDKMRoutable>)routable __attribute__((swift_name("parseSubtitle(routable:)")));
- (NSString *)parseTitleLabel:(NSString *)label __attribute__((swift_name("parseTitle(label:)")));
- (NSString *)parseTitleRoutable:(id<NSDKMRoutable>)routable __attribute__((swift_name("parseTitle(routable:)")));
@end

__attribute__((swift_name("ViewImageRenderer")))
@protocol NSDKMViewImageRenderer
@required
- (UIImage * _Nullable)renderView:(UIView *)view __attribute__((swift_name("render(view:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PlainViewImageRenderer")))
@interface NSDKMPlainViewImageRenderer : NSDKMBase <NSDKMViewImageRenderer>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (UIImage * _Nullable)renderView:(UIView *)view __attribute__((swift_name("render(view:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnInfoUtils")))
@interface NSDKMTurnInfoUtils : NSDKMBase
@property (class, readonly, getter=shared) NSDKMTurnInfoUtils *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)turnInfoUtils __attribute__((swift_name("init()")));
- (NSString * _Nullable)getReferenceLabelTurnInfo:(NSDKMTurnInfo *)turnInfo __attribute__((swift_name("getReferenceLabel(turnInfo:)")));
- (NSString * _Nullable)getRoadLabelTurnInfo:(NSDKMTurnInfo *)turnInfo __attribute__((swift_name("getRoadLabel(turnInfo:)")));
- (NSString *)getTurnInfoLabelTurnInfo:(NSDKMTurnInfo *)turnInfo __attribute__((swift_name("getTurnInfoLabel(turnInfo:)")));
@end

__attribute__((swift_name("VoiceInstructionStringGenerator")))
@protocol NSDKMVoiceInstructionStringGenerator
@required
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((swift_name("BaseLaneVoiceInstructionStringGenerator")))
@interface NSDKMBaseLaneVoiceInstructionStringGenerator : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
- (instancetype)initWithFallbackVoiceCommandStringGenerator:(id<NSDKMVoiceInstructionStringGenerator>)fallbackVoiceCommandStringGenerator __attribute__((swift_name("init(fallbackVoiceCommandStringGenerator:)"))) __attribute__((objc_designated_initializer));
- (NSString *)createPart1VoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext it:(NSDKMLaneInfo *)it __attribute__((swift_name("createPart1(voiceInstructionContext:it:)")));
- (NSString * _Nullable)createPart2TurnInfo:(NSDKMTurnInfo *)turnInfo __attribute__((swift_name("createPart2(turnInfo:)")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSDKMBaseLaneVoiceInstructionStringGeneratorLaneSection *)getUsableLaneSectionLanes:(NSArray<NSDKMLaneInfoLane *> *)lanes __attribute__((swift_name("getUsableLaneSection(lanes:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BaseLaneVoiceInstructionStringGenerator.LaneSection")))
@interface NSDKMBaseLaneVoiceInstructionStringGeneratorLaneSection : NSDKMKotlinEnum<NSDKMBaseLaneVoiceInstructionStringGeneratorLaneSection *>
@property (class, readonly) NSDKMBaseLaneVoiceInstructionStringGeneratorLaneSection *left __attribute__((swift_name("left")));
@property (class, readonly) NSDKMBaseLaneVoiceInstructionStringGeneratorLaneSection *center __attribute__((swift_name("center")));
@property (class, readonly) NSDKMBaseLaneVoiceInstructionStringGeneratorLaneSection *right __attribute__((swift_name("right")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMBaseLaneVoiceInstructionStringGeneratorLaneSection *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("VoiceInstructionHandler")))
@protocol NSDKMVoiceInstructionHandler
@required
- (void)addInterceptorInterceptor:(id<NSDKMVoiceInstructionHandlerInterceptor>)interceptor __attribute__((swift_name("addInterceptor(interceptor:)")));
- (void)removeInterceptorInterceptor:(id<NSDKMVoiceInstructionHandlerInterceptor>)interceptor __attribute__((swift_name("removeInterceptor(interceptor:)")));
@property BOOL enabled __attribute__((swift_name("enabled")));
@end

__attribute__((swift_name("OnNavigationStateUpdatedListener")))
@protocol NSDKMOnNavigationStateUpdatedListener
@required
- (void)onNavigationStateUpdatedNavigationState:(NSDKMNavigationState * _Nullable)navigationState __attribute__((swift_name("onNavigationStateUpdated(navigationState:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationVoiceInstructionHandler")))
@interface NSDKMNavigationVoiceInstructionHandler : NSDKMBase <NSDKMVoiceInstructionHandler, NSDKMOnNavigationStateUpdatedListener>
@property BOOL enabled __attribute__((swift_name("enabled")));
- (instancetype)initWithNavigationSdk:(id<NSDKMNavigationSdk>)navigationSdk voiceInstructionStringGenerator:(id<NSDKMVoiceInstructionStringGenerator>)voiceInstructionStringGenerator voiceInstructionDispatcher:(id<NSDKMVoiceInstructionDispatcher>)voiceInstructionDispatcher __attribute__((swift_name("init(navigationSdk:voiceInstructionStringGenerator:voiceInstructionDispatcher:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithNavigationSdk:(id<NSDKMNavigationSdk>)navigationSdk voiceInstructionStringGenerator:(id<NSDKMVoiceInstructionStringGenerator>)voiceInstructionStringGenerator voiceInstructionDispatcher:(id<NSDKMVoiceInstructionDispatcher>)voiceInstructionDispatcher detachStateProvider:(id<NSDKMRouteDetachStateProvider>)detachStateProvider __attribute__((swift_name("init(navigationSdk:voiceInstructionStringGenerator:voiceInstructionDispatcher:detachStateProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithVoiceInstructionContextProvider:(id<NSDKMVoiceInstructionContextProvider>)voiceInstructionContextProvider voiceInstructionStringGenerator:(id<NSDKMVoiceInstructionStringGenerator>)voiceInstructionStringGenerator voiceInstructionDispatcher:(id<NSDKMVoiceInstructionDispatcher>)voiceInstructionDispatcher navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk detachStateProvider:(id<NSDKMRouteDetachStateProvider> _Nullable)detachStateProvider minTimeBetweenVoiceInstructions:(NSDKMDuration *)minTimeBetweenVoiceInstructions __attribute__((swift_name("init(voiceInstructionContextProvider:voiceInstructionStringGenerator:voiceInstructionDispatcher:navigationSdk:detachStateProvider:minTimeBetweenVoiceInstructions:)"))) __attribute__((objc_designated_initializer));
- (void)addInterceptorInterceptor:(id<NSDKMVoiceInstructionHandlerInterceptor>)interceptor __attribute__((swift_name("addInterceptor(interceptor:)")));
- (void)onNavigationStateUpdatedNavigationState:(NSDKMNavigationState * _Nullable)navigationState __attribute__((swift_name("onNavigationStateUpdated(navigationState:)")));
- (void)removeInterceptorInterceptor:(id<NSDKMVoiceInstructionHandlerInterceptor>)interceptor __attribute__((swift_name("removeInterceptor(interceptor:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnAwareAudioBalanceProvider")))
@interface NSDKMTurnAwareAudioBalanceProvider : NSDKMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (float)getBalanceVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("getBalance(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("VoiceInstructionContext")))
@interface NSDKMVoiceInstructionContext : NSDKMBase
@property id<NSDKMRoutable> _Nullable destination __attribute__((swift_name("destination")));
@property (readonly) NSDKMLength *distanceToManeuver __attribute__((swift_name("distanceToManeuver")));
@property (readonly) NSDKMLaneInfo * _Nullable laneInfo __attribute__((swift_name("laneInfo")));
@property (readonly) NSDKMLatLng *latLng __attribute__((swift_name("latLng")));
@property (readonly) int32_t stage __attribute__((swift_name("stage")));
@property NSString * _Nullable streetName __attribute__((swift_name("streetName")));
@property (readonly) NSDKMDuration *timeToManeuver __attribute__((swift_name("timeToManeuver")));
@property (readonly) NSDKMTurnInfo *turnInfo __attribute__((swift_name("turnInfo")));
- (instancetype)initWithDistanceToManeuver:(NSDKMLength *)distanceToManeuver timeToManeuver:(NSDKMDuration *)timeToManeuver stage:(int32_t)stage latLng:(NSDKMLatLng *)latLng turnInfo:(NSDKMTurnInfo *)turnInfo laneInfo:(NSDKMLaneInfo * _Nullable)laneInfo __attribute__((swift_name("init(distanceToManeuver:timeToManeuver:stage:latLng:turnInfo:laneInfo:)"))) __attribute__((objc_designated_initializer));
- (NSDKMVoiceInstructionContext *)doCopyDistanceToManeuver:(NSDKMLength *)distanceToManeuver timeToManeuver:(NSDKMDuration *)timeToManeuver stage:(int32_t)stage latLng:(NSDKMLatLng *)latLng turnInfo:(NSDKMTurnInfo *)turnInfo laneInfo:(NSDKMLaneInfo * _Nullable)laneInfo __attribute__((swift_name("doCopy(distanceToManeuver:timeToManeuver:stage:latLng:turnInfo:laneInfo:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("VoiceInstructionDispatcher")))
@protocol NSDKMVoiceInstructionDispatcher
@required
- (void)dispatchVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext voiceInstructionText:(NSString *)voiceInstructionText balance:(float)balance onDone:(void (^)(NSString *))onDone __attribute__((swift_name("dispatch(voiceInstructionContext:voiceInstructionText:balance:onDone:)")));
@end

__attribute__((swift_name("VoiceInstructionHandlerInterceptor")))
@protocol NSDKMVoiceInstructionHandlerInterceptor
@required
- (NSDKMVoiceInstructionHandlerInterceptorResult *)interceptVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext speakableString:(NSString *)speakableString __attribute__((swift_name("intercept(voiceInstructionContext:speakableString:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("VoiceInstructionHandlerInterceptorResult")))
@interface NSDKMVoiceInstructionHandlerInterceptorResult : NSDKMBase
@property (readonly) BOOL proceed __attribute__((swift_name("proceed")));
@property (readonly) NSString * _Nullable string __attribute__((swift_name("string")));
- (instancetype)initWithProceed:(BOOL)proceed string:(NSString * _Nullable)string __attribute__((swift_name("init(proceed:string:)"))) __attribute__((objc_designated_initializer));
- (NSDKMVoiceInstructionHandlerInterceptorResult *)doCopyProceed:(BOOL)proceed string:(NSString * _Nullable)string __attribute__((swift_name("doCopy(proceed:string:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("VoiceInstructionStageProvider")))
@protocol NSDKMVoiceInstructionStageProvider
@required
- (NSDKMInt * _Nullable)getStageManeuver:(NSDKMManeuver *)maneuver __attribute__((swift_name("getStage(maneuver:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DurationBasedVoiceInstructionStageProvider")))
@interface NSDKMDurationBasedVoiceInstructionStageProvider : NSDKMBase <NSDKMVoiceInstructionStageProvider>
@property (class, readonly, getter=companion) NSDKMDurationBasedVoiceInstructionStageProviderCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)initWithSpeedTracker:(id<NSDKMSpeedTracker>)speedTracker __attribute__((swift_name("init(speedTracker:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithOverwriteDistanceStage0:(NSDKMLength *)overwriteDistanceStage0 speedTracker:(id<NSDKMSpeedTracker>)speedTracker __attribute__((swift_name("init(overwriteDistanceStage0:speedTracker:)"))) __attribute__((objc_designated_initializer));
- (NSDKMInt * _Nullable)getStageManeuver:(NSDKMManeuver *)maneuver __attribute__((swift_name("getStage(maneuver:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DurationBasedVoiceInstructionStageProvider.Companion")))
@interface NSDKMDurationBasedVoiceInstructionStageProviderCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMDurationBasedVoiceInstructionStageProviderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKotlinLongRange *DURATION_STAGE_0 __attribute__((swift_name("DURATION_STAGE_0")));
@property (readonly) NSDKMKotlinLongRange *DURATION_STAGE_1 __attribute__((swift_name("DURATION_STAGE_1")));
@property (readonly) NSDKMKotlinLongRange *DURATION_STAGE_2 __attribute__((swift_name("DURATION_STAGE_2")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("VoiceInstructionContextProvider")))
@protocol NSDKMVoiceInstructionContextProvider
@required
@property (readonly) NSDKMVoiceInstructionContext * _Nullable voiceInstructionContext __attribute__((swift_name("voiceInstructionContext")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationVoiceInstructionContextProvider")))
@interface NSDKMNavigationVoiceInstructionContextProvider : NSDKMBase <NSDKMVoiceInstructionContextProvider>
@property (readonly) NSDKMVoiceInstructionContext * _Nullable voiceInstructionContext __attribute__((swift_name("voiceInstructionContext")));
- (instancetype)initWithStageProvider:(id<NSDKMVoiceInstructionStageProvider>)stageProvider navigationSdk:(id<NSDKMNavigationSdk>)navigationSdk __attribute__((swift_name("init(stageProvider:navigationSdk:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("SpeakableConditionCreator")))
@protocol NSDKMSpeakableConditionCreator
@required
- (NSString *)createVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("create(voiceInstructionContext:)")));
@end

__attribute__((swift_name("GenericSpeakableConditionCreator")))
@interface NSDKMGenericSpeakableConditionCreator : NSDKMBase <NSDKMSpeakableConditionCreator>
- (instancetype)initWithNow:(NSString *)now inString:(NSString *)inString meterPlural:(NSString *)meterPlural kilometerSingular:(NSString *)kilometerSingular kilometerPlural:(NSString *)kilometerPlural __attribute__((swift_name("init(now:inString:meterPlural:kilometerSingular:kilometerPlural:)"))) __attribute__((objc_designated_initializer));
- (NSString *)createVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("create(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocaleVoiceInstructionStringGenerator")))
@interface NSDKMLocaleVoiceInstructionStringGenerator : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)initWithLocaleProvider:(id<NSDKMLanguageProvider>)localeProvider __attribute__((swift_name("init(localeProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLocaleProvider:(id<NSDKMLanguageProvider>)localeProvider fallbackVoiceInstructionStringGenerator:(id<NSDKMVoiceInstructionStringGenerator> _Nullable)fallbackVoiceInstructionStringGenerator __attribute__((swift_name("init(localeProvider:fallbackVoiceInstructionStringGenerator:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLocaleProvider:(id<NSDKMLanguageProvider>)localeProvider voiceInstructionStringGenerators:(NSSet<id<NSDKMVoiceInstructionStringGenerator>> *)voiceInstructionStringGenerators fallbackVoiceInstructionStringGenerator:(id<NSDKMVoiceInstructionStringGenerator> _Nullable)fallbackVoiceInstructionStringGenerator __attribute__((swift_name("init(localeProvider:voiceInstructionStringGenerators:fallbackVoiceInstructionStringGenerator:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((swift_name("SlawicSpeakableConditionCreator")))
@interface NSDKMSlawicSpeakableConditionCreator : NSDKMBase <NSDKMSpeakableConditionCreator>
@property (readonly) double PLURAL_FORM_THRESHOLD __attribute__((swift_name("PLURAL_FORM_THRESHOLD")));
- (instancetype)initWithNow:(NSString *)now inString:(NSString *)inString meterPlural:(NSString *)meterPlural kilometerSingular:(NSString *)kilometerSingular kilometerPluralFew:(NSString *)kilometerPluralFew kilometerPluralMany:(NSString *)kilometerPluralMany __attribute__((swift_name("init(now:inString:meterPlural:kilometerSingular:kilometerPluralFew:kilometerPluralMany:)"))) __attribute__((objc_designated_initializer));
- (NSString *)createVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("create(voiceInstructionContext:)")));
@end

__attribute__((swift_name("SpeakableDirectionProvider")))
@protocol NSDKMSpeakableDirectionProvider
@required
- (NSString * _Nullable)getDirectionTurnInfo:(NSDKMTurnInfo *)turnInfo __attribute__((swift_name("getDirection(turnInfo:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GermanLaneVoiceCommandStringGenerator")))
@interface NSDKMGermanLaneVoiceCommandStringGenerator : NSDKMBaseLaneVoiceInstructionStringGenerator
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithReadableDistanceProvider:(id<NSDKMSpeakableConditionCreator>)readableDistanceProvider readableDirectionProvider:(id<NSDKMSpeakableDirectionProvider>)readableDirectionProvider fallbackVoiceCommandStringGenerator:(id<NSDKMVoiceInstructionStringGenerator>)fallbackVoiceCommandStringGenerator __attribute__((swift_name("init(readableDistanceProvider:readableDirectionProvider:fallbackVoiceCommandStringGenerator:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFallbackVoiceCommandStringGenerator:(id<NSDKMVoiceInstructionStringGenerator>)fallbackVoiceCommandStringGenerator __attribute__((swift_name("init(fallbackVoiceCommandStringGenerator:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)createPart1VoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext it:(NSDKMLaneInfo *)it __attribute__((swift_name("createPart1(voiceInstructionContext:it:)")));
- (NSString * _Nullable)createPart2TurnInfo:(NSDKMTurnInfo *)turnInfo __attribute__((swift_name("createPart2(turnInfo:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GermanSpeakableConditionCreator")))
@interface NSDKMGermanSpeakableConditionCreator : NSDKMGenericSpeakableConditionCreator
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithNow:(NSString *)now inString:(NSString *)inString meterPlural:(NSString *)meterPlural kilometerSingular:(NSString *)kilometerSingular kilometerPlural:(NSString *)kilometerPlural __attribute__((swift_name("init(now:inString:meterPlural:kilometerSingular:kilometerPlural:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GermanSpeakableDirectionProvider")))
@interface NSDKMGermanSpeakableDirectionProvider : NSDKMBase <NSDKMSpeakableDirectionProvider>
@property (class, readonly, getter=companion) NSDKMGermanSpeakableDirectionProviderCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithPrefixConfigs:(NSArray<NSDKMGermanSpeakableDirectionProviderPrefixConfig *> *)prefixConfigs fallbackPrefix:(NSString *)fallbackPrefix __attribute__((swift_name("init(prefixConfigs:fallbackPrefix:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)getDirectionTurnInfo:(NSDKMTurnInfo *)turnInfo __attribute__((swift_name("getDirection(turnInfo:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GermanSpeakableDirectionProvider.Companion")))
@interface NSDKMGermanSpeakableDirectionProviderCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMGermanSpeakableDirectionProviderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSArray<NSDKMGermanSpeakableDirectionProviderPrefixConfig *> *defaultPrefixConfig __attribute__((swift_name("defaultPrefixConfig")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GermanSpeakableDirectionProvider.PrefixConfig")))
@interface NSDKMGermanSpeakableDirectionProviderPrefixConfig : NSDKMBase
@property (readonly) NSArray<NSString *> *possibleSuffix __attribute__((swift_name("possibleSuffix")));
@property (readonly) NSString *prefix __attribute__((swift_name("prefix")));
- (instancetype)initWithPrefix:(NSString *)prefix possibleSuffix:(NSArray<NSString *> *)possibleSuffix __attribute__((swift_name("init(prefix:possibleSuffix:)"))) __attribute__((objc_designated_initializer));
- (NSDKMGermanSpeakableDirectionProviderPrefixConfig *)doCopyPrefix:(NSString *)prefix possibleSuffix:(NSArray<NSString *> *)possibleSuffix __attribute__((swift_name("doCopy(prefix:possibleSuffix:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GermanTurnVoiceInstructionStringGenerator")))
@interface NSDKMGermanTurnVoiceInstructionStringGenerator : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithSpeakableConditionCreator:(id<NSDKMSpeakableConditionCreator>)speakableConditionCreator speakableDirectionProvider:(id<NSDKMSpeakableDirectionProvider>)speakableDirectionProvider __attribute__((swift_name("init(speakableConditionCreator:speakableDirectionProvider:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EnglishLaneVoiceCommandStringGenerator")))
@interface NSDKMEnglishLaneVoiceCommandStringGenerator : NSDKMBaseLaneVoiceInstructionStringGenerator
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithSpeakableConditionCreator:(id<NSDKMSpeakableConditionCreator>)speakableConditionCreator speakableDirectionProvider:(id<NSDKMSpeakableDirectionProvider>)speakableDirectionProvider fallbackVoiceCommandStringGenerator:(id<NSDKMVoiceInstructionStringGenerator>)fallbackVoiceCommandStringGenerator __attribute__((swift_name("init(speakableConditionCreator:speakableDirectionProvider:fallbackVoiceCommandStringGenerator:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFallbackVoiceCommandStringGenerator:(id<NSDKMVoiceInstructionStringGenerator>)fallbackVoiceCommandStringGenerator __attribute__((swift_name("init(fallbackVoiceCommandStringGenerator:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)createPart1VoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext it:(NSDKMLaneInfo *)it __attribute__((swift_name("createPart1(voiceInstructionContext:it:)")));
- (NSString * _Nullable)createPart2TurnInfo:(NSDKMTurnInfo *)turnInfo __attribute__((swift_name("createPart2(turnInfo:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EnglishSpeakableConditionCreator")))
@interface NSDKMEnglishSpeakableConditionCreator : NSDKMGenericSpeakableConditionCreator
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithNow:(NSString *)now inString:(NSString *)inString meterPlural:(NSString *)meterPlural kilometerSingular:(NSString *)kilometerSingular kilometerPlural:(NSString *)kilometerPlural __attribute__((swift_name("init(now:inString:meterPlural:kilometerSingular:kilometerPlural:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)createVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("create(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EnglishSpeakableDirectionProvider")))
@interface NSDKMEnglishSpeakableDirectionProvider : NSDKMBase <NSDKMSpeakableDirectionProvider>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithPrefix:(NSString *)prefix __attribute__((swift_name("init(prefix:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)getDirectionTurnInfo:(NSDKMTurnInfo *)turnInfo __attribute__((swift_name("getDirection(turnInfo:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EnglishTurnVoiceInstructionStringGenerator")))
@interface NSDKMEnglishTurnVoiceInstructionStringGenerator : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithSpeakableConditionCreator:(id<NSDKMSpeakableConditionCreator>)speakableConditionCreator speakableDirectionProvider:(id<NSDKMSpeakableDirectionProvider>)speakableDirectionProvider __attribute__((swift_name("init(speakableConditionCreator:speakableDirectionProvider:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NorwegianLanguagePack")))
@interface NSDKMNorwegianLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CzechLanguagePack")))
@interface NSDKMCzechLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EstonianLanguagePack")))
@interface NSDKMEstonianLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SpanishLanguagePack")))
@interface NSDKMSpanishLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HungarianLanguagePack")))
@interface NSDKMHungarianLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FrenchLanguagePack")))
@interface NSDKMFrenchLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ItalianLanguagePack")))
@interface NSDKMItalianLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BulgarianLanguagePack")))
@interface NSDKMBulgarianLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PortugueseLanguagePack")))
@interface NSDKMPortugueseLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FinnishLanguagePack")))
@interface NSDKMFinnishLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RussianLanguagePack")))
@interface NSDKMRussianLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SwedishLanguagePack")))
@interface NSDKMSwedishLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurkishLanguagePack")))
@interface NSDKMTurkishLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DutchLanguagePack")))
@interface NSDKMDutchLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DanishLanguagePack")))
@interface NSDKMDanishLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RomanianLanguagePack")))
@interface NSDKMRomanianLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PolishLanguagePack")))
@interface NSDKMPolishLanguagePack : NSDKMBase <NSDKMVoiceInstructionStringGenerator>
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(NSDKMVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FoundationLanguageProvider")))
@interface NSDKMFoundationLanguageProvider : NSDKMBase <NSDKMLanguageProvider>
@property (readonly) NSString *languageCode __attribute__((swift_name("languageCode")));
@property (readonly) NSString * _Nullable regionCode __attribute__((swift_name("regionCode")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithLocale:(NSLocale *)locale __attribute__((swift_name("init(locale:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("NavigationSdk")))
@protocol NSDKMNavigationSdk
@required
- (void)addLeavingDestinationInterceptorInterceptor:(id<NSDKMInterceptingValidatorInterceptor>)interceptor __attribute__((swift_name("addLeavingDestinationInterceptor(interceptor:)")));
- (void)addLocationUpdateListenerLocationUpdateListener_:(id<NSDKMLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("addLocationUpdateListener(locationUpdateListener_:)")));
- (void)addOnCurrentDestinationChangedListenerOnCurrentDestinationChangedListener:(id<NSDKMOnCurrentDestinationChangedListener>)onCurrentDestinationChangedListener __attribute__((swift_name("addOnCurrentDestinationChangedListener(onCurrentDestinationChangedListener:)")));
- (void)addOnDestinationReachedListenerOnDestinationReachedListener:(id<NSDKMNavigationEventHandlerOnDestinationReachedListener>)onDestinationReachedListener __attribute__((swift_name("addOnDestinationReachedListener(onDestinationReachedListener:)")));
- (void)addOnDestinationsChangedListenerOnDestinationsChangedListener:(id<NSDKMOnDestinationsChangedListener>)onDestinationsChangedListener __attribute__((swift_name("addOnDestinationsChangedListener(onDestinationsChangedListener:)")));
- (void)addOnInitialRouteReceivedListenerOnInitialRouteReceivedListener:(id<NSDKMNavigationEventHandlerOnInitialRouteReceivedListener>)onInitialRouteReceivedListener __attribute__((swift_name("addOnInitialRouteReceivedListener(onInitialRouteReceivedListener:)")));
- (void)addOnLeavingDestinationListenerOnLeavingDestinationListener:(id<NSDKMNavigationEventHandlerOnLeavingDestinationListener>)onLeavingDestinationListener __attribute__((swift_name("addOnLeavingDestinationListener(onLeavingDestinationListener:)")));
- (void)addOnNavigationStartedListenerOnNavigationStartedListener:(id<NSDKMNavigationEventHandlerOnNavigationStartedListener>)onNavigationStartedListener __attribute__((swift_name("addOnNavigationStartedListener(onNavigationStartedListener:)")));
- (void)addOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<NSDKMOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("addOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)addOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<NSDKMOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("addOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));
- (void)addOnNavigationStoppedListenerOnNavigationStoppedListener:(id<NSDKMNavigationEventHandlerOnNavigationStoppedListener>)onNavigationStoppedListener __attribute__((swift_name("addOnNavigationStoppedListener(onNavigationStoppedListener:)")));
- (void)addOnOffRouteListenerOffRouteListener:(id<NSDKMNavigationEventHandlerOnOffRouteListener>)offRouteListener __attribute__((swift_name("addOnOffRouteListener(offRouteListener:)")));
- (void)addOnRouteRequestFailedListenerOnRouteRequestFailedListener:(id<NSDKMNavigationEventHandlerOnRouteRequestFailedListener>)onRouteRequestFailedListener __attribute__((swift_name("addOnRouteRequestFailedListener(onRouteRequestFailedListener:)")));
- (void)addOnRouteUpdateListenerOnRouteUpdateListener:(id<NSDKMNavigationEventHandlerOnRouteUpdateListener>)onRouteUpdateListener __attribute__((swift_name("addOnRouteUpdateListener(onRouteUpdateListener:)")));
- (void)addOnTrackingSpeedReachedListenerOnTrackingSpeedReachedListener:(id<NSDKMNavigationEventHandlerOnTrackingSpeedReachedListener>)onTrackingSpeedReachedListener __attribute__((swift_name("addOnTrackingSpeedReachedListener(onTrackingSpeedReachedListener:)")));
- (void)addReachingDestinationInterceptorInterceptor:(id<NSDKMInterceptingValidatorInterceptor>)interceptor __attribute__((swift_name("addReachingDestinationInterceptor(interceptor:)")));
- (void)addStatisticsProviderStatisticsProvider:(id<NSDKMStatisticsProvider>)statisticsProvider __attribute__((swift_name("addStatisticsProvider(statisticsProvider:)")));
- (void)removeLocationUpdateListenerLocationUpdateListener_:(id<NSDKMLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("removeLocationUpdateListener(locationUpdateListener_:)")));
- (void)removeOnCurrentDestinationChangedListenerOnCurrentDestinationChangedListener:(id<NSDKMOnCurrentDestinationChangedListener>)onCurrentDestinationChangedListener __attribute__((swift_name("removeOnCurrentDestinationChangedListener(onCurrentDestinationChangedListener:)")));
- (void)removeOnDestinationReachedListenerOnDestinationReachedListener:(id<NSDKMNavigationEventHandlerOnDestinationReachedListener>)onDestinationReachedListener __attribute__((swift_name("removeOnDestinationReachedListener(onDestinationReachedListener:)")));
- (void)removeOnDestinationsChangedListenerOnDestinationsChangedListener:(id<NSDKMOnDestinationsChangedListener>)onDestinationsChangedListener __attribute__((swift_name("removeOnDestinationsChangedListener(onDestinationsChangedListener:)")));
- (void)removeOnInitialRouteReceivedListenerOnInitialRouteReceivedListener:(id<NSDKMNavigationEventHandlerOnInitialRouteReceivedListener>)onInitialRouteReceivedListener __attribute__((swift_name("removeOnInitialRouteReceivedListener(onInitialRouteReceivedListener:)")));
- (void)removeOnLeavingDestinationListenerOnLeavingDestinationListener:(id<NSDKMNavigationEventHandlerOnLeavingDestinationListener>)onLeavingDestinationListener __attribute__((swift_name("removeOnLeavingDestinationListener(onLeavingDestinationListener:)")));
- (void)removeOnNavigationStartedListenerOnNavigationStartedListener:(id<NSDKMNavigationEventHandlerOnNavigationStartedListener>)onNavigationStartedListener __attribute__((swift_name("removeOnNavigationStartedListener(onNavigationStartedListener:)")));
- (void)removeOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<NSDKMOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("removeOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)removeOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<NSDKMOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("removeOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));
- (void)removeOnNavigationStoppedListenerOnNavigationStoppedListener:(id<NSDKMNavigationEventHandlerOnNavigationStoppedListener>)onNavigationStoppedListener __attribute__((swift_name("removeOnNavigationStoppedListener(onNavigationStoppedListener:)")));
- (void)removeOnOffRouteListenerOffRouteListener:(id<NSDKMNavigationEventHandlerOnOffRouteListener>)offRouteListener __attribute__((swift_name("removeOnOffRouteListener(offRouteListener:)")));
- (void)removeOnRouteRequestFailedListenerOnRouteRequestFailedListener:(id<NSDKMNavigationEventHandlerOnRouteRequestFailedListener>)onRouteRequestFailedListener __attribute__((swift_name("removeOnRouteRequestFailedListener(onRouteRequestFailedListener:)")));
- (void)removeOnRouteUpdateListenerOnRouteUpdateListener:(id<NSDKMNavigationEventHandlerOnRouteUpdateListener>)onRouteUpdateListener __attribute__((swift_name("removeOnRouteUpdateListener(onRouteUpdateListener:)")));
- (void)removeOnTrackingSpeedReachedListenerOnTrackingSpeedReachedListener:(id<NSDKMNavigationEventHandlerOnTrackingSpeedReachedListener>)onTrackingSpeedReachedListener __attribute__((swift_name("removeOnTrackingSpeedReachedListener(onTrackingSpeedReachedListener:)")));
- (void)requestStaticRouteOrigin:(NSDKMLocation *)origin destination:(id<NSDKMRoutable>)destination vehicleConfig:(id<NSDKMVehicleConfig> _Nullable)vehicleConfig onSuccess:(void (^)(NSDKMRoute *))onSuccess onError:(void (^)(NSDKMKotlinException *))onError __attribute__((swift_private));
- (void)requestStaticRouteDataOrigin:(NSDKMLocation *)origin destination:(id<NSDKMRoutable>)destination vehicleConfig:(id<NSDKMVehicleConfig> _Nullable)vehicleConfig onSuccess:(void (^)(NSDKMRouteData *))onSuccess onError:(void (^)(NSDKMKotlinException *))onError __attribute__((swift_private));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationStops:(NSArray<id<NSDKMRoutable>> *)stops error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(stops:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationStops:(NSArray<id<NSDKMRoutable>> *)stops vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(stops:vehicleConfig:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationLatLng:(NSDKMLatLng *)latLng error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(latLng:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationLatLng:(NSDKMLatLng *)latLng vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(latLng:vehicleConfig:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationRoutable:(id<NSDKMRoutable> _Nullable)routable error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(routable:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationRoutable:(id<NSDKMRoutable> _Nullable)routable vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(routable:vehicleConfig:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationRoute:(NSDKMRoute *)route sessionId:(NSString * _Nullable)sessionId error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(route:sessionId:)")));
- (void)stopNavigation __attribute__((swift_name("stopNavigation()")));
- (void)updateLocationLocation:(NSDKMLocation *)location __attribute__((swift_name("updateLocation(location:)")));
@property (readonly) id<NSDKMDestinationRepository> destinationRepository __attribute__((swift_name("destinationRepository")));
@property (readonly) NSDKMLocation * _Nullable location __attribute__((swift_name("location")));
@property (readonly) id<NSDKMLocationRepository> locationRepository __attribute__((swift_name("locationRepository"))) __attribute__((deprecated("Use location instead. Will be removed in future updates.")));
@property (readonly) BOOL navigationActive __attribute__((swift_name("navigationActive")));
@property (readonly) id<NSDKMNavigationEventHandler> navigationEventHandler __attribute__((swift_name("navigationEventHandler"))) __attribute__((deprecated("Will be removed in future updates. Use dedicated methods of NavigationSdk instead to access listeners.")));
@property (readonly) NSDKMNavigationState * _Nullable navigationState __attribute__((swift_name("navigationState")));
@property (readonly) id<NSDKMOnRoutePredictor> onRoutePredictor __attribute__((swift_name("onRoutePredictor")));
@property (readonly) id<NSDKMOnRouteProjector> onRouteProjector __attribute__((swift_name("onRouteProjector")));
@property (readonly) id<NSDKMRouteProgressTracker> routeProgressTracker __attribute__((swift_name("routeProgressTracker")));
@property (readonly) id<NSDKMSpeedTracker> speedTracker __attribute__((swift_name("speedTracker")));
@end

__attribute__((swift_name("BaseNavigationSdk")))
@interface NSDKMBaseNavigationSdk : NSDKMBase <NSDKMNavigationSdk>
@property (class, readonly, getter=companion) NSDKMBaseNavigationSdkCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) id<NSDKMDestinationRepository> destinationRepository __attribute__((swift_name("destinationRepository")));
@property (readonly) NSDKMLocation * _Nullable location __attribute__((swift_name("location")));
@property (readonly) id<NSDKMLocationRepository> locationRepository __attribute__((swift_name("locationRepository"))) __attribute__((deprecated("Use location instead. Will be removed in future updates.")));
@property (readonly) BOOL navigationActive __attribute__((swift_name("navigationActive")));
@property (readonly) NSDKMSimpleNavigationEventHandler *navigationEventHandler __attribute__((swift_name("navigationEventHandler"))) __attribute__((deprecated("Overrides deprecated member in 'net.graphmasters.multiplatform.navigation.NavigationSdk'. Will be removed in future updates. Use dedicated methods of NavigationSdk instead to access listeners.")));
@property (readonly) NSDKMNavigationState * _Nullable navigationState __attribute__((swift_name("navigationState")));
@property id<NSDKMOnRoutePredictor> onRoutePredictor __attribute__((swift_name("onRoutePredictor")));
@property id<NSDKMOnRouteProjector> onRouteProjector __attribute__((swift_name("onRouteProjector")));
@property id<NSDKMRouteProgressTracker> routeProgressTracker __attribute__((swift_name("routeProgressTracker")));
@property id<NSDKMSpeedTracker> speedTracker __attribute__((swift_name("speedTracker")));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor sessionClient:(id<NSDKMSessionClient>)sessionClient routeProvider:(id<NSDKMRouteProvider>)routeProvider __attribute__((swift_name("init(executor:sessionClient:routeProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor sessionClient:(id<NSDKMSessionClient>)sessionClient routeProvider:(id<NSDKMRouteProvider>)routeProvider internetConnectionValidator:(id<NSDKMInternetConnectionValidator> _Nullable)internetConnectionValidator updateRateProvider:(id<NSDKMUpdateRateProvider>)updateRateProvider __attribute__((swift_name("init(executor:sessionClient:routeProvider:internetConnectionValidator:updateRateProvider:)"))) __attribute__((objc_designated_initializer));
- (void)addLeavingDestinationInterceptorInterceptor:(id<NSDKMInterceptingValidatorInterceptor>)interceptor __attribute__((swift_name("addLeavingDestinationInterceptor(interceptor:)")));
- (void)addLocationUpdateListenerLocationUpdateListener_:(id<NSDKMLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("addLocationUpdateListener(locationUpdateListener_:)")));
- (void)addOnCurrentDestinationChangedListenerOnCurrentDestinationChangedListener:(id<NSDKMOnCurrentDestinationChangedListener>)onCurrentDestinationChangedListener __attribute__((swift_name("addOnCurrentDestinationChangedListener(onCurrentDestinationChangedListener:)")));
- (void)addOnDestinationReachedListenerOnDestinationReachedListener:(id<NSDKMNavigationEventHandlerOnDestinationReachedListener>)onDestinationReachedListener __attribute__((swift_name("addOnDestinationReachedListener(onDestinationReachedListener:)")));
- (void)addOnDestinationsChangedListenerOnDestinationsChangedListener:(id<NSDKMOnDestinationsChangedListener>)onDestinationsChangedListener __attribute__((swift_name("addOnDestinationsChangedListener(onDestinationsChangedListener:)")));
- (void)addOnInitialRouteReceivedListenerOnInitialRouteReceivedListener:(id<NSDKMNavigationEventHandlerOnInitialRouteReceivedListener>)onInitialRouteReceivedListener __attribute__((swift_name("addOnInitialRouteReceivedListener(onInitialRouteReceivedListener:)")));
- (void)addOnLeavingDestinationListenerOnLeavingDestinationListener:(id<NSDKMNavigationEventHandlerOnLeavingDestinationListener>)onLeavingDestinationListener __attribute__((swift_name("addOnLeavingDestinationListener(onLeavingDestinationListener:)")));
- (void)addOnNavigationStartedListenerOnNavigationStartedListener:(id<NSDKMNavigationEventHandlerOnNavigationStartedListener>)onNavigationStartedListener __attribute__((swift_name("addOnNavigationStartedListener(onNavigationStartedListener:)")));
- (void)addOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<NSDKMOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("addOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)addOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<NSDKMOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("addOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));
- (void)addOnNavigationStoppedListenerOnNavigationStoppedListener:(id<NSDKMNavigationEventHandlerOnNavigationStoppedListener>)onNavigationStoppedListener __attribute__((swift_name("addOnNavigationStoppedListener(onNavigationStoppedListener:)")));
- (void)addOnOffRouteListenerOffRouteListener:(id<NSDKMNavigationEventHandlerOnOffRouteListener>)offRouteListener __attribute__((swift_name("addOnOffRouteListener(offRouteListener:)")));
- (void)addOnRouteRequestFailedListenerOnRouteRequestFailedListener:(id<NSDKMNavigationEventHandlerOnRouteRequestFailedListener>)onRouteRequestFailedListener __attribute__((swift_name("addOnRouteRequestFailedListener(onRouteRequestFailedListener:)")));
- (void)addOnRouteUpdateListenerOnRouteUpdateListener:(id<NSDKMNavigationEventHandlerOnRouteUpdateListener>)onRouteUpdateListener __attribute__((swift_name("addOnRouteUpdateListener(onRouteUpdateListener:)")));
- (void)addOnTrackingSpeedReachedListenerOnTrackingSpeedReachedListener:(id<NSDKMNavigationEventHandlerOnTrackingSpeedReachedListener>)onTrackingSpeedReachedListener __attribute__((swift_name("addOnTrackingSpeedReachedListener(onTrackingSpeedReachedListener:)")));
- (void)addReachingDestinationInterceptorInterceptor:(id<NSDKMInterceptingValidatorInterceptor>)interceptor __attribute__((swift_name("addReachingDestinationInterceptor(interceptor:)")));
- (void)addStatisticsProviderStatisticsProvider:(id<NSDKMStatisticsProvider>)statisticsProvider __attribute__((swift_name("addStatisticsProvider(statisticsProvider:)")));
- (void)removeLocationUpdateListenerLocationUpdateListener_:(id<NSDKMLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("removeLocationUpdateListener(locationUpdateListener_:)")));
- (void)removeOnCurrentDestinationChangedListenerOnCurrentDestinationChangedListener:(id<NSDKMOnCurrentDestinationChangedListener>)onCurrentDestinationChangedListener __attribute__((swift_name("removeOnCurrentDestinationChangedListener(onCurrentDestinationChangedListener:)")));
- (void)removeOnDestinationReachedListenerOnDestinationReachedListener:(id<NSDKMNavigationEventHandlerOnDestinationReachedListener>)onDestinationReachedListener __attribute__((swift_name("removeOnDestinationReachedListener(onDestinationReachedListener:)")));
- (void)removeOnDestinationsChangedListenerOnDestinationsChangedListener:(id<NSDKMOnDestinationsChangedListener>)onDestinationsChangedListener __attribute__((swift_name("removeOnDestinationsChangedListener(onDestinationsChangedListener:)")));
- (void)removeOnInitialRouteReceivedListenerOnInitialRouteReceivedListener:(id<NSDKMNavigationEventHandlerOnInitialRouteReceivedListener>)onInitialRouteReceivedListener __attribute__((swift_name("removeOnInitialRouteReceivedListener(onInitialRouteReceivedListener:)")));
- (void)removeOnLeavingDestinationListenerOnLeavingDestinationListener:(id<NSDKMNavigationEventHandlerOnLeavingDestinationListener>)onLeavingDestinationListener __attribute__((swift_name("removeOnLeavingDestinationListener(onLeavingDestinationListener:)")));
- (void)removeOnNavigationStartedListenerOnNavigationStartedListener:(id<NSDKMNavigationEventHandlerOnNavigationStartedListener>)onNavigationStartedListener __attribute__((swift_name("removeOnNavigationStartedListener(onNavigationStartedListener:)")));
- (void)removeOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<NSDKMOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("removeOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)removeOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<NSDKMOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("removeOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));
- (void)removeOnNavigationStoppedListenerOnNavigationStoppedListener:(id<NSDKMNavigationEventHandlerOnNavigationStoppedListener>)onNavigationStoppedListener __attribute__((swift_name("removeOnNavigationStoppedListener(onNavigationStoppedListener:)")));
- (void)removeOnOffRouteListenerOffRouteListener:(id<NSDKMNavigationEventHandlerOnOffRouteListener>)offRouteListener __attribute__((swift_name("removeOnOffRouteListener(offRouteListener:)")));
- (void)removeOnRouteRequestFailedListenerOnRouteRequestFailedListener:(id<NSDKMNavigationEventHandlerOnRouteRequestFailedListener>)onRouteRequestFailedListener __attribute__((swift_name("removeOnRouteRequestFailedListener(onRouteRequestFailedListener:)")));
- (void)removeOnRouteUpdateListenerOnRouteUpdateListener:(id<NSDKMNavigationEventHandlerOnRouteUpdateListener>)onRouteUpdateListener __attribute__((swift_name("removeOnRouteUpdateListener(onRouteUpdateListener:)")));
- (void)removeOnTrackingSpeedReachedListenerOnTrackingSpeedReachedListener:(id<NSDKMNavigationEventHandlerOnTrackingSpeedReachedListener>)onTrackingSpeedReachedListener __attribute__((swift_name("removeOnTrackingSpeedReachedListener(onTrackingSpeedReachedListener:)")));
- (void)requestStaticRouteOrigin:(NSDKMLocation *)origin destination:(id<NSDKMRoutable>)destination vehicleConfig:(id<NSDKMVehicleConfig> _Nullable)vehicleConfig onSuccess:(void (^)(NSDKMRoute *))onSuccess onError:(void (^)(NSDKMKotlinException *))onError __attribute__((swift_private));
- (void)requestStaticRouteDataOrigin:(NSDKMLocation *)origin destination:(id<NSDKMRoutable>)destination vehicleConfig:(id<NSDKMVehicleConfig> _Nullable)vehicleConfig onSuccess:(void (^)(NSDKMRouteData *))onSuccess onError:(void (^)(NSDKMKotlinException *))onError __attribute__((swift_private));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationStops:(NSArray<id<NSDKMRoutable>> *)stops error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(stops:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationStops:(NSArray<id<NSDKMRoutable>> *)stops vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(stops:vehicleConfig:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationLatLng:(NSDKMLatLng *)latLng error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(latLng:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationLatLng:(NSDKMLatLng *)latLng vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(latLng:vehicleConfig:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationRoutable:(id<NSDKMRoutable> _Nullable)routable error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(routable:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationRoutable:(id<NSDKMRoutable> _Nullable)routable vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(routable:vehicleConfig:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationRoute:(NSDKMRoute *)route sessionId:(NSString * _Nullable)sessionId error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(route:sessionId:)")));
- (void)stopNavigation __attribute__((swift_name("stopNavigation()")));
- (void)updateLocationLocation:(NSDKMLocation *)location __attribute__((swift_name("updateLocation(location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IosNavigationSdk")))
@interface NSDKMIosNavigationSdk : NSDKMBaseNavigationSdk
- (instancetype)initWithApiKey:(NSString *)apiKey __attribute__((swift_name("init(apiKey:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithSessionClient:(id<NSDKMSessionClient>)sessionClient routeProvider:(id<NSDKMRouteProvider>)routeProvider __attribute__((swift_name("init(sessionClient:routeProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithServiceUrl:(NSString *)serviceUrl apiKey:(NSString *)apiKey sessionParamProviders:(NSArray<id<NSDKMSessionParamProvider>> *)sessionParamProviders routingParamProviders:(NSArray<id<NSDKMRoutingParamProvider>> *)routingParamProviders instanceId:(NSString *)instanceId __attribute__((swift_name("init(serviceUrl:apiKey:sessionParamProviders:routingParamProviders:instanceId:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithServiceUrl:(NSString *)serviceUrl apiKey:(NSString *)apiKey sessionParamProviders:(NSArray<id<NSDKMSessionParamProvider>> *)sessionParamProviders routingParamProviders:(NSArray<id<NSDKMRoutingParamProvider>> *)routingParamProviders instanceId:(NSString *)instanceId includeComparisonRoutes:(BOOL)includeComparisonRoutes __attribute__((swift_name("init(serviceUrl:apiKey:sessionParamProviders:routingParamProviders:instanceId:includeComparisonRoutes:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor sessionClient:(id<NSDKMSessionClient>)sessionClient routeProvider:(id<NSDKMRouteProvider>)routeProvider __attribute__((swift_name("init(executor:sessionClient:routeProvider:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor sessionClient:(id<NSDKMSessionClient>)sessionClient routeProvider:(id<NSDKMRouteProvider>)routeProvider internetConnectionValidator:(id<NSDKMInternetConnectionValidator> _Nullable)internetConnectionValidator updateRateProvider:(id<NSDKMUpdateRateProvider>)updateRateProvider __attribute__((swift_name("init(executor:sessionClient:routeProvider:internetConnectionValidator:updateRateProvider:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BaseNavigationSdk.Companion")))
@interface NSDKMBaseNavigationSdkCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMBaseNavigationSdkCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("InternetConnectionValidator")))
@protocol NSDKMInternetConnectionValidator
@required
@property (readonly) BOOL connected __attribute__((swift_name("connected")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IosInternetConnectionValidator")))
@interface NSDKMIosInternetConnectionValidator : NSDKMBase <NSDKMInternetConnectionValidator>
@property (class, readonly, getter=companion) NSDKMIosInternetConnectionValidatorCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL connected __attribute__((swift_name("connected")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IosInternetConnectionValidator.Companion")))
@interface NSDKMIosInternetConnectionValidatorCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMIosInternetConnectionValidatorCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) int32_t REACHABILITY_FLAGS_LENGTH __attribute__((swift_name("REACHABILITY_FLAGS_LENGTH")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("RouteProvider")))
@protocol NSDKMRouteProvider
@required

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMRoute * _Nullable)requestRouteRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("requestRoute(routeRequest:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMRouteData * _Nullable)requestRouteDataOrigin:(NSDKMLatLng *)origin destination:(NSDKMLatLng *)destination vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("requestRouteData(origin:destination:vehicleConfig:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeltaIncludingRouteProvider")))
@interface NSDKMDeltaIncludingRouteProvider : NSDKMBase <NSDKMRouteProvider>
- (instancetype)initWithRouteProvider:(id<NSDKMRouteProvider>)routeProvider __attribute__((swift_name("init(routeProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithRouteComparisonProvider:(NSDKMRouteComparisonProvider *)routeComparisonProvider routeProvider:(id<NSDKMRouteProvider>)routeProvider maxAge:(NSDKMDuration *)maxAge __attribute__((swift_name("init(routeComparisonProvider:routeProvider:maxAge:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMRoute * _Nullable)requestRouteRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("requestRoute(routeRequest:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMRouteData * _Nullable)requestRouteDataOrigin:(NSDKMLatLng *)origin destination:(NSDKMLatLng *)destination vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("requestRouteData(origin:destination:vehicleConfig:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteComparisonProvider")))
@interface NSDKMRouteComparisonProvider : NSDKMBase
- (instancetype)initWithNavigationSdk:(id<NSDKMNavigationSdk>)navigationSdk __attribute__((swift_name("init(navigationSdk:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithRouteProvider:(id<NSDKMRouteProvider>)routeProvider __attribute__((swift_name("init(routeProvider:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteComparisonResult")))
@interface NSDKMRouteComparisonResult : NSDKMBase
@property (readonly) NSDKMRoute * _Nullable comparisonRoute __attribute__((swift_name("comparisonRoute")));
@property (readonly) NSDKMRoute *route __attribute__((swift_name("route")));
@property (readonly) NSArray<NSDKMRouteRouteDelta *> *routeDeltas __attribute__((swift_name("routeDeltas")));
- (instancetype)initWithRoute:(NSDKMRoute *)route comparisonRoute:(NSDKMRoute * _Nullable)comparisonRoute routeDeltas:(NSArray<NSDKMRouteRouteDelta *> *)routeDeltas __attribute__((swift_name("init(route:comparisonRoute:routeDeltas:)"))) __attribute__((objc_designated_initializer));
- (NSDKMRouteComparisonResult *)doCopyRoute:(NSDKMRoute *)route comparisonRoute:(NSDKMRoute * _Nullable)comparisonRoute routeDeltas:(NSArray<NSDKMRouteRouteDelta *> *)routeDeltas __attribute__((swift_name("doCopy(route:comparisonRoute:routeDeltas:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDeltaGenerator")))
@interface NSDKMRouteDeltaGenerator : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteDeltaGenerator *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)routeDeltaGenerator __attribute__((swift_name("init()")));
- (NSArray<NSDKMRouteRouteDelta *> *)createRouteDeltaOriginalRoute:(NSDKMRoute *)originalRoute comparisonRoute:(NSDKMRoute * _Nullable)comparisonRoute __attribute__((swift_name("createRouteDelta(originalRoute:comparisonRoute:)")));
@end

__attribute__((swift_name("Credentials")))
@protocol NSDKMCredentials
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CredentialsApiKey")))
@interface NSDKMCredentialsApiKey : NSDKMBase <NSDKMCredentials>
@property (readonly) NSString *apiKey __attribute__((swift_name("apiKey")));
- (instancetype)initWithApiKey:(NSString *)apiKey __attribute__((swift_name("init(apiKey:)"))) __attribute__((objc_designated_initializer));
- (NSDKMCredentialsApiKey *)doCopyApiKey:(NSString *)apiKey __attribute__((swift_name("doCopy(apiKey:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CredentialsBasic")))
@interface NSDKMCredentialsBasic : NSDKMBase <NSDKMCredentials>
@property (readonly) NSString *password __attribute__((swift_name("password")));
@property (readonly) NSString *username __attribute__((swift_name("username")));
- (instancetype)initWithUsername:(NSString *)username password:(NSString *)password __attribute__((swift_name("init(username:password:)"))) __attribute__((objc_designated_initializer));
- (NSDKMCredentialsBasic *)doCopyUsername:(NSString *)username password:(NSString *)password __attribute__((swift_name("doCopy(username:password:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientFactory")))
@interface NSDKMHttpClientFactory : NSDKMBase
@property (class, readonly, getter=shared) NSDKMHttpClientFactory *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)httpClientFactory __attribute__((swift_name("init()")));

/**
 * @note annotations
 *   kotlin.jvm.JvmStatic
 *   kotlin.jvm.JvmOverloads
*/
- (NSDKMKtor_client_coreHttpClient *)createServiceUrl:(NSString *)serviceUrl engine:(id<NSDKMKtor_client_coreHttpClientEngine>)engine credentials:(id<NSDKMCredentials> _Nullable)credentials __attribute__((swift_name("create(serviceUrl:engine:credentials:)")));
@end

__attribute__((swift_name("SpeedTracker")))
@protocol NSDKMSpeedTracker
@required
@property (readonly) NSDKMSpeed *speed __attribute__((swift_name("speed")));
@end

__attribute__((swift_name("LocationUpdateListener")))
@protocol NSDKMLocationUpdateListener
@required
- (void)onLocationUpdatedLocation:(NSDKMLocation *)location __attribute__((swift_name("onLocationUpdated(location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AccelerationEffectedSpeedTracker")))
@interface NSDKMAccelerationEffectedSpeedTracker : NSDKMBase <NSDKMSpeedTracker, NSDKMLocationUpdateListener>
@property (class, readonly, getter=companion) NSDKMAccelerationEffectedSpeedTrackerCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSDKMSpeed *speed __attribute__((swift_name("speed")));
- (instancetype)initWithTimeProvider:(id<NSDKMTimeProvider>)timeProvider decelerationModifier:(id<NSDKMAccelerationEffectedSpeedTrackerDecelerationModifier> _Nullable)decelerationModifier maxLocationAge:(NSDKMDuration *)maxLocationAge minSpeed:(NSDKMSpeed *)minSpeed __attribute__((swift_name("init(timeProvider:decelerationModifier:maxLocationAge:minSpeed:)"))) __attribute__((objc_designated_initializer));
- (void)onLocationUpdatedLocation:(NSDKMLocation *)location __attribute__((swift_name("onLocationUpdated(location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AccelerationEffectedSpeedTracker.Companion")))
@interface NSDKMAccelerationEffectedSpeedTrackerCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMAccelerationEffectedSpeedTrackerCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMDuration *MAX_LOCATION_AGE __attribute__((swift_name("MAX_LOCATION_AGE")));
@property (readonly) NSDKMSpeed *MIN_SPEED __attribute__((swift_name("MIN_SPEED")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("AccelerationEffectedSpeedTrackerDecelerationModifier")))
@protocol NSDKMAccelerationEffectedSpeedTrackerDecelerationModifier
@required
- (double)getModifierSpeed:(NSDKMSpeed *)speed __attribute__((swift_name("getModifier(speed:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AccelerationEffectedSpeedTracker.SpeedBasedDecelerationModifier")))
@interface NSDKMAccelerationEffectedSpeedTrackerSpeedBasedDecelerationModifier : NSDKMBase <NSDKMAccelerationEffectedSpeedTrackerDecelerationModifier>
- (instancetype)initWithFactor:(double)factor __attribute__((swift_name("init(factor:)"))) __attribute__((objc_designated_initializer));
- (double)getModifierSpeed:(NSDKMSpeed *)speed __attribute__((swift_name("getModifier(speed:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CalculatingSpeedTracker")))
@interface NSDKMCalculatingSpeedTracker : NSDKMBase <NSDKMSpeedTracker, NSDKMLocationUpdateListener>
@property (class, readonly, getter=companion) NSDKMCalculatingSpeedTrackerCompanion *companion __attribute__((swift_name("companion")));
@property NSDKMSpeed *speed __attribute__((swift_name("speed")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMaxTimeDelta:(NSDKMDuration *)maxTimeDelta maxDeltaDistance:(NSDKMLength *)maxDeltaDistance __attribute__((swift_name("init(maxTimeDelta:maxDeltaDistance:)"))) __attribute__((objc_designated_initializer));
- (void)onLocationUpdatedLocation:(NSDKMLocation *)location __attribute__((swift_name("onLocationUpdated(location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CalculatingSpeedTracker.Companion")))
@interface NSDKMCalculatingSpeedTrackerCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMCalculatingSpeedTrackerCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SimpleSpeedTracker")))
@interface NSDKMSimpleSpeedTracker : NSDKMBase <NSDKMSpeedTracker, NSDKMLocationUpdateListener>
@property (readonly) NSDKMSpeed *speed __attribute__((swift_name("speed")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)onLocationUpdatedLocation:(NSDKMLocation *)location __attribute__((swift_name("onLocationUpdated(location:)")));
@end

__attribute__((swift_name("LocationRepository")))
@protocol NSDKMLocationRepository
@required
- (void)addLocationUpdateListenerLocationUpdateListener_:(id<NSDKMLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("addLocationUpdateListener(locationUpdateListener_:)")));
- (NSArray<NSDKMLocation *> *)getLastLocationsMaxAge:(NSDKMDuration * _Nullable)maxAge maxCount:(int32_t)maxCount __attribute__((swift_name("getLastLocations(maxAge:maxCount:)")));
- (void)removeLocationUpdateListenerLocationUpdateListener_:(id<NSDKMLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("removeLocationUpdateListener(locationUpdateListener_:)")));
@property (readonly) NSDKMLocation * _Nullable location __attribute__((swift_name("location")));
@property (readonly) NSDKMLocation * _Nullable rawLocation __attribute__((swift_name("rawLocation")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FilterWrapper")))
@interface NSDKMFilterWrapper : NSDKMBase
- (instancetype)initWithFilter:(NSDKMJKalmanFilter *)filter __attribute__((swift_name("init(filter:)"))) __attribute__((objc_designated_initializer));
- (NSDKMLocation *)filterLocation:(NSDKMLocation *)location __attribute__((swift_name("filter(location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JKalmanFilter")))
@interface NSDKMJKalmanFilter : NSDKMBase
@property (class, readonly, getter=companion) NSDKMJKalmanFilterCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL isInitialised __attribute__((swift_name("isInitialised")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)doInitInitValue:(NSDKMLocation *)initValue __attribute__((swift_name("doInit(initValue:)")));
- (NSDKMLocation * _Nullable)predictTimestamp:(int64_t)timestamp __attribute__((swift_name("predict(timestamp:)")));
- (void)reset __attribute__((swift_name("reset()")));
- (NSString *)description __attribute__((swift_name("description()")));
- (NSDKMLocation *)updateUpdateValue:(NSDKMLocation *)updateValue __attribute__((swift_name("update(updateValue:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JKalmanFilter.Companion")))
@interface NSDKMJKalmanFilterCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMJKalmanFilterCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("JKalmanMatrix")))
@interface NSDKMJKalmanMatrix<A> : NSDKMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (A _Nullable)addX:(A _Nullable)x __attribute__((swift_name("add(x:)")));
- (A _Nullable)identity __attribute__((swift_name("identity()")));
- (A _Nullable)inverse __attribute__((swift_name("inverse()")));
- (A _Nullable)multiplyX:(A _Nullable)x __attribute__((swift_name("multiply(x:)")));
- (A _Nullable)subtractX:(A _Nullable)x __attribute__((swift_name("subtract(x:)")));
- (A _Nullable)transpose __attribute__((swift_name("transpose()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JKalmanMatrixApache")))
@interface NSDKMJKalmanMatrixApache : NSDKMJKalmanMatrix<NSDKMJKalmanMatrixApache *>
- (instancetype)initWithMatrix:(id<NSDKMRealMatrix>)matrix __attribute__((swift_name("init(matrix:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMJKalmanMatrixApache *)addX:(NSDKMJKalmanMatrixApache *)x __attribute__((swift_name("add(x:)")));
- (id<NSDKMRealMatrix>)getMatrix __attribute__((swift_name("getMatrix()")));
- (NSDKMJKalmanMatrixApache *)identity __attribute__((swift_name("identity()")));
- (NSDKMJKalmanMatrixApache *)inverse __attribute__((swift_name("inverse()")));
- (NSDKMJKalmanMatrixApache *)multiplyX:(NSDKMJKalmanMatrixApache *)x __attribute__((swift_name("multiply(x:)")));
- (void)setMatrixMatrix:(id<NSDKMRealMatrix>)matrix __attribute__((swift_name("setMatrix(matrix:)")));
- (NSDKMJKalmanMatrixApache *)subtractX:(NSDKMJKalmanMatrixApache *)x __attribute__((swift_name("subtract(x:)")));
- (NSString *)description __attribute__((swift_name("description()")));
- (NSDKMJKalmanMatrixApache *)transpose __attribute__((swift_name("transpose()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JKalmanSteps")))
@interface NSDKMJKalmanSteps : NSDKMBase
@property (class, readonly, getter=companion) NSDKMJKalmanStepsCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JKalmanSteps.Companion")))
@interface NSDKMJKalmanStepsCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMJKalmanStepsCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMJKalmanMatrix *)covarianceCorrectorKMat:(NSDKMJKalmanMatrix *)kMat hMat:(NSDKMJKalmanMatrix *)hMat __attribute__((swift_name("covarianceCorrector(kMat:hMat:)")));
- (NSDKMJKalmanMatrix *)gainPPredMat:(NSDKMJKalmanMatrix *)pPredMat hMat:(NSDKMJKalmanMatrix *)hMat rMat:(NSDKMJKalmanMatrix *)rMat __attribute__((swift_name("gain(pPredMat:hMat:rMat:)")));
- (NSDKMJKalmanMatrix *)predictCovariancePLastMat:(NSDKMJKalmanMatrix *)pLastMat fMat:(NSDKMJKalmanMatrix *)fMat qMat:(NSDKMJKalmanMatrix *)qMat __attribute__((swift_name("predictCovariance(pLastMat:fMat:qMat:)")));
- (NSDKMJKalmanMatrix *)predictStateXLastVec:(NSDKMJKalmanMatrix *)xLastVec fMat:(NSDKMJKalmanMatrix *)fMat __attribute__((swift_name("predictState(xLastVec:fMat:)")));
- (NSDKMJKalmanMatrix *)predictStateXLastVec:(NSDKMJKalmanMatrix *)xLastVec fMat:(NSDKMJKalmanMatrix *)fMat bMat:(NSDKMJKalmanMatrix *)bMat uVec:(NSDKMJKalmanMatrix *)uVec __attribute__((swift_name("predictState(xLastVec:fMat:bMat:uVec:)")));
- (NSDKMKalmanPair<NSDKMJKalmanMatrix *> *)predictionXLastVec:(NSDKMJKalmanMatrix *)xLastVec pLastMat:(NSDKMJKalmanMatrix *)pLastMat fMat:(NSDKMJKalmanMatrix *)fMat qMat:(NSDKMJKalmanMatrix *)qMat __attribute__((swift_name("prediction(xLastVec:pLastMat:fMat:qMat:)")));
- (NSDKMKalmanPair<NSDKMJKalmanMatrix *> *)predictionXLastVec:(NSDKMJKalmanMatrix *)xLastVec pLastMat:(NSDKMJKalmanMatrix *)pLastMat fMat:(NSDKMJKalmanMatrix *)fMat qMat:(NSDKMJKalmanMatrix *)qMat bMat:(NSDKMJKalmanMatrix *)bMat uVec:(NSDKMJKalmanMatrix *)uVec __attribute__((swift_name("prediction(xLastVec:pLastMat:fMat:qMat:bMat:uVec:)")));
- (NSDKMKalmanPair<NSDKMJKalmanMatrix *> *)updateXPredVec:(NSDKMJKalmanMatrix *)xPredVec pPredMat:(NSDKMJKalmanMatrix *)pPredMat zVec:(NSDKMJKalmanMatrix *)zVec hMat:(NSDKMJKalmanMatrix *)hMat rMat:(NSDKMJKalmanMatrix *)rMat __attribute__((swift_name("update(xPredVec:pPredMat:zVec:hMat:rMat:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KalmanPair")))
@interface NSDKMKalmanPair<T> : NSDKMBase
- (instancetype)initWithStoredXVec:(T _Nullable)storedXVec storedPMat:(T _Nullable)storedPMat __attribute__((swift_name("init(storedXVec:storedPMat:)"))) __attribute__((objc_designated_initializer));
- (T _Nullable)pMat __attribute__((swift_name("pMat()")));
- (T _Nullable)xVec __attribute__((swift_name("xVec()")));
@end

__attribute__((swift_name("StatisticsProvider")))
@protocol NSDKMStatisticsProvider
@required
- (NSDictionary<NSString *, id> *)getStatistics __attribute__((swift_name("getStatistics()")));
- (void)start __attribute__((swift_name("start()")));
- (void)stop __attribute__((swift_name("stop()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeviceStatisticsProvider")))
@interface NSDKMDeviceStatisticsProvider : NSDKMBase <NSDKMStatisticsProvider>
@property (class, readonly, getter=companion) NSDKMDeviceStatisticsProviderCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor deviceStateProvider:(id<NSDKMDeviceStatisticsProviderDeviceStateProvider>)deviceStateProvider __attribute__((swift_name("init(executor:deviceStateProvider:)"))) __attribute__((objc_designated_initializer));
- (NSDictionary<NSString *, id> *)getStatistics __attribute__((swift_name("getStatistics()")));
- (void)start __attribute__((swift_name("start()")));
- (void)stop __attribute__((swift_name("stop()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeviceStatisticsProvider.Companion")))
@interface NSDKMDeviceStatisticsProviderCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMDeviceStatisticsProviderCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeviceStatisticsProvider.DeviceState")))
@interface NSDKMDeviceStatisticsProviderDeviceState : NSDKMBase
@property (readonly) double batteryCapacityPercent __attribute__((swift_name("batteryCapacityPercent")));
@property (readonly) BOOL isAppInBackground __attribute__((swift_name("isAppInBackground")));
@property (readonly) BOOL isCarAppInForeground __attribute__((swift_name("isCarAppInForeground")));
@property (readonly) BOOL isCharging __attribute__((swift_name("isCharging")));
@property (readonly) BOOL isMainAppInForeground __attribute__((swift_name("isMainAppInForeground")));
@property (readonly) NSDKMDeviceStatisticsProviderThermalState *thermalState __attribute__((swift_name("thermalState")));
- (instancetype)initWithIsCharging:(BOOL)isCharging batteryCapacityPercent:(double)batteryCapacityPercent thermalState:(NSDKMDeviceStatisticsProviderThermalState *)thermalState isAppInBackground:(BOOL)isAppInBackground isMainAppInForeground:(BOOL)isMainAppInForeground isCarAppInForeground:(BOOL)isCarAppInForeground __attribute__((swift_name("init(isCharging:batteryCapacityPercent:thermalState:isAppInBackground:isMainAppInForeground:isCarAppInForeground:)"))) __attribute__((objc_designated_initializer));
- (NSDKMDeviceStatisticsProviderDeviceState *)doCopyIsCharging:(BOOL)isCharging batteryCapacityPercent:(double)batteryCapacityPercent thermalState:(NSDKMDeviceStatisticsProviderThermalState *)thermalState isAppInBackground:(BOOL)isAppInBackground isMainAppInForeground:(BOOL)isMainAppInForeground isCarAppInForeground:(BOOL)isCarAppInForeground __attribute__((swift_name("doCopy(isCharging:batteryCapacityPercent:thermalState:isAppInBackground:isMainAppInForeground:isCarAppInForeground:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("DeviceStatisticsProviderDeviceStateProvider")))
@protocol NSDKMDeviceStatisticsProviderDeviceStateProvider
@required
- (NSDKMDeviceStatisticsProviderDeviceState *)getDeviceState __attribute__((swift_name("getDeviceState()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeviceStatisticsProvider.DeviceStatistics")))
@interface NSDKMDeviceStatisticsProviderDeviceStatistics : NSDKMBase
@property (readonly) int64_t appInBackgroundDurationMs __attribute__((swift_name("appInBackgroundDurationMs")));
@property (readonly) double batteryCapacityChangeWhileChargingPercent __attribute__((swift_name("batteryCapacityChangeWhileChargingPercent")));
@property (readonly) double batteryCapacityChangeWithoutChargingPercent __attribute__((swift_name("batteryCapacityChangeWithoutChargingPercent")));
@property (readonly) int64_t carAppInForegroundMs __attribute__((swift_name("carAppInForegroundMs")));
@property (readonly) int64_t chargingDurationMs __attribute__((swift_name("chargingDurationMs")));
@property (readonly) NSDictionary<NSDKMDeviceStatisticsProviderThermalState *, NSDKMLong *> *durationThermalStateMs __attribute__((swift_name("durationThermalStateMs")));
@property (readonly) int64_t mainAppInForegroundMs __attribute__((swift_name("mainAppInForegroundMs")));
- (instancetype)initWithBatteryCapacityChangeWhileChargingPercent:(double)batteryCapacityChangeWhileChargingPercent batteryCapacityChangeWithoutChargingPercent:(double)batteryCapacityChangeWithoutChargingPercent chargingDurationMs:(int64_t)chargingDurationMs appInBackgroundDurationMs:(int64_t)appInBackgroundDurationMs mainAppInForegroundMs:(int64_t)mainAppInForegroundMs carAppInForegroundMs:(int64_t)carAppInForegroundMs durationThermalStateMs:(NSDictionary<NSDKMDeviceStatisticsProviderThermalState *, NSDKMLong *> *)durationThermalStateMs __attribute__((swift_name("init(batteryCapacityChangeWhileChargingPercent:batteryCapacityChangeWithoutChargingPercent:chargingDurationMs:appInBackgroundDurationMs:mainAppInForegroundMs:carAppInForegroundMs:durationThermalStateMs:)"))) __attribute__((objc_designated_initializer));
- (NSDKMDeviceStatisticsProviderDeviceStatistics *)doCopyBatteryCapacityChangeWhileChargingPercent:(double)batteryCapacityChangeWhileChargingPercent batteryCapacityChangeWithoutChargingPercent:(double)batteryCapacityChangeWithoutChargingPercent chargingDurationMs:(int64_t)chargingDurationMs appInBackgroundDurationMs:(int64_t)appInBackgroundDurationMs mainAppInForegroundMs:(int64_t)mainAppInForegroundMs carAppInForegroundMs:(int64_t)carAppInForegroundMs durationThermalStateMs:(NSDictionary<NSDKMDeviceStatisticsProviderThermalState *, NSDKMLong *> *)durationThermalStateMs __attribute__((swift_name("doCopy(batteryCapacityChangeWhileChargingPercent:batteryCapacityChangeWithoutChargingPercent:chargingDurationMs:appInBackgroundDurationMs:mainAppInForegroundMs:carAppInForegroundMs:durationThermalStateMs:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeviceStatisticsProvider.ThermalState")))
@interface NSDKMDeviceStatisticsProviderThermalState : NSDKMKotlinEnum<NSDKMDeviceStatisticsProviderThermalState *>
@property (class, readonly) NSDKMDeviceStatisticsProviderThermalState *none __attribute__((swift_name("none")));
@property (class, readonly) NSDKMDeviceStatisticsProviderThermalState *light __attribute__((swift_name("light")));
@property (class, readonly) NSDKMDeviceStatisticsProviderThermalState *moderate __attribute__((swift_name("moderate")));
@property (class, readonly) NSDKMDeviceStatisticsProviderThermalState *severe __attribute__((swift_name("severe")));
@property (class, readonly) NSDKMDeviceStatisticsProviderThermalState *critical __attribute__((swift_name("critical")));
@property (class, readonly) NSDKMDeviceStatisticsProviderThermalState *emergency __attribute__((swift_name("emergency")));
@property (class, readonly) NSDKMDeviceStatisticsProviderThermalState *shutdown __attribute__((swift_name("shutdown")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMDeviceStatisticsProviderThermalState *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("NavigationEventHandlerOnInitialRouteReceivedListener")))
@protocol NSDKMNavigationEventHandlerOnInitialRouteReceivedListener
@required
- (void)onInitialRouteReceivedRoute:(NSDKMRoute *)route __attribute__((swift_name("onInitialRouteReceived(route:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationStatisticsProvider")))
@interface NSDKMNavigationStatisticsProvider : NSDKMBase <NSDKMStatisticsProvider, NSDKMNavigationEventHandlerOnInitialRouteReceivedListener, NSDKMOnNavigationStateUpdatedListener>
- (instancetype)initWithNavigationSdk:(id<NSDKMNavigationSdk>)navigationSdk __attribute__((swift_name("init(navigationSdk:)"))) __attribute__((objc_designated_initializer));
- (NSDictionary<NSString *, id> *)getStatistics __attribute__((swift_name("getStatistics()")));
- (void)onInitialRouteReceivedRoute:(NSDKMRoute *)route __attribute__((swift_name("onInitialRouteReceived(route:)")));
- (void)onNavigationStateUpdatedNavigationState:(NSDKMNavigationState * _Nullable)navigationState __attribute__((swift_name("onNavigationStateUpdated(navigationState:)")));
- (void)start __attribute__((swift_name("start()")));
- (void)stop __attribute__((swift_name("stop()")));
@end

__attribute__((swift_name("OnRouteProjector")))
@protocol NSDKMOnRouteProjector
@required
- (void)addOnRouteProjectorListenerOnRouteProjectorListener:(id<NSDKMOnRouteProjectorOnRouteProjectorListener>)onRouteProjectorListener __attribute__((swift_name("addOnRouteProjectorListener(onRouteProjectorListener:)")));
- (void)removeOnRouteProjectorListenerOnRouteProjectorListener:(id<NSDKMOnRouteProjectorOnRouteProjectorListener>)onRouteProjectorListener __attribute__((swift_name("removeOnRouteProjectorListener(onRouteProjectorListener:)")));
@property (readonly) BOOL initialized __attribute__((swift_name("initialized")));
@property (readonly) NSDKMOnRouteProjectorProjectedLocation * _Nullable projection __attribute__((swift_name("projection")));
@property (readonly) NSDKMRoute * _Nullable route __attribute__((swift_name("route")));
@end

__attribute__((swift_name("OnRouteProjectorOnRouteProjectorListener")))
@protocol NSDKMOnRouteProjectorOnRouteProjectorListener
@required
- (void)onProjectionChangedProjectedLocation:(NSDKMOnRouteProjectorProjectedLocation *)projectedLocation __attribute__((swift_name("onProjectionChanged(projectedLocation:)")));
- (void)onRouteChangedRoute:(NSDKMRoute * _Nullable)route __attribute__((swift_name("onRouteChanged(route:)")));
@end

__attribute__((swift_name("Location")))
@interface NSDKMLocation : NSDKMFreezable
@property (class, readonly, getter=companion) NSDKMLocationCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSDKMLength * _Nullable accuracy __attribute__((swift_name("accuracy")));
@property (readonly) NSDKMLength * _Nullable altitude __attribute__((swift_name("altitude")));
@property (readonly) NSDKMDouble * _Nullable heading __attribute__((swift_name("heading")));
@property (readonly) NSDKMLatLng *latLng __attribute__((swift_name("latLng")));
@property (readonly) NSDKMInt * _Nullable level __attribute__((swift_name("level")));
@property (readonly) NSString *provider __attribute__((swift_name("provider")));
@property (readonly) NSDKMSpeed * _Nullable speed __attribute__((swift_name("speed")));
@property (readonly) int64_t timestamp __attribute__((swift_name("timestamp")));
- (instancetype)initWithLocation:(NSDKMLocation *)location __attribute__((swift_name("init(location:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithProvider:(NSString *)provider timestamp:(int64_t)timestamp latLng:(NSDKMLatLng *)latLng altitude:(NSDKMLength * _Nullable)altitude heading:(NSDKMDouble * _Nullable)heading speed:(NSDKMSpeed * _Nullable)speed accuracy:(NSDKMLength * _Nullable)accuracy level:(NSDKMInt * _Nullable)level __attribute__((swift_name("init(provider:timestamp:latLng:altitude:heading:speed:accuracy:level:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
@end

__attribute__((swift_name("OnRouteProjectorProjectedLocation")))
@interface NSDKMOnRouteProjectorProjectedLocation : NSDKMLocation
@property (readonly) NSDKMLength *distanceToSegment __attribute__((swift_name("distanceToSegment")));
@property (readonly) NSDKMLocation *originalLocation __attribute__((swift_name("originalLocation")));
@property (readonly) NSDKMRoute *route __attribute__((swift_name("route")));
@property (readonly) NSDKMRouteSegment *segment __attribute__((swift_name("segment")));
- (instancetype)initWithLocation:(NSDKMLocation *)location route:(NSDKMRoute *)route segment:(NSDKMRouteSegment *)segment distanceToSegment:(NSDKMLength *)distanceToSegment __attribute__((swift_name("init(location:route:segment:distanceToSegment:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithProjectedProbe:(NSDKMOnRouteProjectorProjectedLocation *)projectedProbe __attribute__((swift_name("init(projectedProbe:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithProvider:(NSString *)provider timestamp:(int64_t)timestamp latLng:(NSDKMLatLng *)latLng altitude:(NSDKMLength * _Nullable)altitude heading:(NSDKMDouble * _Nullable)heading speed:(NSDKMSpeed * _Nullable)speed accuracy:(NSDKMLength * _Nullable)accuracy level:(NSDKMInt * _Nullable)level originalLocation:(NSDKMLocation *)originalLocation route:(NSDKMRoute *)route segment:(NSDKMRouteSegment *)segment distanceToSegment:(NSDKMLength *)distanceToSegment __attribute__((swift_name("init(provider:timestamp:latLng:altitude:heading:speed:accuracy:level:originalLocation:route:segment:distanceToSegment:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLocation:(NSDKMLocation *)location __attribute__((swift_name("init(location:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithProvider:(NSString *)provider timestamp:(int64_t)timestamp latLng:(NSDKMLatLng *)latLng altitude:(NSDKMLength * _Nullable)altitude heading:(NSDKMDouble * _Nullable)heading speed:(NSDKMSpeed * _Nullable)speed accuracy:(NSDKMLength * _Nullable)accuracy level:(NSDKMInt * _Nullable)level __attribute__((swift_name("init(provider:timestamp:latLng:altitude:heading:speed:accuracy:level:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSDKMOnRouteProjectorProjectedLocation *)doCopyProvider:(NSString * _Nullable)provider timestamp:(NSDKMLong * _Nullable)timestamp latLng:(NSDKMLatLng * _Nullable)latLng altitude:(NSDKMLength * _Nullable)altitude heading:(NSDKMDouble * _Nullable)heading speed:(NSDKMSpeed * _Nullable)speed accuracy:(NSDKMLength * _Nullable)accuracy level:(NSDKMInt * _Nullable)level originalLocation:(NSDKMLocation * _Nullable)originalLocation route:(NSDKMRoute * _Nullable)route segment:(NSDKMRouteSegment * _Nullable)segment distanceToSegment:(NSDKMLength * _Nullable)distanceToSegment __attribute__((swift_name("doCopy(provider:timestamp:latLng:altitude:heading:speed:accuracy:level:originalLocation:route:segment:distanceToSegment:)")));
@end

__attribute__((swift_name("ProjectionFinder")))
@protocol NSDKMProjectionFinder
@required

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMOnRouteProjectorProjectedLocation * _Nullable)findBestProjectionRoute:(NSDKMRoute *)route location:(NSDKMLocation *)location options:(NSDKMProjectionFinderOptions * _Nullable)options error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("findBestProjection(route:location:options:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceAlignmentProjectionFinder")))
@interface NSDKMDistanceAlignmentProjectionFinder : NSDKMBase <NSDKMProjectionFinder>
@property (class, readonly, getter=companion) NSDKMDistanceAlignmentProjectionFinderCompanion *companion __attribute__((swift_name("companion")));
@property id<NSDKMDistanceAlignmentProjectionFinderProjectionResultListener> _Nullable projectionResultListener __attribute__((swift_name("projectionResultListener")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMOnRouteProjectorProjectedLocation * _Nullable)findBestProjectionRoute:(NSDKMRoute *)route location:(NSDKMLocation *)location options:(NSDKMProjectionFinderOptions * _Nullable)options error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("findBestProjection(route:location:options:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceAlignmentProjectionFinder.Companion")))
@interface NSDKMDistanceAlignmentProjectionFinderCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMDistanceAlignmentProjectionFinderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) double MAX_DISTANCE_METERS __attribute__((swift_name("MAX_DISTANCE_METERS")));
@property (readonly) float e __attribute__((swift_name("e")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceAlignmentProjectionFinder.ProjectionResult")))
@interface NSDKMDistanceAlignmentProjectionFinderProjectionResult : NSDKMBase
@property (readonly) double alignment __attribute__((swift_name("alignment")));
@property (readonly) float alignmentRating __attribute__((swift_name("alignmentRating")));
@property (readonly) NSDKMLength *distance __attribute__((swift_name("distance")));
@property (readonly) float distanceRating __attribute__((swift_name("distanceRating")));
@property (readonly) NSDKMOnRouteProjectorProjectedLocation *projectedLocation __attribute__((swift_name("projectedLocation")));
@property (readonly) double rating __attribute__((swift_name("rating")));
@property (readonly) int32_t segmentIndex __attribute__((swift_name("segmentIndex")));
- (instancetype)initWithRating:(double)rating segmentIndex:(int32_t)segmentIndex distance:(NSDKMLength *)distance distanceRating:(float)distanceRating alignment:(double)alignment alignmentRating:(float)alignmentRating projectedLocation:(NSDKMOnRouteProjectorProjectedLocation *)projectedLocation __attribute__((swift_name("init(rating:segmentIndex:distance:distanceRating:alignment:alignmentRating:projectedLocation:)"))) __attribute__((objc_designated_initializer));
- (NSDKMDistanceAlignmentProjectionFinderProjectionResult *)doCopyRating:(double)rating segmentIndex:(int32_t)segmentIndex distance:(NSDKMLength *)distance distanceRating:(float)distanceRating alignment:(double)alignment alignmentRating:(float)alignmentRating projectedLocation:(NSDKMOnRouteProjectorProjectedLocation *)projectedLocation __attribute__((swift_name("doCopy(rating:segmentIndex:distance:distanceRating:alignment:alignmentRating:projectedLocation:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("DistanceAlignmentProjectionFinderProjectionResultListener")))
@protocol NSDKMDistanceAlignmentProjectionFinderProjectionResultListener
@required
- (void)bestProjectionResultFoundProjectionResults:(NSDKMDistanceAlignmentProjectionFinderProjectionResult *)projectionResults __attribute__((swift_name("bestProjectionResultFound(projectionResults:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PlainDistanceProjectionFinder")))
@interface NSDKMPlainDistanceProjectionFinder : NSDKMBase <NSDKMProjectionFinder>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMOnRouteProjectorProjectedLocation * _Nullable)findBestProjectionRoute:(NSDKMRoute *)route location:(NSDKMLocation *)location options:(NSDKMProjectionFinderOptions * _Nullable)options error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("findBestProjection(route:location:options:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProjectionFinderOptions")))
@interface NSDKMProjectionFinderOptions : NSDKMBase
@property (readonly) NSDKMLength * _Nullable maxSearchDistance __attribute__((swift_name("maxSearchDistance")));
@property (readonly) int32_t startIndex __attribute__((swift_name("startIndex")));
- (instancetype)initWithStartIndex:(int32_t)startIndex maxSearchDistance:(NSDKMLength * _Nullable)maxSearchDistance __attribute__((swift_name("init(startIndex:maxSearchDistance:)"))) __attribute__((objc_designated_initializer));
- (NSDKMProjectionFinderOptions *)doCopyStartIndex:(int32_t)startIndex maxSearchDistance:(NSDKMLength * _Nullable)maxSearchDistance __attribute__((swift_name("doCopy(startIndex:maxSearchDistance:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("OnRoutePredictor")))
@protocol NSDKMOnRoutePredictor
@required
- (NSDKMLocation * _Nullable)predictOptions:(NSDKMOnRoutePredictorOptions *)options __attribute__((swift_name("predict(options:)")));
@property id<NSDKMOnRoutePredictorOnRoutePredictionListener> _Nullable onRoutePredictionListener __attribute__((swift_name("onRoutePredictionListener")));
@end

__attribute__((swift_name("OnRoutePredictorOnRoutePredictionListener")))
@protocol NSDKMOnRoutePredictorOnRoutePredictionListener
@required
- (void)onNewPredictionLocation:(NSDKMLocation *)location __attribute__((swift_name("onNewPrediction(location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OnRoutePredictorOptions")))
@interface NSDKMOnRoutePredictorOptions : NSDKMFreezable
@property (readonly) NSDKMLength *minPredictionDistance __attribute__((swift_name("minPredictionDistance")));
@property (readonly) int64_t predictionTimestamp __attribute__((swift_name("predictionTimestamp")));
@property (readonly) BOOL stopAtNextManeuver __attribute__((swift_name("stopAtNextManeuver")));
- (instancetype)initWithStopAtNextManeuver:(BOOL)stopAtNextManeuver predictionTimestamp:(int64_t)predictionTimestamp minPredictionDistance:(NSDKMLength *)minPredictionDistance __attribute__((swift_name("init(stopAtNextManeuver:predictionTimestamp:minPredictionDistance:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMOnRoutePredictorOptions *)doCopyStopAtNextManeuver:(BOOL)stopAtNextManeuver predictionTimestamp:(int64_t)predictionTimestamp minPredictionDistance:(NSDKMLength *)minPredictionDistance __attribute__((swift_name("doCopy(stopAtNextManeuver:predictionTimestamp:minPredictionDistance:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OnRoutePredictorPredictedLocation")))
@interface NSDKMOnRoutePredictorPredictedLocation : NSDKMOnRouteProjectorProjectedLocation
@property (readonly) NSDKMLength *predictedDistance __attribute__((swift_name("predictedDistance")));
- (instancetype)initWithProvider:(NSString *)provider timestamp:(int64_t)timestamp latLng:(NSDKMLatLng *)latLng altitude:(NSDKMLength * _Nullable)altitude heading:(NSDKMDouble * _Nullable)heading speed:(NSDKMSpeed * _Nullable)speed accuracy:(NSDKMLength * _Nullable)accuracy level:(NSDKMInt * _Nullable)level originalLocation:(NSDKMLocation *)originalLocation route:(NSDKMRoute *)route segment:(NSDKMRouteSegment *)segment distanceToSegment:(NSDKMLength *)distanceToSegment __attribute__((swift_name("init(provider:timestamp:latLng:altitude:heading:speed:accuracy:level:originalLocation:route:segment:distanceToSegment:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithProjectedProbe:(NSDKMOnRouteProjectorProjectedLocation *)projectedProbe predictedDistance:(NSDKMLength *)predictedDistance __attribute__((swift_name("init(projectedProbe:predictedDistance:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLocation:(NSDKMLocation *)location route:(NSDKMRoute *)route segment:(NSDKMRouteSegment *)segment distanceToSegment:(NSDKMLength *)distanceToSegment __attribute__((swift_name("init(location:route:segment:distanceToSegment:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithProjectedProbe:(NSDKMOnRouteProjectorProjectedLocation *)projectedProbe __attribute__((swift_name("init(projectedProbe:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SpeedBasedOnRoutePredictor")))
@interface NSDKMSpeedBasedOnRoutePredictor : NSDKMBase <NSDKMOnRoutePredictor>
@property (class, readonly, getter=companion) NSDKMSpeedBasedOnRoutePredictorCompanion *companion __attribute__((swift_name("companion")));
@property id<NSDKMOnRoutePredictorOnRoutePredictionListener> _Nullable onRoutePredictionListener __attribute__((swift_name("onRoutePredictionListener")));
- (instancetype)initWithOnRouteProjector:(id<NSDKMOnRouteProjector>)onRouteProjector onRouteShifter:(id<NSDKMOnRouteShifter>)onRouteShifter speedTracker:(id<NSDKMSpeedTracker>)speedTracker requiredSpeedForPrediction:(NSDKMSpeed *)requiredSpeedForPrediction timeProvider:(id<NSDKMTimeProvider>)timeProvider __attribute__((swift_name("init(onRouteProjector:onRouteShifter:speedTracker:requiredSpeedForPrediction:timeProvider:)"))) __attribute__((objc_designated_initializer));
- (NSDKMLocation * _Nullable)predictOptions:(NSDKMOnRoutePredictorOptions *)options __attribute__((swift_name("predict(options:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SpeedBasedOnRoutePredictor.Companion")))
@interface NSDKMSpeedBasedOnRoutePredictorCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMSpeedBasedOnRoutePredictorCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("OnRouteShifter")))
@protocol NSDKMOnRouteShifter
@required
- (NSDKMOnRouteShifterShiftedLocation *)shiftProjection:(NSDKMOnRouteProjectorProjectedLocation *)projection shiftParameters:(NSDKMOnRouteShifterShiftParameters *)shiftParameters __attribute__((swift_name("shift(projection:shiftParameters:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OnRouteShifterShiftParameters")))
@interface NSDKMOnRouteShifterShiftParameters : NSDKMFreezable
@property (readonly) NSDKMLength *distance __attribute__((swift_name("distance")));
@property (readonly) NSDKMInt * _Nullable endIndex __attribute__((swift_name("endIndex")));
- (instancetype)initWithDistance:(NSDKMLength *)distance endIndex:(NSDKMInt * _Nullable)endIndex __attribute__((swift_name("init(distance:endIndex:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMOnRouteShifterShiftParameters *)doCopyDistance:(NSDKMLength *)distance endIndex:(NSDKMInt * _Nullable)endIndex __attribute__((swift_name("doCopy(distance:endIndex:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OnRouteShifterShiftedLocation")))
@interface NSDKMOnRouteShifterShiftedLocation : NSDKMLocation
@property (readonly) NSDKMRouteSegment *segment __attribute__((swift_name("segment")));
- (instancetype)initWithLocation:(NSDKMLocation *)location segment:(NSDKMRouteSegment *)segment __attribute__((swift_name("init(location:segment:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLocation:(NSDKMLocation *)location __attribute__((swift_name("init(location:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithProvider:(NSString *)provider timestamp:(int64_t)timestamp latLng:(NSDKMLatLng *)latLng altitude:(NSDKMLength * _Nullable)altitude heading:(NSDKMDouble * _Nullable)heading speed:(NSDKMSpeed * _Nullable)speed accuracy:(NSDKMLength * _Nullable)accuracy level:(NSDKMInt * _Nullable)level __attribute__((swift_name("init(provider:timestamp:latLng:altitude:heading:speed:accuracy:level:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("NavigationStateRepository")))
@protocol NSDKMNavigationStateRepository
@required
- (void)addOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<NSDKMOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("addOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)addOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<NSDKMOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("addOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));
- (void)clear __attribute__((swift_name("clear()")));
- (void)createSessionId:(NSString *)sessionId routable:(id<NSDKMRoutable>)routable vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig __attribute__((swift_name("create(sessionId:routable:vehicleConfig:)")));
- (void)removeOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<NSDKMOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("removeOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)removeOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<NSDKMOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("removeOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));

/**
 * @note This method converts instances of IllegalStateException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMNavigationState * _Nullable)updateRouteProgress:(NSDKMRouteProgressTrackerRouteProgress *)routeProgress error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("update(routeProgress:)")));
@property (readonly) NSDKMNavigationState * _Nullable navigationState __attribute__((swift_name("navigationState")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultNavigationStateRepository")))
@interface NSDKMDefaultNavigationStateRepository : NSDKMBase <NSDKMNavigationStateRepository>
@property (class, readonly, getter=companion) NSDKMDefaultNavigationStateRepositoryCompanion *companion __attribute__((swift_name("companion")));
@property NSDKMNavigationState * _Nullable navigationState __attribute__((swift_name("navigationState")));
- (instancetype)initWithSpeedTracker:(id<NSDKMSpeedTracker>)speedTracker onRouteTracker:(id<NSDKMOnRouteTracker>)onRouteTracker destinationReachedValidator:(id<NSDKMValidator>)destinationReachedValidator leavingDestinationValidator:(id<NSDKMValidator>)leavingDestinationValidator __attribute__((swift_name("init(speedTracker:onRouteTracker:destinationReachedValidator:leavingDestinationValidator:)"))) __attribute__((objc_designated_initializer));
- (void)addOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<NSDKMOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("addOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)addOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<NSDKMOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("addOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));
- (void)clear __attribute__((swift_name("clear()")));
- (void)createSessionId:(NSString *)sessionId routable:(id<NSDKMRoutable>)routable vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig __attribute__((swift_name("create(sessionId:routable:vehicleConfig:)")));
- (void)removeOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<NSDKMOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("removeOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)removeOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<NSDKMOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("removeOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));

/**
 * @note This method converts instances of IllegalStateException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMNavigationState * _Nullable)updateRouteProgress:(NSDKMRouteProgressTrackerRouteProgress *)routeProgress error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("update(routeProgress:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultNavigationStateRepository.Companion")))
@interface NSDKMDefaultNavigationStateRepositoryCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMDefaultNavigationStateRepositoryCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) double MIN_TRACKING_SPEED_KMH __attribute__((swift_name("MIN_TRACKING_SPEED_KMH")));
@property (readonly) int64_t MIN_TRAVEL_DURATION_DESTINATION_REACHED_SEC __attribute__((swift_name("MIN_TRAVEL_DURATION_DESTINATION_REACHED_SEC")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationState")))
@interface NSDKMNavigationState : NSDKMFreezable
@property (readonly) id<NSDKMRoutable> destination __attribute__((swift_name("destination")));
@property (readonly) BOOL destinationReached __attribute__((swift_name("destinationReached")));
@property (readonly) BOOL firstRoute __attribute__((swift_name("firstRoute")));
@property (readonly) BOOL initialized __attribute__((swift_name("initialized")));
@property (readonly) BOOL onRoute __attribute__((swift_name("onRoute")));
@property (readonly) NSDKMRoute * _Nullable route __attribute__((swift_name("route")));
@property (readonly) NSDKMRouteProgressTrackerRouteProgress * _Nullable routeProgress __attribute__((swift_name("routeProgress")));
@property (readonly) NSString *sessionId __attribute__((swift_name("sessionId")));
@property (readonly) NSDKMSpeed * _Nullable speed __attribute__((swift_name("speed")));
@property (readonly) int64_t startTime __attribute__((swift_name("startTime")));
@property (readonly) BOOL trackingSpeedReached __attribute__((swift_name("trackingSpeedReached")));
@property (readonly) NSDKMLength *traveledDistance __attribute__((swift_name("traveledDistance")));
@property (readonly) NSDKMDuration *traveledDuration __attribute__((swift_name("traveledDuration")));
@property (readonly) id<NSDKMVehicleConfig> vehicleConfig __attribute__((swift_name("vehicleConfig")));
- (instancetype)initWithSessionId:(NSString *)sessionId destination:(id<NSDKMRoutable>)destination startTime:(int64_t)startTime vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig firstRoute:(BOOL)firstRoute onRoute:(BOOL)onRoute speed:(NSDKMSpeed * _Nullable)speed traveledDuration:(NSDKMDuration *)traveledDuration routeProgress:(NSDKMRouteProgressTrackerRouteProgress * _Nullable)routeProgress destinationReached:(BOOL)destinationReached trackingSpeedReached:(BOOL)trackingSpeedReached __attribute__((swift_name("init(sessionId:destination:startTime:vehicleConfig:firstRoute:onRoute:speed:traveledDuration:routeProgress:destinationReached:trackingSpeedReached:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMNavigationState *)doCopySessionId:(NSString *)sessionId destination:(id<NSDKMRoutable>)destination startTime:(int64_t)startTime vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig firstRoute:(BOOL)firstRoute onRoute:(BOOL)onRoute speed:(NSDKMSpeed * _Nullable)speed traveledDuration:(NSDKMDuration *)traveledDuration routeProgress:(NSDKMRouteProgressTrackerRouteProgress * _Nullable)routeProgress destinationReached:(BOOL)destinationReached trackingSpeedReached:(BOOL)trackingSpeedReached __attribute__((swift_name("doCopy(sessionId:destination:startTime:vehicleConfig:firstRoute:onRoute:speed:traveledDuration:routeProgress:destinationReached:trackingSpeedReached:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("OnNavigationStateInitializedListener")))
@protocol NSDKMOnNavigationStateInitializedListener
@required
- (void)onNavigationStateInitializedNavigationState:(NSDKMNavigationState *)navigationState __attribute__((swift_name("onNavigationStateInitialized(navigationState:)")));
@end

__attribute__((swift_name("SessionClient")))
@protocol NSDKMSessionClient
@required
- (void)stopSessionSessionId:(NSString *)sessionId callback:(id<NSDKMSessionClientCallback> _Nullable)callback __attribute__((swift_name("stopSession(sessionId:callback:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorSessionClient")))
@interface NSDKMKtorSessionClient : NSDKMBase <NSDKMSessionClient>
- (instancetype)initWithHttpClient:(NSDKMKtor_client_coreHttpClient *)httpClient __attribute__((swift_name("init(httpClient:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithHttpClient:(NSDKMKtor_client_coreHttpClient *)httpClient sessionParamProviders:(NSArray<id<NSDKMSessionParamProvider>> *)sessionParamProviders __attribute__((swift_name("init(httpClient:sessionParamProviders:)"))) __attribute__((objc_designated_initializer));
- (void)stopSessionSessionId:(NSString *)sessionId callback:(id<NSDKMSessionClientCallback> _Nullable)callback __attribute__((swift_name("stopSession(sessionId:callback:)")));
@end

__attribute__((swift_name("SessionClientCallback")))
@protocol NSDKMSessionClientCallback
@required
- (void)onFailedE:(NSDKMKotlinException *)e __attribute__((swift_name("onFailed(e:)")));
- (void)onSuccess __attribute__((swift_name("onSuccess()")));
@end

__attribute__((swift_name("SessionIdGenerator")))
@protocol NSDKMSessionIdGenerator
@required
- (NSString *)generate __attribute__((swift_name("generate()")));
@end

__attribute__((swift_name("SessionParamProvider")))
@protocol NSDKMSessionParamProvider
@required
- (NSDictionary<NSString *, NSString *> *)getSessionParametersSessionId:(NSString *)sessionId __attribute__((swift_name("getSessionParameters(sessionId:)")));
@end

__attribute__((swift_name("SessionRepository")))
@protocol NSDKMSessionRepository
@required
- (NSString *)startSessionSessionId:(NSString * _Nullable)sessionId __attribute__((swift_name("startSession(sessionId:)")));
- (void)stopSession __attribute__((swift_name("stopSession()")));
@property (readonly) NSString * _Nullable sessionId __attribute__((swift_name("sessionId")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SimpleSessionRepository")))
@interface NSDKMSimpleSessionRepository : NSDKMBase <NSDKMSessionRepository>
@property (readonly) NSString * _Nullable sessionId __attribute__((swift_name("sessionId")));
- (instancetype)initWithSessionIdGenerator:(id<NSDKMSessionIdGenerator>)sessionIdGenerator sessionClient:(id<NSDKMSessionClient>)sessionClient __attribute__((swift_name("init(sessionIdGenerator:sessionClient:)"))) __attribute__((objc_designated_initializer));
- (NSString *)startSessionSessionId:(NSString * _Nullable)sessionId __attribute__((swift_name("startSession(sessionId:)")));
- (void)stopSession __attribute__((swift_name("stopSession()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UUIDSessionIdGenerator")))
@interface NSDKMUUIDSessionIdGenerator : NSDKMBase <NSDKMSessionIdGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString *)generate __attribute__((swift_name("generate()")));
@end

__attribute__((swift_name("NavigationEventHandler")))
@protocol NSDKMNavigationEventHandler
@required
- (void)addOnDestinationChangedListenerOnDestinationChangedListener:(id<NSDKMNavigationEventHandlerOnDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("addOnDestinationChangedListener(onDestinationChangedListener:)"))) __attribute__((deprecated("Will be removed in the future. Use addOnDestinationChangedListener in NavigationSdk instead")));
- (void)addOnDestinationReachedListenerOnDestinationReachedListener:(id<NSDKMNavigationEventHandlerOnDestinationReachedListener>)onDestinationReachedListener __attribute__((swift_name("addOnDestinationReachedListener(onDestinationReachedListener:)")));
- (void)addOnInitialRouteReceivedListenerOnInitialRouteReceivedListener:(id<NSDKMNavigationEventHandlerOnInitialRouteReceivedListener>)onInitialRouteReceivedListener __attribute__((swift_name("addOnInitialRouteReceivedListener(onInitialRouteReceivedListener:)")));
- (void)addOnLeavingDestinationListenerOnLeavingDestinationListener:(id<NSDKMNavigationEventHandlerOnLeavingDestinationListener>)onLeavingDestinationListener __attribute__((swift_name("addOnLeavingDestinationListener(onLeavingDestinationListener:)")));
- (void)addOnNavigationStartedListenerOnNavigationStartedListener:(id<NSDKMNavigationEventHandlerOnNavigationStartedListener>)onNavigationStartedListener __attribute__((swift_name("addOnNavigationStartedListener(onNavigationStartedListener:)")));
- (void)addOnNavigationStoppedListenerOnNavigationStoppedListener:(id<NSDKMNavigationEventHandlerOnNavigationStoppedListener>)onNavigationStoppedListener __attribute__((swift_name("addOnNavigationStoppedListener(onNavigationStoppedListener:)")));
- (void)addOnOffRouteListenerOffRouteListener:(id<NSDKMNavigationEventHandlerOnOffRouteListener>)offRouteListener __attribute__((swift_name("addOnOffRouteListener(offRouteListener:)")));
- (void)addOnRouteRequestFailedListenerOnRouteRequestFailedListener:(id<NSDKMNavigationEventHandlerOnRouteRequestFailedListener>)onRouteRequestFailedListener __attribute__((swift_name("addOnRouteRequestFailedListener(onRouteRequestFailedListener:)")));
- (void)addOnRouteUpdateListenerOnRouteUpdateListener:(id<NSDKMNavigationEventHandlerOnRouteUpdateListener>)onRouteUpdateListener __attribute__((swift_name("addOnRouteUpdateListener(onRouteUpdateListener:)")));
- (void)addOnTrackingSpeedReachedListenerOnTrackingSpeedReachedListener:(id<NSDKMNavigationEventHandlerOnTrackingSpeedReachedListener>)onTrackingSpeedReachedListener __attribute__((swift_name("addOnTrackingSpeedReachedListener(onTrackingSpeedReachedListener:)")));
- (void)removeOnDestinationChangedListenerOnDestinationChangedListener:(id<NSDKMNavigationEventHandlerOnDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("removeOnDestinationChangedListener(onDestinationChangedListener:)"))) __attribute__((deprecated("Will be removed in the future. Use removeOnDestinationChangedListener in NavigationSdk instead")));
- (void)removeOnDestinationReachedListenerOnDestinationReachedListener:(id<NSDKMNavigationEventHandlerOnDestinationReachedListener>)onDestinationReachedListener __attribute__((swift_name("removeOnDestinationReachedListener(onDestinationReachedListener:)")));
- (void)removeOnInitialRouteReceivedListenerOnInitialRouteReceivedListener:(id<NSDKMNavigationEventHandlerOnInitialRouteReceivedListener>)onInitialRouteReceivedListener __attribute__((swift_name("removeOnInitialRouteReceivedListener(onInitialRouteReceivedListener:)")));
- (void)removeOnLeavingDestinationListenerOnLeavingDestinationListener:(id<NSDKMNavigationEventHandlerOnLeavingDestinationListener>)onLeavingDestinationListener __attribute__((swift_name("removeOnLeavingDestinationListener(onLeavingDestinationListener:)")));
- (void)removeOnNavigationStartedListenerOnNavigationStartedListener:(id<NSDKMNavigationEventHandlerOnNavigationStartedListener>)onNavigationStartedListener __attribute__((swift_name("removeOnNavigationStartedListener(onNavigationStartedListener:)")));
- (void)removeOnNavigationStoppedListenerOnNavigationStoppedListener:(id<NSDKMNavigationEventHandlerOnNavigationStoppedListener>)onNavigationStoppedListener __attribute__((swift_name("removeOnNavigationStoppedListener(onNavigationStoppedListener:)")));
- (void)removeOnOffRouteListenerOffRouteListener:(id<NSDKMNavigationEventHandlerOnOffRouteListener>)offRouteListener __attribute__((swift_name("removeOnOffRouteListener(offRouteListener:)")));
- (void)removeOnRouteRequestFailedListenerOnRouteRequestFailedListener:(id<NSDKMNavigationEventHandlerOnRouteRequestFailedListener>)onRouteRequestFailedListener __attribute__((swift_name("removeOnRouteRequestFailedListener(onRouteRequestFailedListener:)")));
- (void)removeOnRouteUpdateListenerOnRouteUpdateListener:(id<NSDKMNavigationEventHandlerOnRouteUpdateListener>)onRouteUpdateListener __attribute__((swift_name("removeOnRouteUpdateListener(onRouteUpdateListener:)")));
- (void)removeOnTrackingSpeedReachedListenerOnTrackingSpeedReachedListener:(id<NSDKMNavigationEventHandlerOnTrackingSpeedReachedListener>)onTrackingSpeedReachedListener __attribute__((swift_name("removeOnTrackingSpeedReachedListener(onTrackingSpeedReachedListener:)")));
@end

__attribute__((swift_name("NavigationEventHandlerOnDestinationChangedListener")))
@protocol NSDKMNavigationEventHandlerOnDestinationChangedListener
@required
- (void)onDestinationChangedRoutable:(id<NSDKMRoutable> _Nullable)routable __attribute__((swift_name("onDestinationChanged(routable:)")));
@end

__attribute__((swift_name("NavigationEventHandlerOnDestinationReachedListener")))
@protocol NSDKMNavigationEventHandlerOnDestinationReachedListener
@required
- (void)onDestinationReachedNavigationResult:(NSDKMNavigationResult *)navigationResult __attribute__((swift_name("onDestinationReached(navigationResult:)")));
@end

__attribute__((swift_name("NavigationEventHandlerOnLeavingDestinationListener")))
@protocol NSDKMNavigationEventHandlerOnLeavingDestinationListener
@required
- (void)onLeavingDestinationRoutable:(id<NSDKMRoutable>)routable __attribute__((swift_name("onLeavingDestination(routable:)")));
@end

__attribute__((swift_name("NavigationEventHandlerOnNavigationStartedListener")))
@protocol NSDKMNavigationEventHandlerOnNavigationStartedListener
@required
- (void)onNavigationStartedRoutable:(id<NSDKMRoutable>)routable __attribute__((swift_name("onNavigationStarted(routable:)")));
@end

__attribute__((swift_name("NavigationEventHandlerOnNavigationStoppedListener")))
@protocol NSDKMNavigationEventHandlerOnNavigationStoppedListener
@required
- (void)onNavigationStopped __attribute__((swift_name("onNavigationStopped()")));
@end

__attribute__((swift_name("NavigationEventHandlerOnOffRouteListener")))
@protocol NSDKMNavigationEventHandlerOnOffRouteListener
@required
- (void)onOffRouteDetected __attribute__((swift_name("onOffRouteDetected()")));
- (void)onOffRouteVerified __attribute__((swift_name("onOffRouteVerified()")));
@end

__attribute__((swift_name("NavigationEventHandlerOnRouteRequestFailedListener")))
@protocol NSDKMNavigationEventHandlerOnRouteRequestFailedListener
@required
- (void)onRouteRequestFailedE:(NSDKMKotlinException *)e __attribute__((swift_name("onRouteRequestFailed(e:)")));
@end

__attribute__((swift_name("NavigationEventHandlerOnRouteUpdateListener")))
@protocol NSDKMNavigationEventHandlerOnRouteUpdateListener
@required
- (void)onRouteUpdatedRoute:(NSDKMRoute *)route __attribute__((swift_name("onRouteUpdated(route:)")));
@end

__attribute__((swift_name("NavigationEventHandlerOnTrackingSpeedReachedListener")))
@protocol NSDKMNavigationEventHandlerOnTrackingSpeedReachedListener
@required
- (void)onTrackingSpeedReachedSpeed:(NSDKMSpeed *)speed __attribute__((swift_name("onTrackingSpeedReached(speed:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationResult")))
@interface NSDKMNavigationResult : NSDKMBase
@property (readonly) id<NSDKMRoutable> destination __attribute__((swift_name("destination")));
@property (readonly) NSDKMLength *distanceDriven __attribute__((swift_name("distanceDriven")));
@property (readonly) NSDKMDuration *duration __attribute__((swift_name("duration")));
- (instancetype)initWithDistanceDriven:(NSDKMLength *)distanceDriven duration:(NSDKMDuration *)duration destination:(id<NSDKMRoutable>)destination __attribute__((swift_name("init(distanceDriven:duration:destination:)"))) __attribute__((objc_designated_initializer));
- (NSDKMNavigationResult *)doCopyDistanceDriven:(NSDKMLength *)distanceDriven duration:(NSDKMDuration *)duration destination:(id<NSDKMRoutable>)destination __attribute__((swift_name("doCopy(distanceDriven:duration:destination:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SimpleNavigationEventHandler")))
@interface NSDKMSimpleNavigationEventHandler : NSDKMBase <NSDKMNavigationEventHandler>
@property (readonly) NSDKMMutableSet<id<NSDKMNavigationEventHandlerOnDestinationChangedListener>> *onDestinationChangedListeners __attribute__((swift_name("onDestinationChangedListeners")));
@property (readonly) NSDKMMutableSet<id<NSDKMNavigationEventHandlerOnDestinationReachedListener>> *onDestinationReachedListeners __attribute__((swift_name("onDestinationReachedListeners")));
@property (readonly) NSDKMMutableSet<id<NSDKMNavigationEventHandlerOnInitialRouteReceivedListener>> *onInitialRouteReceivedListeners __attribute__((swift_name("onInitialRouteReceivedListeners")));
@property (readonly) NSDKMMutableSet<id<NSDKMNavigationEventHandlerOnLeavingDestinationListener>> *onLeavingDestinationListeners __attribute__((swift_name("onLeavingDestinationListeners")));
@property (readonly) NSDKMMutableSet<id<NSDKMNavigationEventHandlerOnNavigationStartedListener>> *onNavigationStartedListeners __attribute__((swift_name("onNavigationStartedListeners")));
@property (readonly) NSDKMMutableSet<id<NSDKMNavigationEventHandlerOnNavigationStoppedListener>> *onNavigationStoppedListeners __attribute__((swift_name("onNavigationStoppedListeners")));
@property (readonly) NSDKMMutableSet<id<NSDKMNavigationEventHandlerOnOffRouteListener>> *onOffRouteListeners __attribute__((swift_name("onOffRouteListeners")));
@property (readonly) NSDKMMutableSet<id<NSDKMNavigationEventHandlerOnRouteRequestFailedListener>> *onRouteRequestFailedListeners __attribute__((swift_name("onRouteRequestFailedListeners")));
@property (readonly) NSDKMMutableSet<id<NSDKMNavigationEventHandlerOnRouteUpdateListener>> *onRouteUpdateListeners __attribute__((swift_name("onRouteUpdateListeners")));
@property (readonly) NSDKMMutableSet<id<NSDKMNavigationEventHandlerOnTrackingSpeedReachedListener>> *onTrackingSpeedReachedListeners __attribute__((swift_name("onTrackingSpeedReachedListeners")));
- (void)addOnDestinationChangedListenerOnDestinationChangedListener:(id<NSDKMNavigationEventHandlerOnDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("addOnDestinationChangedListener(onDestinationChangedListener:)"))) __attribute__((deprecated("Overrides deprecated member in 'net.graphmasters.multiplatform.navigation.routing.events.NavigationEventHandler'. Will be removed in the future. Use addOnDestinationChangedListener in NavigationSdk instead")));
- (void)addOnDestinationReachedListenerOnDestinationReachedListener:(id<NSDKMNavigationEventHandlerOnDestinationReachedListener>)onDestinationReachedListener __attribute__((swift_name("addOnDestinationReachedListener(onDestinationReachedListener:)")));
- (void)addOnInitialRouteReceivedListenerOnInitialRouteReceivedListener:(id<NSDKMNavigationEventHandlerOnInitialRouteReceivedListener>)onInitialRouteReceivedListener __attribute__((swift_name("addOnInitialRouteReceivedListener(onInitialRouteReceivedListener:)")));
- (void)addOnLeavingDestinationListenerOnLeavingDestinationListener:(id<NSDKMNavigationEventHandlerOnLeavingDestinationListener>)onLeavingDestinationListener __attribute__((swift_name("addOnLeavingDestinationListener(onLeavingDestinationListener:)")));
- (void)addOnNavigationStartedListenerOnNavigationStartedListener:(id<NSDKMNavigationEventHandlerOnNavigationStartedListener>)onNavigationStartedListener __attribute__((swift_name("addOnNavigationStartedListener(onNavigationStartedListener:)")));
- (void)addOnNavigationStoppedListenerOnNavigationStoppedListener:(id<NSDKMNavigationEventHandlerOnNavigationStoppedListener>)onNavigationStoppedListener __attribute__((swift_name("addOnNavigationStoppedListener(onNavigationStoppedListener:)")));
- (void)addOnOffRouteListenerOffRouteListener:(id<NSDKMNavigationEventHandlerOnOffRouteListener>)offRouteListener __attribute__((swift_name("addOnOffRouteListener(offRouteListener:)")));
- (void)addOnRouteRequestFailedListenerOnRouteRequestFailedListener:(id<NSDKMNavigationEventHandlerOnRouteRequestFailedListener>)onRouteRequestFailedListener __attribute__((swift_name("addOnRouteRequestFailedListener(onRouteRequestFailedListener:)")));
- (void)addOnRouteUpdateListenerOnRouteUpdateListener:(id<NSDKMNavigationEventHandlerOnRouteUpdateListener>)onRouteUpdateListener __attribute__((swift_name("addOnRouteUpdateListener(onRouteUpdateListener:)")));
- (void)addOnTrackingSpeedReachedListenerOnTrackingSpeedReachedListener:(id<NSDKMNavigationEventHandlerOnTrackingSpeedReachedListener>)onTrackingSpeedReachedListener __attribute__((swift_name("addOnTrackingSpeedReachedListener(onTrackingSpeedReachedListener:)")));
- (void)removeOnDestinationChangedListenerOnDestinationChangedListener:(id<NSDKMNavigationEventHandlerOnDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("removeOnDestinationChangedListener(onDestinationChangedListener:)"))) __attribute__((deprecated("Overrides deprecated member in 'net.graphmasters.multiplatform.navigation.routing.events.NavigationEventHandler'. Will be removed in the future. Use removeOnDestinationChangedListener in NavigationSdk instead")));
- (void)removeOnDestinationReachedListenerOnDestinationReachedListener:(id<NSDKMNavigationEventHandlerOnDestinationReachedListener>)onDestinationReachedListener __attribute__((swift_name("removeOnDestinationReachedListener(onDestinationReachedListener:)")));
- (void)removeOnInitialRouteReceivedListenerOnInitialRouteReceivedListener:(id<NSDKMNavigationEventHandlerOnInitialRouteReceivedListener>)onInitialRouteReceivedListener __attribute__((swift_name("removeOnInitialRouteReceivedListener(onInitialRouteReceivedListener:)")));
- (void)removeOnLeavingDestinationListenerOnLeavingDestinationListener:(id<NSDKMNavigationEventHandlerOnLeavingDestinationListener>)onLeavingDestinationListener __attribute__((swift_name("removeOnLeavingDestinationListener(onLeavingDestinationListener:)")));
- (void)removeOnNavigationStartedListenerOnNavigationStartedListener:(id<NSDKMNavigationEventHandlerOnNavigationStartedListener>)onNavigationStartedListener __attribute__((swift_name("removeOnNavigationStartedListener(onNavigationStartedListener:)")));
- (void)removeOnNavigationStoppedListenerOnNavigationStoppedListener:(id<NSDKMNavigationEventHandlerOnNavigationStoppedListener>)onNavigationStoppedListener __attribute__((swift_name("removeOnNavigationStoppedListener(onNavigationStoppedListener:)")));
- (void)removeOnOffRouteListenerOffRouteListener:(id<NSDKMNavigationEventHandlerOnOffRouteListener>)offRouteListener __attribute__((swift_name("removeOnOffRouteListener(offRouteListener:)")));
- (void)removeOnRouteRequestFailedListenerOnRouteRequestFailedListener:(id<NSDKMNavigationEventHandlerOnRouteRequestFailedListener>)onRouteRequestFailedListener __attribute__((swift_name("removeOnRouteRequestFailedListener(onRouteRequestFailedListener:)")));
- (void)removeOnRouteUpdateListenerOnRouteUpdateListener:(id<NSDKMNavigationEventHandlerOnRouteUpdateListener>)onRouteUpdateListener __attribute__((swift_name("removeOnRouteUpdateListener(onRouteUpdateListener:)")));
- (void)removeOnTrackingSpeedReachedListenerOnTrackingSpeedReachedListener:(id<NSDKMNavigationEventHandlerOnTrackingSpeedReachedListener>)onTrackingSpeedReachedListener __attribute__((swift_name("removeOnTrackingSpeedReachedListener(onTrackingSpeedReachedListener:)")));
@end

__attribute__((swift_name("DestinationRepository")))
@protocol NSDKMDestinationRepository
@required
- (void)addDestinationRoutable:(id<NSDKMRoutable>)routable __attribute__((swift_name("addDestination(routable:)")));
- (void)addDestinationRoutable:(id<NSDKMRoutable>)routable index:(NSDKMInt * _Nullable)index __attribute__((swift_name("addDestination(routable:index:)")));
- (void)addOnCurrentDestinationChangedListenerOnDestinationChangedListener:(id<NSDKMOnCurrentDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("addOnCurrentDestinationChangedListener(onDestinationChangedListener:)")));
- (void)addOnDestinationsChangedListenerOnDestinationsChangedListener:(id<NSDKMOnDestinationsChangedListener>)onDestinationsChangedListener __attribute__((swift_name("addOnDestinationsChangedListener(onDestinationsChangedListener:)")));
- (void)changeToNextDestination __attribute__((swift_name("changeToNextDestination()")));
- (void)clearDestinations __attribute__((swift_name("clearDestinations()")));
- (void)doInitDestinationsDestinations:(NSArray<id<NSDKMRoutable>> *)destinations __attribute__((swift_name("doInitDestinations(destinations:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)moveDestinationFromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("moveDestination(fromIndex:toIndex:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)moveDestinationRoutable:(id<NSDKMRoutable>)routable toIndex:(int32_t)toIndex error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("moveDestination(routable:toIndex:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)removeDestinationIndex:(int32_t)index error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("removeDestination(index:)")));
- (void)removeDestinationRoutable:(id<NSDKMRoutable>)routable __attribute__((swift_name("removeDestination(routable:)")));
- (void)removeOnCurrentDestinationChangedListenerOnDestinationChangedListener:(id<NSDKMOnCurrentDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("removeOnCurrentDestinationChangedListener(onDestinationChangedListener:)")));
- (void)removeOnDestinationsChangedListenerOnDestinationsChangedListener:(id<NSDKMOnDestinationsChangedListener>)onDestinationsChangedListener __attribute__((swift_name("removeOnDestinationsChangedListener(onDestinationsChangedListener:)")));
@property (readonly) id<NSDKMRoutable> _Nullable currentDestination __attribute__((swift_name("currentDestination")));
@property (readonly) NSArray<id<NSDKMRoutable>> *destinations __attribute__((swift_name("destinations")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultDestinationRepository")))
@interface NSDKMDefaultDestinationRepository : NSDKMBase <NSDKMDestinationRepository>
@property id<NSDKMRoutable> _Nullable currentDestination __attribute__((swift_name("currentDestination")));
@property NSArray<id<NSDKMRoutable>> *destinations __attribute__((swift_name("destinations")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)addDestinationRoutable:(id<NSDKMRoutable>)routable __attribute__((swift_name("addDestination(routable:)")));
- (void)addDestinationRoutable:(id<NSDKMRoutable>)routable index:(NSDKMInt * _Nullable)index __attribute__((swift_name("addDestination(routable:index:)")));
- (void)addOnCurrentDestinationChangedListenerOnDestinationChangedListener:(id<NSDKMOnCurrentDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("addOnCurrentDestinationChangedListener(onDestinationChangedListener:)")));
- (void)addOnDestinationsChangedListenerOnDestinationsChangedListener:(id<NSDKMOnDestinationsChangedListener>)onDestinationsChangedListener __attribute__((swift_name("addOnDestinationsChangedListener(onDestinationsChangedListener:)")));
- (void)changeToNextDestination __attribute__((swift_name("changeToNextDestination()")));
- (void)clearDestinations __attribute__((swift_name("clearDestinations()")));
- (void)doInitDestinationsDestinations:(NSArray<id<NSDKMRoutable>> *)destinations __attribute__((swift_name("doInitDestinations(destinations:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)moveDestinationFromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("moveDestination(fromIndex:toIndex:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)moveDestinationRoutable:(id<NSDKMRoutable>)routable toIndex:(int32_t)toIndex error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("moveDestination(routable:toIndex:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)removeDestinationIndex:(int32_t)index error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("removeDestination(index:)")));
- (void)removeDestinationRoutable:(id<NSDKMRoutable>)routable __attribute__((swift_name("removeDestination(routable:)")));
- (void)removeOnCurrentDestinationChangedListenerOnDestinationChangedListener:(id<NSDKMOnCurrentDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("removeOnCurrentDestinationChangedListener(onDestinationChangedListener:)")));
- (void)removeOnDestinationsChangedListenerOnDestinationsChangedListener:(id<NSDKMOnDestinationsChangedListener>)onDestinationsChangedListener __attribute__((swift_name("removeOnDestinationsChangedListener(onDestinationsChangedListener:)")));
@end

__attribute__((swift_name("OnCurrentDestinationChangedListener")))
@protocol NSDKMOnCurrentDestinationChangedListener
@required
- (void)onCurrentDestinationChangedDestination:(id<NSDKMRoutable> _Nullable)destination __attribute__((swift_name("onCurrentDestinationChanged(destination:)")));
@end

__attribute__((swift_name("OnDestinationsChangedListener")))
@protocol NSDKMOnDestinationsChangedListener
@required
- (void)onDestinationsChangedDestination:(NSArray<id<NSDKMRoutable>> *)destination __attribute__((swift_name("onDestinationsChanged(destination:)")));
@end

__attribute__((swift_name("NavigationEngine")))
@protocol NSDKMNavigationEngine
@required
- (void)startNavigationStops:(NSArray<id<NSDKMRoutable>> *)stops vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig __attribute__((swift_name("startNavigation(stops:vehicleConfig_:)")));
- (void)startNavigationRoutable:(id<NSDKMRoutable> _Nullable)routable vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig __attribute__((swift_name("startNavigation(routable:vehicleConfig_:)")));
- (void)startNavigationRoute:(NSDKMRoute *)route sessionId:(NSString * _Nullable)sessionId __attribute__((swift_name("startNavigation(route:sessionId_:)")));
- (void)stopNavigation __attribute__((swift_name("stopNavigation()")));
@end

__attribute__((swift_name("RouteRepositoryRouteUpdatedListener")))
@protocol NSDKMRouteRepositoryRouteUpdatedListener
@required
- (void)onRouteUpdateCanceledRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("onRouteUpdateCanceled(routeRequest:)")));
- (void)onRouteUpdateFailedE:(NSDKMKotlinException *)e __attribute__((swift_name("onRouteUpdateFailed(e:)")));
- (void)onRouteUpdateStartedRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("onRouteUpdateStarted(routeRequest:)")));
- (void)onRouteUpdatedRoute:(NSDKMRoute *)route __attribute__((swift_name("onRouteUpdated(route:)")));
@end

__attribute__((swift_name("RouteProgressTrackerOnRouteProgressUpdatedListener")))
@protocol NSDKMRouteProgressTrackerOnRouteProgressUpdatedListener
@required
- (void)onRouteProgressUpdatedRouteProgress:(NSDKMRouteProgressTrackerRouteProgress *)routeProgress __attribute__((swift_name("onRouteProgressUpdated(routeProgress:)")));
@end

__attribute__((swift_name("OnRouteTrackerOnRouteStateListener")))
@protocol NSDKMOnRouteTrackerOnRouteStateListener
@required
- (void)onStateChangedState:(NSDKMOnRouteTrackerState *)state location:(NSDKMLocation *)location __attribute__((swift_name("onStateChanged(state:location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SchedulingNavigationEngine")))
@interface NSDKMSchedulingNavigationEngine : NSDKMBase <NSDKMNavigationEngine, NSDKMRouteRepositoryRouteUpdatedListener, NSDKMRouteProgressTrackerOnRouteProgressUpdatedListener, NSDKMOnRouteTrackerOnRouteStateListener, NSDKMOnCurrentDestinationChangedListener>
- (instancetype)initWithSimpleNavigationEventHandler:(NSDKMSimpleNavigationEventHandler *)simpleNavigationEventHandler routeRepository:(id<NSDKMRouteRepository>)routeRepository destinationRepository:(id<NSDKMDestinationRepository>)destinationRepository sessionRepository:(id<NSDKMSessionRepository>)sessionRepository routeProgressTracker:(id<NSDKMRouteProgressTracker>)routeProgressTracker navigationStateRepository:(id<NSDKMNavigationStateRepository>)navigationStateRepository onRouteTracker:(id<NSDKMOnRouteTracker>)onRouteTracker __attribute__((swift_name("init(simpleNavigationEventHandler:routeRepository:destinationRepository:sessionRepository:routeProgressTracker:navigationStateRepository:onRouteTracker:)"))) __attribute__((objc_designated_initializer));
- (void)onCurrentDestinationChangedDestination:(id<NSDKMRoutable> _Nullable)destination __attribute__((swift_name("onCurrentDestinationChanged(destination:)")));
- (void)onRouteProgressUpdatedRouteProgress:(NSDKMRouteProgressTrackerRouteProgress *)routeProgress __attribute__((swift_name("onRouteProgressUpdated(routeProgress:)")));
- (void)onRouteUpdateCanceledRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("onRouteUpdateCanceled(routeRequest:)")));
- (void)onRouteUpdateFailedE:(NSDKMKotlinException *)e __attribute__((swift_name("onRouteUpdateFailed(e:)")));
- (void)onRouteUpdateStartedRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("onRouteUpdateStarted(routeRequest:)")));
- (void)onRouteUpdatedRoute:(NSDKMRoute *)route __attribute__((swift_name("onRouteUpdated(route:)")));
- (void)onStateChangedState:(NSDKMOnRouteTrackerState *)state location:(NSDKMLocation *)location __attribute__((swift_name("onStateChanged(state:location:)")));
- (void)startNavigationStops:(NSArray<id<NSDKMRoutable>> *)stops vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig __attribute__((swift_name("startNavigation(stops:vehicleConfig_:)")));
- (void)startNavigationRoutable:(id<NSDKMRoutable> _Nullable)routable vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig __attribute__((swift_name("startNavigation(routable:vehicleConfig_:)")));
- (void)startNavigationRoute:(NSDKMRoute *)route sessionId:(NSString * _Nullable)sessionId __attribute__((swift_name("startNavigation(route:sessionId_:)")));
- (void)stopNavigation __attribute__((swift_name("stopNavigation()")));
@end

__attribute__((swift_name("UpdateRateProvider")))
@protocol NSDKMUpdateRateProvider
@required
- (NSDKMDuration *)getUpdateRateRouteProgress:(NSDKMRouteProgressTrackerRouteProgress * _Nullable)routeProgress __attribute__((swift_name("getUpdateRate(routeProgress:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceBasedUpdateRateProvider")))
@interface NSDKMDistanceBasedUpdateRateProvider : NSDKMBase <NSDKMUpdateRateProvider>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMDuration *)getUpdateRateRouteProgress:(NSDKMRouteProgressTrackerRouteProgress * _Nullable)routeProgress __attribute__((swift_name("getUpdateRate(routeProgress:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StaticUpdateRateProvider")))
@interface NSDKMStaticUpdateRateProvider : NSDKMBase <NSDKMUpdateRateProvider>
- (instancetype)initWithUpdateRate:(NSDKMDuration *)updateRate __attribute__((swift_name("init(updateRate:)"))) __attribute__((objc_designated_initializer));
- (NSDKMDuration *)getUpdateRateRouteProgress:(NSDKMRouteProgressTrackerRouteProgress * _Nullable)routeProgress __attribute__((swift_name("getUpdateRate(routeProgress:)")));
@end

__attribute__((swift_name("RouteProgressTracker")))
@protocol NSDKMRouteProgressTracker
@required
- (void)addRouteProgressListenerOnRouteProgressUpdatedListener:(id<NSDKMRouteProgressTrackerOnRouteProgressUpdatedListener>)onRouteProgressUpdatedListener __attribute__((swift_name("addRouteProgressListener(onRouteProgressUpdatedListener:)")));
- (NSDKMLength * _Nullable)getDistanceToWaypointWaypointIndex:(int32_t)waypointIndex __attribute__((swift_name("getDistanceToWaypoint(waypointIndex:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMLength * _Nullable)getDistanceToWaypointWaypoint:(NSDKMRouteWaypoint *)waypoint error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("getDistanceToWaypoint(waypoint:)"))) __attribute__((swift_error(nonnull_error)));
- (NSDKMDuration * _Nullable)getDurationToWaypointWaypointIndex:(int32_t)waypointIndex __attribute__((swift_name("getDurationToWaypoint(waypointIndex:)")));
- (NSDKMDuration * _Nullable)getDurationToWaypointWaypoint:(NSDKMRouteWaypoint *)waypoint __attribute__((swift_name("getDurationToWaypoint(waypoint:)")));
- (int32_t)indexOfWaypoint:(NSDKMRouteWaypoint *)waypoint __attribute__((swift_name("indexOf(waypoint:)")));
- (BOOL)isWaypointReachedWaypointIndex:(int32_t)waypointIndex __attribute__((swift_name("isWaypointReached(waypointIndex:)")));
- (BOOL)isWaypointReachedWaypoint:(NSDKMRouteWaypoint *)waypoint __attribute__((swift_name("isWaypointReached(waypoint:)")));
- (void)removeRouteProgressListenerOnRouteProgressUpdatedListener:(id<NSDKMRouteProgressTrackerOnRouteProgressUpdatedListener>)onRouteProgressUpdatedListener __attribute__((swift_name("removeRouteProgressListener(onRouteProgressUpdatedListener:)")));
- (void)start __attribute__((swift_name("start()")));
- (void)stop __attribute__((swift_name("stop()")));
@property (readonly) BOOL initialized __attribute__((swift_name("initialized")));
@property (readonly) NSDKMRouteProgressTrackerRouteProgress * _Nullable routeProgress __attribute__((swift_name("routeProgress")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PredictionBasedRouteProgressTracker")))
@interface NSDKMPredictionBasedRouteProgressTracker : NSDKMBase <NSDKMRouteProgressTracker>
@property (readonly) BOOL initialized __attribute__((swift_name("initialized")));
@property (readonly) NSDKMRouteProgressTrackerRouteProgress * _Nullable routeProgress __attribute__((swift_name("routeProgress")));
- (instancetype)initWithExecutor:(id<NSDKMExecutor>)executor timeProvider:(id<NSDKMTimeProvider>)timeProvider routeProgressStateUpdater:(id<NSDKMRouteProgressStateUpdater>)routeProgressStateUpdater onRoutePredictor:(id<NSDKMOnRoutePredictor>)onRoutePredictor updateRateProvider:(id<NSDKMUpdateRateProvider>)updateRateProvider speedTracker:(id<NSDKMSpeedTracker>)speedTracker maxManeuverStopSpeed:(NSDKMSpeed *)maxManeuverStopSpeed __attribute__((swift_name("init(executor:timeProvider:routeProgressStateUpdater:onRoutePredictor:updateRateProvider:speedTracker:maxManeuverStopSpeed:)"))) __attribute__((objc_designated_initializer));
- (void)addRouteProgressListenerOnRouteProgressUpdatedListener:(id<NSDKMRouteProgressTrackerOnRouteProgressUpdatedListener>)onRouteProgressUpdatedListener __attribute__((swift_name("addRouteProgressListener(onRouteProgressUpdatedListener:)")));
- (NSDKMLength * _Nullable)getDistanceToWaypointWaypointIndex:(int32_t)waypointIndex __attribute__((swift_name("getDistanceToWaypoint(waypointIndex:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMLength * _Nullable)getDistanceToWaypointWaypoint:(NSDKMRouteWaypoint *)waypoint error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("getDistanceToWaypoint(waypoint:)"))) __attribute__((swift_error(nonnull_error)));
- (NSDKMDuration * _Nullable)getDurationToWaypointWaypointIndex:(int32_t)waypointIndex __attribute__((swift_name("getDurationToWaypoint(waypointIndex:)")));
- (NSDKMDuration * _Nullable)getDurationToWaypointWaypoint:(NSDKMRouteWaypoint *)waypoint __attribute__((swift_name("getDurationToWaypoint(waypoint:)")));
- (int32_t)indexOfWaypoint:(NSDKMRouteWaypoint *)waypoint __attribute__((swift_name("indexOf(waypoint:)")));
- (BOOL)isWaypointReachedWaypointIndex:(int32_t)waypointIndex __attribute__((swift_name("isWaypointReached(waypointIndex:)")));
- (BOOL)isWaypointReachedWaypoint:(NSDKMRouteWaypoint *)waypoint __attribute__((swift_name("isWaypointReached(waypoint:)")));
- (void)removeRouteProgressListenerOnRouteProgressUpdatedListener:(id<NSDKMRouteProgressTrackerOnRouteProgressUpdatedListener>)onRouteProgressUpdatedListener __attribute__((swift_name("removeRouteProgressListener(onRouteProgressUpdatedListener:)")));
- (void)start __attribute__((swift_name("start()")));
- (void)stop __attribute__((swift_name("stop()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProgressHelper")))
@interface NSDKMProgressHelper : NSDKMBase
@property (class, readonly, getter=shared) NSDKMProgressHelper *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)progressHelper __attribute__((swift_name("init()")));
- (NSDKMDuration *)calculateDurationWaypoints:(NSArray<NSDKMRouteWaypoint *> *)waypoints __attribute__((swift_name("calculateDuration(waypoints:)")));
- (NSDKMDuration *)calculateDurationStart:(NSDKMRouteWaypoint *)start end:(NSDKMRouteWaypoint *)end __attribute__((swift_name("calculateDuration(start:end:)")));
@end

__attribute__((swift_name("RouteProgressStateUpdater")))
@protocol NSDKMRouteProgressStateUpdater
@required
- (NSDKMRouteProgressTrackerRouteProgress *)initializeRoute:(NSDKMRoute *)route projectedLocation:(NSDKMOnRouteProjectorProjectedLocation *)projectedLocation previousRouteProgress:(NSDKMRouteProgressTrackerRouteProgress * _Nullable)previousRouteProgress __attribute__((swift_name("initialize(route:projectedLocation:previousRouteProgress:)")));
- (NSDKMRouteProgressTrackerRouteProgress *)updateRouteProgress:(NSDKMRouteProgressTrackerRouteProgress *)routeProgress projectedLocation:(NSDKMOnRouteProjectorProjectedLocation *)projectedLocation __attribute__((swift_name("update(routeProgress:projectedLocation:)")));
@end

__attribute__((swift_name("KotlinThrowable")))
@interface NSDKMKotlinThrowable : NSDKMBase
@property (readonly) NSDKMKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@property (readonly) NSString * _Nullable message __attribute__((swift_name("message")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (NSDKMKotlinArray<NSString *> *)getStackTrace __attribute__((swift_name("getStackTrace()")));
- (void)printStackTrace __attribute__((swift_name("printStackTrace()")));
- (NSString *)description __attribute__((swift_name("description()")));
- (NSError *)asError __attribute__((swift_name("asError()")));
@end

__attribute__((swift_name("KotlinException")))
@interface NSDKMKotlinException : NSDKMKotlinThrowable
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProgressTrackerNotYetInitializedException")))
@interface NSDKMRouteProgressTrackerNotYetInitializedException : NSDKMKotlinException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProgressTrackerRouteProgress")))
@interface NSDKMRouteProgressTrackerRouteProgress : NSDKMFreezable
@property (readonly) NSDKMSpeed * _Nullable anticipatedSpeed __attribute__((swift_name("anticipatedSpeed")));
@property (readonly) NSDKMRouteWaypoint * _Nullable currentWaypoint __attribute__((swift_name("currentWaypoint")));
@property (readonly) int32_t currentWaypointIndex __attribute__((swift_name("currentWaypointIndex")));
@property (readonly) id<NSDKMRoutable> destination __attribute__((swift_name("destination")));
@property (readonly) int64_t estimatedArrivalTime __attribute__((swift_name("estimatedArrivalTime")));
@property (readonly) BOOL initialized __attribute__((swift_name("initialized")));
@property (readonly) NSDKMOnRouteProjectorProjectedLocation *locationOnRoute __attribute__((swift_name("locationOnRoute")));
@property (readonly) NSDKMManeuver *nextManeuver __attribute__((swift_name("nextManeuver")));
@property (readonly) NSDKMLength *remainingDistance __attribute__((swift_name("remainingDistance")));
@property (readonly) NSArray<NSDKMManeuver *> *remainingManeuvers __attribute__((swift_name("remainingManeuvers")));
@property (readonly) NSDKMDuration *remainingTravelTime __attribute__((swift_name("remainingTravelTime")));
@property (readonly) NSArray<NSDKMRouteWaypoint *> *remainingWaypoints __attribute__((swift_name("remainingWaypoints")));
@property (readonly) NSDKMRoute *route __attribute__((swift_name("route")));
@property (readonly) NSDKMSpeed * _Nullable speedLimit __attribute__((swift_name("speedLimit")));
@property (readonly) NSString * _Nullable streetName __attribute__((swift_name("streetName")));
@property (readonly) NSDKMLength *traveledDistance __attribute__((swift_name("traveledDistance")));
- (instancetype)initWithRoute:(NSDKMRoute *)route remainingWaypoints:(NSArray<NSDKMRouteWaypoint *> *)remainingWaypoints destination:(id<NSDKMRoutable>)destination remainingDistance:(NSDKMLength *)remainingDistance traveledDistance:(NSDKMLength *)traveledDistance locationOnRoute:(NSDKMOnRouteProjectorProjectedLocation *)locationOnRoute streetName:(NSString * _Nullable)streetName remainingManeuvers:(NSArray<NSDKMManeuver *> *)remainingManeuvers remainingTravelTime:(NSDKMDuration *)remainingTravelTime estimatedArrivalTime:(int64_t)estimatedArrivalTime speedLimit:(NSDKMSpeed * _Nullable)speedLimit anticipatedSpeed:(NSDKMSpeed * _Nullable)anticipatedSpeed distancesWaypointToDestination:(NSArray<NSDKMLength *> *)distancesWaypointToDestination waypointToDestinationTravelTimes:(NSArray<NSDKMDuration *> *)waypointToDestinationTravelTimes currentWaypoint:(NSDKMRouteWaypoint * _Nullable)currentWaypoint currentWaypointIndex:(int32_t)currentWaypointIndex __attribute__((swift_name("init(route:remainingWaypoints:destination:remainingDistance:traveledDistance:locationOnRoute:streetName:remainingManeuvers:remainingTravelTime:estimatedArrivalTime:speedLimit:anticipatedSpeed:distancesWaypointToDestination:waypointToDestinationTravelTimes:currentWaypoint:currentWaypointIndex:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteProgressTrackerRouteProgress *)doCopyRoute:(NSDKMRoute *)route remainingWaypoints:(NSArray<NSDKMRouteWaypoint *> *)remainingWaypoints destination:(id<NSDKMRoutable>)destination remainingDistance:(NSDKMLength *)remainingDistance traveledDistance:(NSDKMLength *)traveledDistance locationOnRoute:(NSDKMOnRouteProjectorProjectedLocation *)locationOnRoute streetName:(NSString * _Nullable)streetName remainingManeuvers:(NSArray<NSDKMManeuver *> *)remainingManeuvers remainingTravelTime:(NSDKMDuration *)remainingTravelTime estimatedArrivalTime:(int64_t)estimatedArrivalTime speedLimit:(NSDKMSpeed * _Nullable)speedLimit anticipatedSpeed:(NSDKMSpeed * _Nullable)anticipatedSpeed distancesWaypointToDestination:(NSArray<NSDKMLength *> *)distancesWaypointToDestination waypointToDestinationTravelTimes:(NSArray<NSDKMDuration *> *)waypointToDestinationTravelTimes currentWaypoint:(NSDKMRouteWaypoint * _Nullable)currentWaypoint currentWaypointIndex:(int32_t)currentWaypointIndex __attribute__((swift_name("doCopy(route:remainingWaypoints:destination:remainingDistance:traveledDistance:locationOnRoute:streetName:remainingManeuvers:remainingTravelTime:estimatedArrivalTime:speedLimit:anticipatedSpeed:distancesWaypointToDestination:waypointToDestinationTravelTimes:currentWaypoint:currentWaypointIndex:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StatelessRouteProgressStateUpdater")))
@interface NSDKMStatelessRouteProgressStateUpdater : NSDKMBase <NSDKMRouteProgressStateUpdater>
- (instancetype)initWithInternetConnectionValidator:(id<NSDKMInternetConnectionValidator>)internetConnectionValidator __attribute__((swift_name("init(internetConnectionValidator:)"))) __attribute__((objc_designated_initializer));
- (NSDKMRouteProgressTrackerRouteProgress *)initializeRoute:(NSDKMRoute *)route projectedLocation:(NSDKMOnRouteProjectorProjectedLocation *)projectedLocation previousRouteProgress:(NSDKMRouteProgressTrackerRouteProgress * _Nullable)previousRouteProgress __attribute__((swift_name("initialize(route:projectedLocation:previousRouteProgress:)")));
- (NSDKMRouteProgressTrackerRouteProgress *)updateRouteProgress:(NSDKMRouteProgressTrackerRouteProgress *)routeProgress projectedLocation:(NSDKMOnRouteProjectorProjectedLocation *)projectedLocation __attribute__((swift_name("update(routeProgress:projectedLocation:)")));
@end

__attribute__((swift_name("Validator")))
@protocol NSDKMValidator
@required
- (BOOL)isValidRouteProgress:(NSDKMRouteProgressTrackerRouteProgress *)routeProgress __attribute__((swift_name("isValid(routeProgress:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InterceptingValidator")))
@interface NSDKMInterceptingValidator : NSDKMBase <NSDKMValidator>
- (void)addInterceptorInterceptor:(id<NSDKMInterceptingValidatorInterceptor>)interceptor __attribute__((swift_name("addInterceptor(interceptor:)")));
- (BOOL)isValidRouteProgress:(NSDKMRouteProgressTrackerRouteProgress *)routeProgress __attribute__((swift_name("isValid(routeProgress:)")));
@end

__attribute__((swift_name("InterceptingValidatorInterceptor")))
@protocol NSDKMInterceptingValidatorInterceptor
@required
- (NSDKMBoolean * _Nullable)interceptRouteProgress:(NSDKMRouteProgressTrackerRouteProgress *)routeProgress originalResult:(BOOL)originalResult __attribute__((swift_name("intercept(routeProgress:originalResult:)")));
@end

__attribute__((swift_name("DistanceBasedReachingDestinationValidator")))
@interface NSDKMDistanceBasedReachingDestinationValidator : NSDKMBase <NSDKMValidator>
- (instancetype)initWithDefaultDistance:(NSDKMLength *)defaultDistance __attribute__((swift_name("init(defaultDistance:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isValidRouteProgress:(NSDKMRouteProgressTrackerRouteProgress *)routeProgress __attribute__((swift_name("isValid(routeProgress:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceBasedLeavingDestinationValidator")))
@interface NSDKMDistanceBasedLeavingDestinationValidator : NSDKMBase <NSDKMValidator>
@property (class, readonly, getter=companion) NSDKMDistanceBasedLeavingDestinationValidatorCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)initWithLocationRepository:(id<NSDKMLocationRepository>)locationRepository __attribute__((swift_name("init(locationRepository:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLocationRepository:(id<NSDKMLocationRepository>)locationRepository leavingDestinationDistance:(NSDKMLength *)leavingDestinationDistance __attribute__((swift_name("init(locationRepository:leavingDestinationDistance:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isValidRouteProgress:(NSDKMRouteProgressTrackerRouteProgress *)routeProgress __attribute__((swift_name("isValid(routeProgress:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceBasedLeavingDestinationValidator.Companion")))
@interface NSDKMDistanceBasedLeavingDestinationValidatorCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMDistanceBasedLeavingDestinationValidatorCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("SchedulingRouteRepositoryOffRouteRequestValidator")))
@protocol NSDKMSchedulingRouteRepositoryOffRouteRequestValidator
@required
- (void)updateRoute:(NSDKMRoute *)route __attribute__((swift_name("update(route:)")));
- (BOOL)validateLocation:(NSDKMLocation *)location previousRouteRequestJob:(NSDKMRouteRequestJob * _Nullable)previousRouteRequestJob __attribute__((swift_name("validate(location:previousRouteRequestJob:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CombiningOffRouteRequestValidator")))
@interface NSDKMCombiningOffRouteRequestValidator : NSDKMBase <NSDKMSchedulingRouteRepositoryOffRouteRequestValidator>
- (instancetype)initWithOffRouteRequestValidators:(NSArray<id<NSDKMSchedulingRouteRepositoryOffRouteRequestValidator>> *)offRouteRequestValidators __attribute__((swift_name("init(offRouteRequestValidators:)"))) __attribute__((objc_designated_initializer));
- (void)updateRoute:(NSDKMRoute *)route __attribute__((swift_name("update(route:)")));
- (BOOL)validateLocation:(NSDKMLocation *)location previousRouteRequestJob:(NSDKMRouteRequestJob * _Nullable)previousRouteRequestJob __attribute__((swift_name("validate(location:previousRouteRequestJob:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceOffRouteRequestValidator")))
@interface NSDKMDistanceOffRouteRequestValidator : NSDKMBase <NSDKMSchedulingRouteRepositoryOffRouteRequestValidator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMinDisplacement:(NSDKMLength *)minDisplacement __attribute__((swift_name("init(minDisplacement:)"))) __attribute__((objc_designated_initializer));
- (void)updateRoute:(NSDKMRoute *)route __attribute__((swift_name("update(route:)")));
- (BOOL)validateLocation:(NSDKMLocation *)location previousRouteRequestJob:(NSDKMRouteRequestJob * _Nullable)previousRouteRequestJob __attribute__((swift_name("validate(location:previousRouteRequestJob:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DurationOffRouteRequestValidator")))
@interface NSDKMDurationOffRouteRequestValidator : NSDKMBase <NSDKMSchedulingRouteRepositoryOffRouteRequestValidator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMinDuration:(NSDKMDuration *)minDuration __attribute__((swift_name("init(minDuration:)"))) __attribute__((objc_designated_initializer));
- (void)updateRoute:(NSDKMRoute *)route __attribute__((swift_name("update(route:)")));
- (BOOL)validateLocation:(NSDKMLocation *)location previousRouteRequestJob:(NSDKMRouteRequestJob * _Nullable)previousRouteRequestJob __attribute__((swift_name("validate(location:previousRouteRequestJob:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NoLocationAvailableException")))
@interface NSDKMNoLocationAvailableException : NSDKMKotlinException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("RouteRepository")))
@protocol NSDKMRouteRepository
@required
- (void)addRouteUpdatedListenerRouteUpdatedListener:(id<NSDKMRouteRepositoryRouteUpdatedListener>)routeUpdatedListener __attribute__((swift_name("addRouteUpdatedListener(routeUpdatedListener:)")));
- (void)removeRouteUpdatedListenerRouteUpdatedListener:(id<NSDKMRouteRepositoryRouteUpdatedListener>)routeUpdatedListener __attribute__((swift_name("removeRouteUpdatedListener(routeUpdatedListener:)")));
- (void)reportOffRouteLocation:(NSDKMLocation *)location __attribute__((swift_name("reportOffRoute(location:)")));
- (void)startRoute:(NSDKMRoute * _Nullable)route vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig __attribute__((swift_name("start(route:vehicleConfig:)")));
- (void)stop __attribute__((swift_name("stop()")));
@property (readonly) BOOL active __attribute__((swift_name("active")));
@property (readonly) NSDKMRoute * _Nullable route __attribute__((swift_name("route")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteRequestJob")))
@interface NSDKMRouteRequestJob : NSDKMBase
@property (readonly) BOOL finished __attribute__((swift_name("finished")));
@property (readonly) NSDKMRouteProviderRouteRequest *routeRequest __attribute__((swift_name("routeRequest")));
- (instancetype)initWithRouteProvider:(id<NSDKMRouteProvider>)routeProvider routeRequest:(NSDKMRouteProviderRouteRequest *)routeRequest listener:(id<NSDKMRouteRequestJobListener> _Nullable)listener __attribute__((swift_name("init(routeProvider:routeRequest:listener:)"))) __attribute__((objc_designated_initializer));
- (void)cancel __attribute__((swift_name("cancel()")));
- (void)execute __attribute__((swift_name("execute()")));
@end

__attribute__((swift_name("RouteRequestJobListener")))
@protocol NSDKMRouteRequestJobListener
@required
- (void)onDoneRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest route:(NSDKMRoute *)route __attribute__((swift_name("onDone(routeRequest:route:)")));
- (void)onFailedRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest exception:(NSDKMKotlinException *)exception __attribute__((swift_name("onFailed(routeRequest:exception:)")));
- (void)onStartRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("onStart(routeRequest:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SchedulingRouteRepository")))
@interface NSDKMSchedulingRouteRepository : NSDKMBase <NSDKMRouteRepository, NSDKMRouteRequestJobListener, NSDKMLocationUpdateListener>
@property (readonly) BOOL active __attribute__((swift_name("active")));
@property (readonly) NSDKMRoute * _Nullable route __attribute__((swift_name("route")));
- (void)addRouteUpdatedListenerRouteUpdatedListener:(id<NSDKMRouteRepositoryRouteUpdatedListener>)routeUpdatedListener __attribute__((swift_name("addRouteUpdatedListener(routeUpdatedListener:)")));
- (void)onDoneRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest route:(NSDKMRoute *)route __attribute__((swift_name("onDone(routeRequest:route:)")));
- (void)onFailedRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest exception:(NSDKMKotlinException *)exception __attribute__((swift_name("onFailed(routeRequest:exception:)")));
- (void)onLocationUpdatedLocation:(NSDKMLocation *)location __attribute__((swift_name("onLocationUpdated(location:)")));
- (void)onStartRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("onStart(routeRequest:)")));
- (void)removeRouteUpdatedListenerRouteUpdatedListener:(id<NSDKMRouteRepositoryRouteUpdatedListener>)routeUpdatedListener __attribute__((swift_name("removeRouteUpdatedListener(routeUpdatedListener:)")));
- (void)reportOffRouteLocation:(NSDKMLocation *)location __attribute__((swift_name("reportOffRoute(location:)")));
- (void)startRoute:(NSDKMRoute * _Nullable)route vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig __attribute__((swift_name("start(route:vehicleConfig:)")));
- (void)stop __attribute__((swift_name("stop()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorRouteProvider")))
@interface NSDKMKtorRouteProvider : NSDKMBase <NSDKMRouteProvider>
- (instancetype)initWithHttpClient:(NSDKMKtor_client_coreHttpClient *)httpClient instanceId:(NSString *)instanceId routeDtoConverter:(id<NSDKMRouteDtoConverter>)routeDtoConverter routingParamProviders:(NSArray<id<NSDKMRoutingParamProvider>> *)routingParamProviders defaultHeaders:(NSDictionary<NSString *, NSString *> *)defaultHeaders __attribute__((swift_name("init(httpClient:instanceId:routeDtoConverter:routingParamProviders:defaultHeaders:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMRoute * _Nullable)requestRouteRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("requestRoute(routeRequest:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMRouteData * _Nullable)requestRouteDataOrigin:(NSDKMLatLng *)origin destination:(NSDKMLatLng *)destination vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("requestRouteData(origin:destination:vehicleConfig:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorRouteProvider.GetRouteBody")))
@interface NSDKMKtorRouteProviderGetRouteBody : NSDKMBase
@property (class, readonly, getter=companion) NSDKMKtorRouteProviderGetRouteBodyCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSArray<NSDKMKtorRouteProviderProbeDto *> *probes __attribute__((swift_name("probes")));
- (instancetype)initWithProbes:(NSArray<NSDKMKtorRouteProviderProbeDto *> *)probes __attribute__((swift_name("init(probes:)"))) __attribute__((objc_designated_initializer));
- (NSDKMKtorRouteProviderGetRouteBody *)doCopyProbes:(NSArray<NSDKMKtorRouteProviderProbeDto *> *)probes __attribute__((swift_name("doCopy(probes:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorRouteProvider.GetRouteBodyCompanion")))
@interface NSDKMKtorRouteProviderGetRouteBodyCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtorRouteProviderGetRouteBodyCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorRouteProvider.ProbeDto")))
@interface NSDKMKtorRouteProviderProbeDto : NSDKMBase
@property (class, readonly, getter=companion) NSDKMKtorRouteProviderProbeDtoCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSDKMDouble * _Nullable heading __attribute__((swift_name("heading")));
@property (readonly) double latitude __attribute__((swift_name("latitude")));
@property (readonly) NSDKMInt * _Nullable level __attribute__((swift_name("level")));
@property (readonly) double longitude __attribute__((swift_name("longitude")));
@property (readonly) NSString *provider __attribute__((swift_name("provider")));
@property (readonly) NSDKMDouble * _Nullable speedMps __attribute__((swift_name("speedMps")));
@property (readonly) int64_t timestampUnixMs __attribute__((swift_name("timestampUnixMs")));
- (instancetype)initWithProvider:(NSString *)provider timestampUnixMs:(int64_t)timestampUnixMs latitude:(double)latitude longitude:(double)longitude speedMps:(NSDKMDouble * _Nullable)speedMps heading:(NSDKMDouble * _Nullable)heading level:(NSDKMInt * _Nullable)level __attribute__((swift_name("init(provider:timestampUnixMs:latitude:longitude:speedMps:heading:level:)"))) __attribute__((objc_designated_initializer));
- (NSDKMKtorRouteProviderProbeDto *)doCopyProvider:(NSString *)provider timestampUnixMs:(int64_t)timestampUnixMs latitude:(double)latitude longitude:(double)longitude speedMps:(NSDKMDouble * _Nullable)speedMps heading:(NSDKMDouble * _Nullable)heading level:(NSDKMInt * _Nullable)level __attribute__((swift_name("doCopy(provider:timestampUnixMs:latitude:longitude:speedMps:heading:level:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorRouteProvider.ProbeDtoCompanion")))
@interface NSDKMKtorRouteProviderProbeDtoCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtorRouteProviderProbeDtoCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProviderRouteNotFoundException")))
@interface NSDKMRouteProviderRouteNotFoundException : NSDKMKotlinException
@property (readonly) NSDKMRouteProviderRouteRequest *routeRequest __attribute__((swift_name("routeRequest")));
- (instancetype)initWithMessage:(NSString *)message routeRequest:(NSDKMRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("init(message:routeRequest:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProviderRouteRequest")))
@interface NSDKMRouteProviderRouteRequest : NSDKMFreezable
@property (readonly) BOOL comparisonRoute __attribute__((swift_name("comparisonRoute")));
@property (readonly) NSDKMRouteProviderRouteRequestDestination *destination __attribute__((swift_name("destination")));
@property (readonly) BOOL forceRoute __attribute__((swift_name("forceRoute")));
@property (readonly) NSArray<NSDKMLocation *> *locationTrail __attribute__((swift_name("locationTrail")));
@property (readonly) NSDKMLocation *origin __attribute__((swift_name("origin")));
@property (readonly) NSDKMRoute * _Nullable previousRoute __attribute__((swift_name("previousRoute")));
@property (readonly) NSString * _Nullable sessionId __attribute__((swift_name("sessionId")));
@property (readonly) NSDKMRouteProviderType *type __attribute__((swift_name("type")));
@property (readonly) id<NSDKMVehicleConfig> vehicleConfig __attribute__((swift_name("vehicleConfig")));
@property (readonly) BOOL verifyOffRoute __attribute__((swift_name("verifyOffRoute")));
- (instancetype)initWithOrigin:(NSDKMLocation *)origin forceRoute:(BOOL)forceRoute type:(NSDKMRouteProviderType *)type verifyOffRoute:(BOOL)verifyOffRoute sessionId:(NSString * _Nullable)sessionId destination:(NSDKMRouteProviderRouteRequestDestination *)destination comparisonRoute:(BOOL)comparisonRoute previousRoute:(NSDKMRoute * _Nullable)previousRoute vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig locationTrail:(NSArray<NSDKMLocation *> *)locationTrail __attribute__((swift_name("init(origin:forceRoute:type:verifyOffRoute:sessionId:destination:comparisonRoute:previousRoute:vehicleConfig:locationTrail:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteProviderRouteRequest *)doCopyOrigin:(NSDKMLocation *)origin forceRoute:(BOOL)forceRoute type:(NSDKMRouteProviderType *)type verifyOffRoute:(BOOL)verifyOffRoute sessionId:(NSString * _Nullable)sessionId destination:(NSDKMRouteProviderRouteRequestDestination *)destination comparisonRoute:(BOOL)comparisonRoute previousRoute:(NSDKMRoute * _Nullable)previousRoute vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig locationTrail:(NSArray<NSDKMLocation *> *)locationTrail __attribute__((swift_name("doCopy(origin:forceRoute:type:verifyOffRoute:sessionId:destination:comparisonRoute:previousRoute:vehicleConfig:locationTrail:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProviderRouteRequest.Destination")))
@interface NSDKMRouteProviderRouteRequestDestination : NSDKMBase
@property (readonly) NSDKMDouble * _Nullable approachHeading __attribute__((swift_name("approachHeading")));
@property (readonly) NSDKMLatLng * _Nullable parkingLocation __attribute__((swift_name("parkingLocation")));
@property (readonly) id<NSDKMRoutable> routable __attribute__((swift_name("routable")));
@property (readonly) NSString * _Nullable streetName __attribute__((swift_name("streetName")));
- (instancetype)initWithRoutable:(id<NSDKMRoutable>)routable approachHeading:(NSDKMDouble * _Nullable)approachHeading streetName:(NSString * _Nullable)streetName parkingLocation:(NSDKMLatLng * _Nullable)parkingLocation __attribute__((swift_name("init(routable:approachHeading:streetName:parkingLocation:)"))) __attribute__((objc_designated_initializer));
- (NSDKMRouteProviderRouteRequestDestination *)doCopyRoutable:(id<NSDKMRoutable>)routable approachHeading:(NSDKMDouble * _Nullable)approachHeading streetName:(NSString * _Nullable)streetName parkingLocation:(NSDKMLatLng * _Nullable)parkingLocation __attribute__((swift_name("doCopy(routable:approachHeading:streetName:parkingLocation:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProviderType")))
@interface NSDKMRouteProviderType : NSDKMKotlinEnum<NSDKMRouteProviderType *>
@property (class, readonly) NSDKMRouteProviderType *light __attribute__((swift_name("light")));
@property (class, readonly) NSDKMRouteProviderType *full __attribute__((swift_name("full")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMRouteProviderType *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("RoutingConfig")))
@protocol NSDKMRoutingConfig
@required
@property (readonly) NSString *instanceId __attribute__((swift_name("instanceId")));
@property (readonly) NSString *serviceUrl __attribute__((swift_name("serviceUrl")));
@end

__attribute__((swift_name("RoutingParamProvider")))
@protocol NSDKMRoutingParamProvider
@required
- (NSDictionary<NSString *, NSString *> *)getRoutingParametersRequest:(NSDKMRouteProviderRouteRequest *)request __attribute__((swift_name("getRoutingParameters(request:)")));
@end

__attribute__((swift_name("LocationTrailProvider")))
@protocol NSDKMLocationTrailProvider
@required
@property (readonly) NSArray<NSDKMLocation *> *trail __attribute__((swift_name("trail")));
@end

__attribute__((swift_name("RouteDtoConverter")))
@protocol NSDKMRouteDtoConverter
@required

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMRoute * _Nullable)convertRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest routeDto:(NSDKMRouteDto *)routeDto previousRoute:(NSDKMRoute * _Nullable)previousRoute origin:(NSDKMLatLng * _Nullable)origin destination:(id<NSDKMRoutable> _Nullable)destination error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("convert(routeRequest:routeDto:previousRoute:origin:destination:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMRouteData * _Nullable)convertRouteDataDto:(NSDKMRouteDataDto *)routeDataDto error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("convert(routeDataDto:)")));
@end

__attribute__((swift_name("FullRouteDtoConverter")))
@interface NSDKMFullRouteDtoConverter : NSDKMBase <NSDKMRouteDtoConverter>
@property (class, readonly, getter=companion) NSDKMFullRouteDtoConverterCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)initWithTimeProvider:(id<NSDKMTimeProvider>)timeProvider __attribute__((swift_name("init(timeProvider:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMRoute * _Nullable)convertRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest routeDto:(NSDKMRouteDto *)routeDto previousRoute:(NSDKMRoute * _Nullable)previousRoute origin:(NSDKMLatLng * _Nullable)origin destination:(id<NSDKMRoutable> _Nullable)destination error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("convert(routeRequest:routeDto:previousRoute:origin:destination:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMRouteData * _Nullable)convertRouteDataDto:(NSDKMRouteDataDto *)routeDataDto error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("convert(routeDataDto:)")));
- (NSArray<NSDKMRouteDestinationInfo *> *)convertDestinationInfoDestinationInfoDtos:(NSArray<NSDKMRouteDtoDestinationInfo *> *)destinationInfoDtos __attribute__((swift_name("convertDestinationInfo(destinationInfoDtos:)")));
- (NSDKMDuration *)convertNextUpdateCallNextRefreshInterval:(NSString *)nextRefreshInterval __attribute__((swift_name("convertNextUpdateCall(nextRefreshInterval:)")));
- (NSDKMDuration *)convertRemainingTravelTimeRemainingTravelTime:(NSString *)remainingTravelTime __attribute__((swift_name("convertRemainingTravelTime(remainingTravelTime:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FullRouteDtoConverter.Companion")))
@interface NSDKMFullRouteDtoConverterCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMFullRouteDtoConverterCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *TAG __attribute__((swift_name("TAG")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MergingRouteDtoConverter")))
@interface NSDKMMergingRouteDtoConverter : NSDKMFullRouteDtoConverter
- (instancetype)initWithTimeProvider:(id<NSDKMTimeProvider>)timeProvider __attribute__((swift_name("init(timeProvider:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSDKMRoute * _Nullable)convertRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest routeDto:(NSDKMRouteDto *)routeDto previousRoute:(NSDKMRoute * _Nullable)previousRoute origin:(NSDKMLatLng * _Nullable)origin destination:(id<NSDKMRoutable> _Nullable)destination error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("convert(routeRequest:routeDto:previousRoute:origin:destination:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDataDto")))
@interface NSDKMRouteDataDto : NSDKMBase
@property (class, readonly, getter=companion) NSDKMRouteDataDtoCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSString *duration __attribute__((swift_name("duration")));
@property (readonly) double length __attribute__((swift_name("length")));
- (instancetype)initWithDuration:(NSString *)duration length:(double)length __attribute__((swift_name("init(duration:length:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDataDto.Companion")))
@interface NSDKMRouteDataDtoCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteDataDtoCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto")))
@interface NSDKMRouteDto : NSDKMFreezable
@property (class, readonly, getter=companion) NSDKMRouteDtoCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSArray<NSDKMRouteDtoDestinationInfo *> * _Nullable destinationInfo __attribute__((swift_name("destinationInfo")));
@property (readonly) NSString * _Nullable duration __attribute__((swift_name("duration")));
@property (readonly, getter=hash_) NSString *hash __attribute__((swift_name("hash")));
@property (readonly) double length __attribute__((swift_name("length")));
@property (readonly) NSString * _Nullable localizedInfo __attribute__((swift_name("localizedInfo")));
@property (readonly) NSString *nextRefreshInterval __attribute__((swift_name("nextRefreshInterval")));
@property (readonly) NSDKMBoolean * _Nullable offRoute __attribute__((swift_name("offRoute")));
@property (readonly) NSDKMDouble * _Nullable offRouteLikelyDisplacementMetres __attribute__((swift_name("offRouteLikelyDisplacementMetres")));
@property (readonly) NSArray<NSDKMRouteDtoRouteLeg *> * _Nullable routeLegs __attribute__((swift_name("routeLegs")));
@property (readonly) NSString * _Nullable trafficVolume __attribute__((swift_name("trafficVolume")));
@property (readonly) NSString * _Nullable vehicleType __attribute__((swift_name("vehicleType")));
- (instancetype)initWithHash:(NSString *)hash vehicleType:(NSString * _Nullable)vehicleType destinationInfo:(NSArray<NSDKMRouteDtoDestinationInfo *> * _Nullable)destinationInfo duration:(NSString * _Nullable)duration length:(double)length nextRefreshInterval:(NSString *)nextRefreshInterval routeLegs:(NSArray<NSDKMRouteDtoRouteLeg *> * _Nullable)routeLegs trafficVolume:(NSString * _Nullable)trafficVolume localizedInfo:(NSString * _Nullable)localizedInfo offRoute:(NSDKMBoolean * _Nullable)offRoute offRouteLikelyDisplacementMetres:(NSDKMDouble * _Nullable)offRouteLikelyDisplacementMetres __attribute__((swift_name("init(hash:vehicleType:destinationInfo:duration:length:nextRefreshInterval:routeLegs:trafficVolume:localizedInfo:offRoute:offRouteLikelyDisplacementMetres:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteDto *)doCopyHash:(NSString *)hash vehicleType:(NSString * _Nullable)vehicleType destinationInfo:(NSArray<NSDKMRouteDtoDestinationInfo *> * _Nullable)destinationInfo duration:(NSString * _Nullable)duration length:(double)length nextRefreshInterval:(NSString *)nextRefreshInterval routeLegs:(NSArray<NSDKMRouteDtoRouteLeg *> * _Nullable)routeLegs trafficVolume:(NSString * _Nullable)trafficVolume localizedInfo:(NSString * _Nullable)localizedInfo offRoute:(NSDKMBoolean * _Nullable)offRoute offRouteLikelyDisplacementMetres:(NSDKMDouble * _Nullable)offRouteLikelyDisplacementMetres __attribute__((swift_name("doCopy(hash:vehicleType:destinationInfo:duration:length:nextRefreshInterval:routeLegs:trafficVolume:localizedInfo:offRoute:offRouteLikelyDisplacementMetres:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.Companion")))
@interface NSDKMRouteDtoCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteDtoCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.DestinationInfo")))
@interface NSDKMRouteDtoDestinationInfo : NSDKMFreezable
@property (class, readonly, getter=companion) NSDKMRouteDtoDestinationInfoCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSDKMDouble * _Nullable destinationReachedDistanceMeters __attribute__((swift_name("destinationReachedDistanceMeters")));
@property (readonly) NSDKMRouteDtoGeoPoint *location __attribute__((swift_name("location")));
@property (readonly) NSDictionary<NSString *, id> *tags __attribute__((swift_name("tags")));
@property (readonly) NSString *type __attribute__((swift_name("type")));
- (instancetype)initWithLocation:(NSDKMRouteDtoGeoPoint *)location type:(NSString *)type tags:(NSDictionary<NSString *, id> *)tags destinationReachedDistanceMeters:(NSDKMDouble * _Nullable)destinationReachedDistanceMeters __attribute__((swift_name("init(location:type:tags:destinationReachedDistanceMeters:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteDtoDestinationInfo *)doCopyLocation:(NSDKMRouteDtoGeoPoint *)location type:(NSString *)type tags:(NSDictionary<NSString *, id> *)tags destinationReachedDistanceMeters:(NSDKMDouble * _Nullable)destinationReachedDistanceMeters __attribute__((swift_name("doCopy(location:type:tags:destinationReachedDistanceMeters:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.DestinationInfoCompanion")))
@interface NSDKMRouteDtoDestinationInfoCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteDtoDestinationInfoCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.Enforcement")))
@interface NSDKMRouteDtoEnforcement : NSDKMFreezable
@property (class, readonly, getter=companion) NSDKMRouteDtoEnforcementCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSDKMRouteDtoGeoPoint *location __attribute__((swift_name("location")));
@property (readonly) NSString *type __attribute__((swift_name("type")));
- (instancetype)initWithLocation:(NSDKMRouteDtoGeoPoint *)location type:(NSString *)type __attribute__((swift_name("init(location:type:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteDtoEnforcement *)doCopyLocation:(NSDKMRouteDtoGeoPoint *)location type:(NSString *)type __attribute__((swift_name("doCopy(location:type:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.EnforcementCompanion")))
@interface NSDKMRouteDtoEnforcementCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteDtoEnforcementCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.GeoPoint")))
@interface NSDKMRouteDtoGeoPoint : NSDKMFreezable
@property (class, readonly, getter=companion) NSDKMRouteDtoGeoPointCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) double latitude __attribute__((swift_name("latitude")));
@property (readonly) double longitude __attribute__((swift_name("longitude")));
- (instancetype)initWithLatitude:(double)latitude longitude:(double)longitude __attribute__((swift_name("init(latitude:longitude:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteDtoGeoPoint *)doCopyLatitude:(double)latitude longitude:(double)longitude __attribute__((swift_name("doCopy(latitude:longitude:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.GeoPointCompanion")))
@interface NSDKMRouteDtoGeoPointCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteDtoGeoPointCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLeg")))
@interface NSDKMRouteDtoRouteLeg : NSDKMFreezable
@property (class, readonly, getter=companion) NSDKMRouteDtoRouteLegCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) double destinationRoadOffset __attribute__((swift_name("destinationRoadOffset")));
@property (readonly) NSArray<NSDKMRouteDtoRouteLegFuelStation *> * _Nullable fuelStations __attribute__((swift_name("fuelStations")));
@property (readonly) NSArray<NSDKMRouteDtoRouteLegParkingArea *> * _Nullable parkingAreas __attribute__((swift_name("parkingAreas")));
@property (readonly) NSArray<NSDKMRouteDtoRouteLegStep *> *steps __attribute__((swift_name("steps")));
- (instancetype)initWithDestinationRoadOffset:(double)destinationRoadOffset steps:(NSArray<NSDKMRouteDtoRouteLegStep *> *)steps fuelStations:(NSArray<NSDKMRouteDtoRouteLegFuelStation *> * _Nullable)fuelStations parkingAreas:(NSArray<NSDKMRouteDtoRouteLegParkingArea *> * _Nullable)parkingAreas __attribute__((swift_name("init(destinationRoadOffset:steps:fuelStations:parkingAreas:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteDtoRouteLeg *)doCopyDestinationRoadOffset:(double)destinationRoadOffset steps:(NSArray<NSDKMRouteDtoRouteLegStep *> *)steps fuelStations:(NSArray<NSDKMRouteDtoRouteLegFuelStation *> * _Nullable)fuelStations parkingAreas:(NSArray<NSDKMRouteDtoRouteLegParkingArea *> * _Nullable)parkingAreas __attribute__((swift_name("doCopy(destinationRoadOffset:steps:fuelStations:parkingAreas:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegCompanion")))
@interface NSDKMRouteDtoRouteLegCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteDtoRouteLegCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegFuelStation")))
@interface NSDKMRouteDtoRouteLegFuelStation : NSDKMFreezable
@property (class, readonly, getter=companion) NSDKMRouteDtoRouteLegFuelStationCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) double distance __attribute__((swift_name("distance")));
@property (readonly) NSDKMRouteDtoGeoPoint *location __attribute__((swift_name("location")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@property (readonly) NSArray<NSString *> * _Nullable types __attribute__((swift_name("types")));
- (instancetype)initWithLocation:(NSDKMRouteDtoGeoPoint *)location distance:(double)distance name:(NSString * _Nullable)name types:(NSArray<NSString *> * _Nullable)types __attribute__((swift_name("init(location:distance:name:types:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteDtoRouteLegFuelStation *)doCopyLocation:(NSDKMRouteDtoGeoPoint *)location distance:(double)distance name:(NSString * _Nullable)name types:(NSArray<NSString *> * _Nullable)types __attribute__((swift_name("doCopy(location:distance:name:types:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegFuelStationCompanion")))
@interface NSDKMRouteDtoRouteLegFuelStationCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteDtoRouteLegFuelStationCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegParkingArea")))
@interface NSDKMRouteDtoRouteLegParkingArea : NSDKMFreezable
@property (class, readonly, getter=companion) NSDKMRouteDtoRouteLegParkingAreaCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) double distanceToDestinationMetres __attribute__((swift_name("distanceToDestinationMetres")));
@property (readonly) NSDKMBoolean * _Nullable liableToFee __attribute__((swift_name("liableToFee")));
@property (readonly) NSDKMRouteDtoGeoPoint *location __attribute__((swift_name("location")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@property (readonly) NSString *type __attribute__((swift_name("type")));
- (instancetype)initWithName:(NSString * _Nullable)name location:(NSDKMRouteDtoGeoPoint *)location liableToFee:(NSDKMBoolean * _Nullable)liableToFee type:(NSString *)type distanceToDestinationMetres:(double)distanceToDestinationMetres __attribute__((swift_name("init(name:location:liableToFee:type:distanceToDestinationMetres:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteDtoRouteLegParkingArea *)doCopyName:(NSString * _Nullable)name location:(NSDKMRouteDtoGeoPoint *)location liableToFee:(NSDKMBoolean * _Nullable)liableToFee type:(NSString *)type distanceToDestinationMetres:(double)distanceToDestinationMetres __attribute__((swift_name("doCopy(name:location:liableToFee:type:distanceToDestinationMetres:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegParkingAreaCompanion")))
@interface NSDKMRouteDtoRouteLegParkingAreaCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteDtoRouteLegParkingAreaCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegStep")))
@interface NSDKMRouteDtoRouteLegStep : NSDKMFreezable
@property (class, readonly, getter=companion) NSDKMRouteDtoRouteLegStepCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) double anticipatedSpeed __attribute__((swift_name("anticipatedSpeed")));
@property (readonly) NSArray<NSDKMRouteDtoEnforcement *> * _Nullable enforcements __attribute__((swift_name("enforcements")));
@property NSString * _Nullable expectedGpsQuality __attribute__((swift_name("expectedGpsQuality")));
@property (readonly) NSArray<NSDKMRouteDtoGeoPoint *> *geoPoints __attribute__((swift_name("geoPoints")));
@property (readonly) NSDKMDouble * _Nullable laneAssistDisplayDistance __attribute__((swift_name("laneAssistDisplayDistance")));
@property (readonly) NSArray<NSDKMRouteDtoRouteLegStepLane *> * _Nullable lanes __attribute__((swift_name("lanes")));
@property (readonly) NSDKMInt * _Nullable level __attribute__((swift_name("level")));
@property (readonly) NSString * _Nullable roadClass __attribute__((swift_name("roadClass")));
@property (readonly) NSDKMInt * _Nullable speedLimit __attribute__((swift_name("speedLimit")));
@property (readonly) NSDKMRouteDtoRouteLegStepTurnInfo *turnInfo __attribute__((swift_name("turnInfo")));
- (instancetype)initWithAnticipatedSpeed:(double)anticipatedSpeed geoPoints:(NSArray<NSDKMRouteDtoGeoPoint *> *)geoPoints enforcements:(NSArray<NSDKMRouteDtoEnforcement *> * _Nullable)enforcements expectedGpsQuality:(NSString * _Nullable)expectedGpsQuality lanes:(NSArray<NSDKMRouteDtoRouteLegStepLane *> * _Nullable)lanes laneAssistDisplayDistance:(NSDKMDouble * _Nullable)laneAssistDisplayDistance roadClass:(NSString * _Nullable)roadClass speedLimit:(NSDKMInt * _Nullable)speedLimit turnInfo:(NSDKMRouteDtoRouteLegStepTurnInfo *)turnInfo level:(NSDKMInt * _Nullable)level __attribute__((swift_name("init(anticipatedSpeed:geoPoints:enforcements:expectedGpsQuality:lanes:laneAssistDisplayDistance:roadClass:speedLimit:turnInfo:level:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteDtoRouteLegStep *)doCopyAnticipatedSpeed:(double)anticipatedSpeed geoPoints:(NSArray<NSDKMRouteDtoGeoPoint *> *)geoPoints enforcements:(NSArray<NSDKMRouteDtoEnforcement *> * _Nullable)enforcements expectedGpsQuality:(NSString * _Nullable)expectedGpsQuality lanes:(NSArray<NSDKMRouteDtoRouteLegStepLane *> * _Nullable)lanes laneAssistDisplayDistance:(NSDKMDouble * _Nullable)laneAssistDisplayDistance roadClass:(NSString * _Nullable)roadClass speedLimit:(NSDKMInt * _Nullable)speedLimit turnInfo:(NSDKMRouteDtoRouteLegStepTurnInfo *)turnInfo level:(NSDKMInt * _Nullable)level __attribute__((swift_name("doCopy(anticipatedSpeed:geoPoints:enforcements:expectedGpsQuality:lanes:laneAssistDisplayDistance:roadClass:speedLimit:turnInfo:level:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegStepCompanion")))
@interface NSDKMRouteDtoRouteLegStepCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteDtoRouteLegStepCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegStepLane")))
@interface NSDKMRouteDtoRouteLegStepLane : NSDKMFreezable
@property (class, readonly, getter=companion) NSDKMRouteDtoRouteLegStepLaneCompanion *companion __attribute__((swift_name("companion")));
@property NSArray<NSString *> *laneTurns __attribute__((swift_name("laneTurns")));
@property BOOL shouldUse __attribute__((swift_name("shouldUse")));
- (instancetype)initWithLaneTurns:(NSArray<NSString *> *)laneTurns shouldUse:(BOOL)shouldUse __attribute__((swift_name("init(laneTurns:shouldUse:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteDtoRouteLegStepLane *)doCopyLaneTurns:(NSArray<NSString *> *)laneTurns shouldUse:(BOOL)shouldUse __attribute__((swift_name("doCopy(laneTurns:shouldUse:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegStepLaneCompanion")))
@interface NSDKMRouteDtoRouteLegStepLaneCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteDtoRouteLegStepLaneCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegStepTurnInfo")))
@interface NSDKMRouteDtoRouteLegStepTurnInfo : NSDKMFreezable
@property (class, readonly, getter=companion) NSDKMRouteDtoRouteLegStepTurnInfoCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSDKMFloat * _Nullable angle __attribute__((swift_name("angle")));
@property (readonly) NSArray<NSString *> *directionNames __attribute__((swift_name("directionNames")));
@property (readonly) NSArray<NSString *> *directionReferenceNames __attribute__((swift_name("directionReferenceNames")));
@property (readonly) BOOL isEndOfStreet __attribute__((swift_name("isEndOfStreet")));
@property (readonly) NSDKMInt * _Nullable leadsToLevel __attribute__((swift_name("leadsToLevel")));
@property (readonly) NSString * _Nullable leadsToRoadClass __attribute__((swift_name("leadsToRoadClass")));
@property (readonly) NSString * _Nullable leadsToStreetName __attribute__((swift_name("leadsToStreetName")));
@property (readonly) BOOL shouldSuppressTurnCommand __attribute__((swift_name("shouldSuppressTurnCommand")));
@property (readonly) NSString *turnCommand __attribute__((swift_name("turnCommand")));
@property (readonly) NSDKMFloat * _Nullable turnCost __attribute__((swift_name("turnCost")));
- (instancetype)initWithIsEndOfStreet:(BOOL)isEndOfStreet shouldSuppressTurnCommand:(BOOL)shouldSuppressTurnCommand directionNames:(NSArray<NSString *> *)directionNames directionReferenceNames:(NSArray<NSString *> *)directionReferenceNames turnCommand:(NSString *)turnCommand turnCost:(NSDKMFloat * _Nullable)turnCost angle:(NSDKMFloat * _Nullable)angle leadsToRoadClass:(NSString * _Nullable)leadsToRoadClass leadsToStreetName:(NSString * _Nullable)leadsToStreetName leadsToLevel:(NSDKMInt * _Nullable)leadsToLevel __attribute__((swift_name("init(isEndOfStreet:shouldSuppressTurnCommand:directionNames:directionReferenceNames:turnCommand:turnCost:angle:leadsToRoadClass:leadsToStreetName:leadsToLevel:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteDtoRouteLegStepTurnInfo *)doCopyIsEndOfStreet:(BOOL)isEndOfStreet shouldSuppressTurnCommand:(BOOL)shouldSuppressTurnCommand directionNames:(NSArray<NSString *> *)directionNames directionReferenceNames:(NSArray<NSString *> *)directionReferenceNames turnCommand:(NSString *)turnCommand turnCost:(NSDKMFloat * _Nullable)turnCost angle:(NSDKMFloat * _Nullable)angle leadsToRoadClass:(NSString * _Nullable)leadsToRoadClass leadsToStreetName:(NSString * _Nullable)leadsToStreetName leadsToLevel:(NSDKMInt * _Nullable)leadsToLevel __attribute__((swift_name("doCopy(isEndOfStreet:shouldSuppressTurnCommand:directionNames:directionReferenceNames:turnCommand:turnCost:angle:leadsToRoadClass:leadsToStreetName:leadsToLevel:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegStepTurnInfoCompanion")))
@interface NSDKMRouteDtoRouteLegStepTurnInfoCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteDtoRouteLegStepTurnInfoCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDtoConverterRouteConversionExceptions")))
@interface NSDKMRouteDtoConverterRouteConversionExceptions : NSDKMKotlinException
- (instancetype)initWithMessage:(NSString *)message throwable:(NSDKMKotlinThrowable * _Nullable)throwable __attribute__((swift_name("init(message:throwable:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("RouteMerger")))
@protocol NSDKMRouteMerger
@required
- (NSDKMRoute *)mergePrevious:(NSDKMRoute * _Nullable)previous new:(NSDKMRoute *)new_ __attribute__((swift_name("merge(previous:new:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CompleteRouteMerger")))
@interface NSDKMCompleteRouteMerger : NSDKMBase <NSDKMRouteMerger>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMRoute *)mergePrevious:(NSDKMRoute * _Nullable)previous new:(NSDKMRoute *)new_ __attribute__((swift_name("merge(previous:new:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteUtils_")))
@interface NSDKMRouteUtils_ : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteUtils_ *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)routeUtils __attribute__((swift_name("init()")));
- (BOOL)isFullRouteRoute:(NSDKMRoute *)route __attribute__((swift_name("isFullRoute(route:)")));
- (BOOL)isTurnCommandWaypoint:(NSDKMRouteWaypoint * _Nullable)waypoint __attribute__((swift_name("isTurnCommand(waypoint:)")));
@end

__attribute__((swift_name("OnRouteTracker")))
@protocol NSDKMOnRouteTracker
@required
- (void)addOnRouteStateListenerOnRouteStateListener:(id<NSDKMOnRouteTrackerOnRouteStateListener>)onRouteStateListener __attribute__((swift_name("addOnRouteStateListener(onRouteStateListener:)")));
@property (readonly) BOOL onRoute __attribute__((swift_name("onRoute")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChanceBasedOnRouteTracker")))
@interface NSDKMChanceBasedOnRouteTracker : NSDKMBase <NSDKMOnRouteTracker, NSDKMOnRouteProjectorOnRouteProjectorListener>
@property (class, readonly, getter=companion) NSDKMChanceBasedOnRouteTrackerCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL onRoute __attribute__((swift_name("onRoute")));
- (instancetype)initWithWeightedChanceCalculators:(NSArray<NSDKMWeightedChanceCalculator *> *)weightedChanceCalculators __attribute__((swift_name("init(weightedChanceCalculators:)"))) __attribute__((objc_designated_initializer));
- (void)addOnRouteStateListenerOnRouteStateListener:(id<NSDKMOnRouteTrackerOnRouteStateListener>)onRouteStateListener __attribute__((swift_name("addOnRouteStateListener(onRouteStateListener:)")));
- (void)onProjectionChangedProjectedLocation:(NSDKMOnRouteProjectorProjectedLocation *)projectedLocation __attribute__((swift_name("onProjectionChanged(projectedLocation:)")));
- (void)onRouteChangedRoute:(NSDKMRoute * _Nullable)route __attribute__((swift_name("onRouteChanged(route:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChanceBasedOnRouteTracker.Companion")))
@interface NSDKMChanceBasedOnRouteTrackerCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMChanceBasedOnRouteTrackerCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("ChanceCalculator")))
@protocol NSDKMChanceCalculator
@required
- (float)calculateChanceLocation:(NSDKMLocation *)location projectedProbe:(NSDKMOnRouteProjectorProjectedLocation *)projectedProbe __attribute__((swift_name("calculateChance(location:projectedProbe:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChanceCalculatorCompanion")))
@interface NSDKMChanceCalculatorCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMChanceCalculatorCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) float NOT_PROCESSABLE __attribute__((swift_name("NOT_PROCESSABLE"))) __attribute__((deprecated("Very ambiguous. Make result nullable.")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OnRouteTrackerState")))
@interface NSDKMOnRouteTrackerState : NSDKMKotlinEnum<NSDKMOnRouteTrackerState *>
@property (class, readonly) NSDKMOnRouteTrackerState *onRoute __attribute__((swift_name("onRoute")));
@property (class, readonly) NSDKMOnRouteTrackerState *offRoute __attribute__((swift_name("offRoute")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMOnRouteTrackerState *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("WeightedChanceCalculator")))
@interface NSDKMWeightedChanceCalculator : NSDKMBase <NSDKMChanceCalculator>
@property (readonly) float weight __attribute__((swift_name("weight")));
- (instancetype)initWithWeight:(float)weight __attribute__((swift_name("init(weight:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceBasedChanceCalculator")))
@interface NSDKMDistanceBasedChanceCalculator : NSDKMWeightedChanceCalculator
- (instancetype)initWithWeight:(float)weight __attribute__((swift_name("init(weight:)"))) __attribute__((objc_designated_initializer));
- (float)calculateChanceLocation:(NSDKMLocation *)location projectedProbe:(NSDKMOnRouteProjectorProjectedLocation *)projectedProbe __attribute__((swift_name("calculateChance(location:projectedProbe:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadingBasedChanceCalculator")))
@interface NSDKMHeadingBasedChanceCalculator : NSDKMWeightedChanceCalculator
@property (class, readonly, getter=companion) NSDKMHeadingBasedChanceCalculatorCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)initWithWeight:(float)weight minProcessableSpeed:(NSDKMSpeed *)minProcessableSpeed __attribute__((swift_name("init(weight:minProcessableSpeed:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithWeight:(float)weight __attribute__((swift_name("init(weight:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (float)calculateChanceLocation:(NSDKMLocation *)location projectedProbe:(NSDKMOnRouteProjectorProjectedLocation *)projectedProbe __attribute__((swift_name("calculateChance(location:projectedProbe:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadingBasedChanceCalculator.Companion")))
@interface NSDKMHeadingBasedChanceCalculatorCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMHeadingBasedChanceCalculatorCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LevelBasedChanceCalculator")))
@interface NSDKMLevelBasedChanceCalculator : NSDKMWeightedChanceCalculator
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithWeight:(float)weight __attribute__((swift_name("init(weight:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (float)calculateChanceLocation:(NSDKMLocation *)location projectedProbe:(NSDKMOnRouteProjectorProjectedLocation *)projectedProbe __attribute__((swift_name("calculateChance(location:projectedProbe:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnCommandAlignmentChanceCalculator")))
@interface NSDKMTurnCommandAlignmentChanceCalculator : NSDKMWeightedChanceCalculator
@property (class, readonly, getter=companion) NSDKMTurnCommandAlignmentChanceCalculatorCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)initWithWeight:(float)weight minProcessableSpeed:(NSDKMSpeed *)minProcessableSpeed __attribute__((swift_name("init(weight:minProcessableSpeed:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithWeight:(float)weight __attribute__((swift_name("init(weight:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (float)calculateChanceLocation:(NSDKMLocation *)location projectedProbe:(NSDKMOnRouteProjectorProjectedLocation *)projectedProbe __attribute__((swift_name("calculateChance(location:projectedProbe:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnCommandAlignmentChanceCalculator.Companion")))
@interface NSDKMTurnCommandAlignmentChanceCalculatorCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMTurnCommandAlignmentChanceCalculatorCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) float ACCURACY_FACTOR __attribute__((swift_name("ACCURACY_FACTOR")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("Routable")))
@protocol NSDKMRoutable
@required
@property (readonly) NSString * _Nullable destinationStreetName __attribute__((swift_name("destinationStreetName")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) NSString *label __attribute__((swift_name("label")));
@property (readonly) NSDKMLatLng *latLng __attribute__((swift_name("latLng")));
@end

__attribute__((swift_name("HeadingDependentRoutable")))
@protocol NSDKMHeadingDependentRoutable <NSDKMRoutable>
@required
@property (readonly) NSDKMDouble * _Nullable destinationHeading __attribute__((swift_name("destinationHeading")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LaneInfo")))
@interface NSDKMLaneInfo : NSDKMFreezable
@property (readonly) NSDKMLength *laneDisplayDistance __attribute__((swift_name("laneDisplayDistance")));
@property (readonly) NSArray<NSDKMLaneInfoLane *> *lanes __attribute__((swift_name("lanes")));
- (instancetype)initWithLaneDisplayDistance:(NSDKMLength *)laneDisplayDistance lanes:(NSArray<NSDKMLaneInfoLane *> *)lanes __attribute__((swift_name("init(laneDisplayDistance:lanes:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMLaneInfo *)doCopyLaneDisplayDistance:(NSDKMLength *)laneDisplayDistance lanes:(NSArray<NSDKMLaneInfoLane *> *)lanes __attribute__((swift_name("doCopy(laneDisplayDistance:lanes:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LaneInfo.Lane")))
@interface NSDKMLaneInfoLane : NSDKMFreezable
@property (readonly) NSArray<NSDKMLaneInfoLaneLaneTurn *> *turns __attribute__((swift_name("turns")));
@property (readonly) BOOL usable __attribute__((swift_name("usable")));
- (instancetype)initWithTurns:(NSArray<NSDKMLaneInfoLaneLaneTurn *> *)turns usable:(BOOL)usable __attribute__((swift_name("init(turns:usable:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMLaneInfoLane *)doCopyTurns:(NSArray<NSDKMLaneInfoLaneLaneTurn *> *)turns usable:(BOOL)usable __attribute__((swift_name("doCopy(turns:usable:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LaneInfo.LaneLaneTurn")))
@interface NSDKMLaneInfoLaneLaneTurn : NSDKMKotlinEnum<NSDKMLaneInfoLaneLaneTurn *>
@property (class, readonly) NSDKMLaneInfoLaneLaneTurn *invalid __attribute__((swift_name("invalid")));
@property (class, readonly) NSDKMLaneInfoLaneLaneTurn *laneLeft __attribute__((swift_name("laneLeft")));
@property (class, readonly) NSDKMLaneInfoLaneLaneTurn *laneRight __attribute__((swift_name("laneRight")));
@property (class, readonly) NSDKMLaneInfoLaneLaneTurn *laneSlightLeft __attribute__((swift_name("laneSlightLeft")));
@property (class, readonly) NSDKMLaneInfoLaneLaneTurn *laneSlightRight __attribute__((swift_name("laneSlightRight")));
@property (class, readonly) NSDKMLaneInfoLaneLaneTurn *laneUturn __attribute__((swift_name("laneUturn")));
@property (class, readonly) NSDKMLaneInfoLaneLaneTurn *mergeToLeft __attribute__((swift_name("mergeToLeft")));
@property (class, readonly) NSDKMLaneInfoLaneLaneTurn *mergeToRight __attribute__((swift_name("mergeToRight")));
@property (class, readonly) NSDKMLaneInfoLaneLaneTurn *through __attribute__((swift_name("through")));
@property (class, readonly) NSDKMLaneInfoLaneLaneTurn *unknown __attribute__((swift_name("unknown")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMLaneInfoLaneLaneTurn *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("ManagedRoutable")))
@protocol NSDKMManagedRoutable <NSDKMRoutable>
@required
@property (readonly) NSString * _Nullable destinationId __attribute__((swift_name("destinationId")));
@property NSDKMLatLng *managedPosition __attribute__((swift_name("managedPosition")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Maneuver")))
@interface NSDKMManeuver : NSDKMBase
@property (readonly) NSDKMLength *distanceFromPreviousManeuver __attribute__((swift_name("distanceFromPreviousManeuver")));
@property (readonly) NSDKMLaneInfo * _Nullable laneInfo __attribute__((swift_name("laneInfo")));
@property (readonly) NSDKMLatLng *latLng __attribute__((swift_name("latLng")));
@property (readonly) NSDKMLength *remainingDistance __attribute__((swift_name("remainingDistance")));
@property (readonly) NSDKMDuration *remainingTravelTime __attribute__((swift_name("remainingTravelTime")));
@property (readonly) NSDKMTurnInfo *turnInfo __attribute__((swift_name("turnInfo")));
@property (readonly) NSDKMRouteWaypoint *waypoint __attribute__((swift_name("waypoint"))) __attribute__((deprecated("Will be removed in the future. Only here for backwards compatibility")));
@property (readonly) int32_t waypointIndex __attribute__((swift_name("waypointIndex")));
- (instancetype)initWithWaypoint:(NSDKMRouteWaypoint *)waypoint waypointIndex:(int32_t)waypointIndex turnInfo:(NSDKMTurnInfo *)turnInfo laneInfo:(NSDKMLaneInfo * _Nullable)laneInfo remainingTravelTime:(NSDKMDuration *)remainingTravelTime remainingDistance:(NSDKMLength *)remainingDistance distanceFromPreviousManeuver:(NSDKMLength *)distanceFromPreviousManeuver __attribute__((swift_name("init(waypoint:waypointIndex:turnInfo:laneInfo:remainingTravelTime:remainingDistance:distanceFromPreviousManeuver:)"))) __attribute__((objc_designated_initializer));
- (NSDKMManeuver *)doCopyWaypoint:(NSDKMRouteWaypoint *)waypoint waypointIndex:(int32_t)waypointIndex turnInfo:(NSDKMTurnInfo *)turnInfo laneInfo:(NSDKMLaneInfo * _Nullable)laneInfo remainingTravelTime:(NSDKMDuration *)remainingTravelTime remainingDistance:(NSDKMLength *)remainingDistance distanceFromPreviousManeuver:(NSDKMLength *)distanceFromPreviousManeuver __attribute__((swift_name("doCopy(waypoint:waypointIndex:turnInfo:laneInfo:remainingTravelTime:remainingDistance:distanceFromPreviousManeuver:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("ParkingLocationRoutable")))
@protocol NSDKMParkingLocationRoutable <NSDKMRoutable>
@required
@property (readonly) NSDKMLatLng * _Nullable parkinglocation __attribute__((swift_name("parkinglocation")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RoadClass")))
@interface NSDKMRoadClass : NSDKMKotlinEnum<NSDKMRoadClass *>
@property (class, readonly, getter=companion) NSDKMRoadClassCompanion *companion __attribute__((swift_name("companion")));
@property (class, readonly) NSDKMRoadClass *unknown __attribute__((swift_name("unknown")));
@property (class, readonly) NSDKMRoadClass *motorway __attribute__((swift_name("motorway")));
@property (class, readonly) NSDKMRoadClass *motorwayLink __attribute__((swift_name("motorwayLink")));
@property (class, readonly) NSDKMRoadClass *trunk __attribute__((swift_name("trunk")));
@property (class, readonly) NSDKMRoadClass *trunkLink __attribute__((swift_name("trunkLink")));
@property (class, readonly) NSDKMRoadClass *primary __attribute__((swift_name("primary")));
@property (class, readonly) NSDKMRoadClass *primaryLink __attribute__((swift_name("primaryLink")));
@property (class, readonly) NSDKMRoadClass *secondary __attribute__((swift_name("secondary")));
@property (class, readonly) NSDKMRoadClass *secondaryLink __attribute__((swift_name("secondaryLink")));
@property (class, readonly) NSDKMRoadClass *tertiary __attribute__((swift_name("tertiary")));
@property (class, readonly) NSDKMRoadClass *tertiaryLink __attribute__((swift_name("tertiaryLink")));
@property (class, readonly) NSDKMRoadClass *livingStreet __attribute__((swift_name("livingStreet")));
@property (class, readonly) NSDKMRoadClass *residential __attribute__((swift_name("residential")));
@property (class, readonly) NSDKMRoadClass *unclassified __attribute__((swift_name("unclassified")));
@property (class, readonly) NSDKMRoadClass *service __attribute__((swift_name("service")));
@property (class, readonly) NSDKMRoadClass *road __attribute__((swift_name("road")));
@property (class, readonly) NSDKMRoadClass *construction __attribute__((swift_name("construction")));
@property (class, readonly) NSDKMRoadClass *escape __attribute__((swift_name("escape")));
@property (class, readonly) NSDKMRoadClass *track __attribute__((swift_name("track")));
@property (readonly) int32_t value __attribute__((swift_name("value")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMRoadClass *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RoadClass.Companion")))
@interface NSDKMRoadClassCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRoadClassCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMRoadClass *)fromString:(NSString * _Nullable)string __attribute__((swift_name("from(string:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RoutableFactory")))
@interface NSDKMRoutableFactory : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRoutableFactory *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)routableFactory __attribute__((swift_name("init()")));
- (id<NSDKMRoutable>)createLatLng:(NSDKMLatLng *)latLng __attribute__((swift_name("create(latLng:)")));
- (id<NSDKMRoutable>)createLatLng:(NSDKMLatLng *)latLng label:(NSString *)label __attribute__((swift_name("create(latLng:label:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route")))
@interface NSDKMRoute : NSDKMFreezable
@property (readonly) id<NSDKMRoutable> destination __attribute__((swift_name("destination")));
@property (readonly) NSArray<NSDKMRouteDestinationInfo *> *destinationInfo __attribute__((swift_name("destinationInfo")));
@property (readonly) NSDKMLength *distance __attribute__((swift_name("distance")));
@property (readonly) NSArray<NSDKMRouteEnforcement *> *enforcements __attribute__((swift_name("enforcements")));
@property (readonly) NSArray<NSDKMRouteFuelStation *> *fuelStation __attribute__((swift_name("fuelStation")));
@property (readonly) BOOL hasAnticipatedSpeed __attribute__((swift_name("hasAnticipatedSpeed")));
@property (readonly, getter=hash_) NSString * _Nullable hash __attribute__((swift_name("hash")));
@property (readonly) NSString * _Nullable localizedInfo __attribute__((swift_name("localizedInfo")));
@property (readonly) NSDKMLength * _Nullable minOffRouteDisplacement __attribute__((swift_name("minOffRouteDisplacement")));
@property (readonly) NSDKMDuration *nextUpdateCall __attribute__((swift_name("nextUpdateCall")));
@property (readonly) NSDKMLatLng *origin __attribute__((swift_name("origin")));
@property (readonly) NSDKMBoolean * _Nullable originWasOffRoute __attribute__((swift_name("originWasOffRoute")));
@property (readonly) NSArray<NSDKMRouteParkingArea *> *parkingAreas __attribute__((swift_name("parkingAreas")));
@property (readonly) NSDKMDuration *remainingTravelTime __attribute__((swift_name("remainingTravelTime")));
@property (readonly) NSArray<NSDKMRouteRouteDelta *> *routeDeltas __attribute__((swift_name("routeDeltas")));
@property (readonly) NSArray<NSDKMRouteStep *> *steps __attribute__((swift_name("steps")));
@property (readonly) NSArray<NSDKMRouteWaypoint *> *turnCommands __attribute__((swift_name("turnCommands")));
@property (readonly) int64_t updateTimestamp __attribute__((swift_name("updateTimestamp")));
@property (readonly) id<NSDKMVehicleConfig> vehicleConfig __attribute__((swift_name("vehicleConfig")));
@property (readonly) NSArray<NSDKMRouteWaypoint *> *waypoints __attribute__((swift_name("waypoints")));
- (instancetype)initWithHash:(NSString * _Nullable)hash vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig waypoints:(NSArray<NSDKMRouteWaypoint *> *)waypoints steps:(NSArray<NSDKMRouteStep *> *)steps turnCommands:(NSArray<NSDKMRouteWaypoint *> *)turnCommands nextUpdateCall:(NSDKMDuration *)nextUpdateCall remainingTravelTime:(NSDKMDuration *)remainingTravelTime updateTimestamp:(int64_t)updateTimestamp distance:(NSDKMLength *)distance destination:(id<NSDKMRoutable>)destination destinationInfo:(NSArray<NSDKMRouteDestinationInfo *> *)destinationInfo origin:(NSDKMLatLng *)origin enforcements:(NSArray<NSDKMRouteEnforcement *> *)enforcements hasAnticipatedSpeed:(BOOL)hasAnticipatedSpeed fuelStation:(NSArray<NSDKMRouteFuelStation *> *)fuelStation localizedInfo:(NSString * _Nullable)localizedInfo originWasOffRoute:(NSDKMBoolean * _Nullable)originWasOffRoute minOffRouteDisplacement:(NSDKMLength * _Nullable)minOffRouteDisplacement parkingAreas:(NSArray<NSDKMRouteParkingArea *> *)parkingAreas routeDeltas:(NSArray<NSDKMRouteRouteDelta *> *)routeDeltas __attribute__((swift_name("init(hash:vehicleConfig:waypoints:steps:turnCommands:nextUpdateCall:remainingTravelTime:updateTimestamp:distance:destination:destinationInfo:origin:enforcements:hasAnticipatedSpeed:fuelStation:localizedInfo:originWasOffRoute:minOffRouteDisplacement:parkingAreas:routeDeltas:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRoute *)doCopyHash:(NSString * _Nullable)hash vehicleConfig:(id<NSDKMVehicleConfig>)vehicleConfig waypoints:(NSArray<NSDKMRouteWaypoint *> *)waypoints steps:(NSArray<NSDKMRouteStep *> *)steps turnCommands:(NSArray<NSDKMRouteWaypoint *> *)turnCommands nextUpdateCall:(NSDKMDuration *)nextUpdateCall remainingTravelTime:(NSDKMDuration *)remainingTravelTime updateTimestamp:(int64_t)updateTimestamp distance:(NSDKMLength *)distance destination:(id<NSDKMRoutable>)destination destinationInfo:(NSArray<NSDKMRouteDestinationInfo *> *)destinationInfo origin:(NSDKMLatLng *)origin enforcements:(NSArray<NSDKMRouteEnforcement *> *)enforcements hasAnticipatedSpeed:(BOOL)hasAnticipatedSpeed fuelStation:(NSArray<NSDKMRouteFuelStation *> *)fuelStation localizedInfo:(NSString * _Nullable)localizedInfo originWasOffRoute:(NSDKMBoolean * _Nullable)originWasOffRoute minOffRouteDisplacement:(NSDKMLength * _Nullable)minOffRouteDisplacement parkingAreas:(NSArray<NSDKMRouteParkingArea *> *)parkingAreas routeDeltas:(NSArray<NSDKMRouteRouteDelta *> *)routeDeltas __attribute__((swift_name("doCopy(hash:vehicleConfig:waypoints:steps:turnCommands:nextUpdateCall:remainingTravelTime:updateTimestamp:distance:destination:destinationInfo:origin:enforcements:hasAnticipatedSpeed:fuelStation:localizedInfo:originWasOffRoute:minOffRouteDisplacement:parkingAreas:routeDeltas:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.DestinationInfo")))
@interface NSDKMRouteDestinationInfo : NSDKMFreezable
@property (readonly) NSDKMDouble * _Nullable destinationReachedDistanceMeters __attribute__((swift_name("destinationReachedDistanceMeters")));
@property (readonly) NSDKMLatLng *location __attribute__((swift_name("location")));
@property (readonly) NSDictionary<NSString *, id> *tags __attribute__((swift_name("tags")));
@property (readonly) NSString *type __attribute__((swift_name("type")));
- (instancetype)initWithType:(NSString *)type location:(NSDKMLatLng *)location tags:(NSDictionary<NSString *, id> *)tags destinationReachedDistanceMeters:(NSDKMDouble * _Nullable)destinationReachedDistanceMeters __attribute__((swift_name("init(type:location:tags:destinationReachedDistanceMeters:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteDestinationInfo *)doCopyType:(NSString *)type location:(NSDKMLatLng *)location tags:(NSDictionary<NSString *, id> *)tags destinationReachedDistanceMeters:(NSDKMDouble * _Nullable)destinationReachedDistanceMeters __attribute__((swift_name("doCopy(type:location:tags:destinationReachedDistanceMeters:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.Enforcement")))
@interface NSDKMRouteEnforcement : NSDKMFreezable
@property (readonly) int32_t associatedWaypointIndex __attribute__((swift_name("associatedWaypointIndex")));
@property (readonly) NSDKMLatLng *position __attribute__((swift_name("position")));
@property (readonly) NSDKMSpeed * _Nullable speedLimit __attribute__((swift_name("speedLimit")));
@property (readonly) NSDKMRouteEnforcementType *type __attribute__((swift_name("type")));
@property (readonly) NSArray<NSDKMLatLng *> *warningLine __attribute__((swift_name("warningLine")));
- (instancetype)initWithType:(NSDKMRouteEnforcementType *)type speedLimit:(NSDKMSpeed * _Nullable)speedLimit position:(NSDKMLatLng *)position warningLine:(NSArray<NSDKMLatLng *> *)warningLine associatedWaypointIndex:(int32_t)associatedWaypointIndex __attribute__((swift_name("init(type:speedLimit:position:warningLine:associatedWaypointIndex:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteEnforcement *)doCopyType:(NSDKMRouteEnforcementType *)type speedLimit:(NSDKMSpeed * _Nullable)speedLimit position:(NSDKMLatLng *)position warningLine:(NSArray<NSDKMLatLng *> *)warningLine associatedWaypointIndex:(int32_t)associatedWaypointIndex __attribute__((swift_name("doCopy(type:speedLimit:position:warningLine:associatedWaypointIndex:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.EnforcementType")))
@interface NSDKMRouteEnforcementType : NSDKMKotlinEnum<NSDKMRouteEnforcementType *>
@property (class, readonly) NSDKMRouteEnforcementType *maxSpeed __attribute__((swift_name("maxSpeed")));
@property (class, readonly) NSDKMRouteEnforcementType *trafficSignals __attribute__((swift_name("trafficSignals")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMRouteEnforcementType *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.FuelStation")))
@interface NSDKMRouteFuelStation : NSDKMFreezable <NSDKMRoutable>
@property (readonly) NSString * _Nullable destinationStreetName __attribute__((swift_name("destinationStreetName")));
@property (readonly) NSDKMLength *distance __attribute__((swift_name("distance")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) NSString *label __attribute__((swift_name("label")));
@property (readonly) NSDKMLatLng *latLng __attribute__((swift_name("latLng")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSDKMLatLng *position __attribute__((swift_name("position")));
@property (readonly) NSArray<NSDKMRouteFuelStationType *> *types __attribute__((swift_name("types")));
- (instancetype)initWithPosition:(NSDKMLatLng *)position name:(NSString *)name distance:(NSDKMLength *)distance types:(NSArray<NSDKMRouteFuelStationType *> *)types __attribute__((swift_name("init(position:name:distance:types:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteFuelStation *)doCopyPosition:(NSDKMLatLng *)position name:(NSString *)name distance:(NSDKMLength *)distance types:(NSArray<NSDKMRouteFuelStationType *> *)types __attribute__((swift_name("doCopy(position:name:distance:types:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.FuelStationType")))
@interface NSDKMRouteFuelStationType : NSDKMKotlinEnum<NSDKMRouteFuelStationType *>
@property (class, readonly) NSDKMRouteFuelStationType *fuel __attribute__((swift_name("fuel")));
@property (class, readonly) NSDKMRouteFuelStationType *electric __attribute__((swift_name("electric")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMRouteFuelStationType *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.ParkingArea")))
@interface NSDKMRouteParkingArea : NSDKMFreezable <NSDKMRoutable>
@property (readonly) NSString * _Nullable destinationStreetName __attribute__((swift_name("destinationStreetName")));
@property (readonly) NSDKMLength *distanceToDestination __attribute__((swift_name("distanceToDestination")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) NSString *label __attribute__((swift_name("label")));
@property (readonly) NSDKMLatLng *latLng __attribute__((swift_name("latLng")));
@property (readonly) NSDKMBoolean * _Nullable liableToFee __attribute__((swift_name("liableToFee")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@property (readonly) NSDKMRouteParkingAreaType *parkingType __attribute__((swift_name("parkingType")));
@property (readonly) NSDKMLatLng *position __attribute__((swift_name("position")));
- (instancetype)initWithName:(NSString * _Nullable)name position:(NSDKMLatLng *)position liableToFee:(NSDKMBoolean * _Nullable)liableToFee parkingType:(NSDKMRouteParkingAreaType *)parkingType distanceToDestination:(NSDKMLength *)distanceToDestination __attribute__((swift_name("init(name:position:liableToFee:parkingType:distanceToDestination:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteParkingArea *)doCopyName:(NSString * _Nullable)name position:(NSDKMLatLng *)position liableToFee:(NSDKMBoolean * _Nullable)liableToFee parkingType:(NSDKMRouteParkingAreaType *)parkingType distanceToDestination:(NSDKMLength *)distanceToDestination __attribute__((swift_name("doCopy(name:position:liableToFee:parkingType:distanceToDestination:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.ParkingAreaType")))
@interface NSDKMRouteParkingAreaType : NSDKMKotlinEnum<NSDKMRouteParkingAreaType *>
@property (class, readonly) NSDKMRouteParkingAreaType *unknown __attribute__((swift_name("unknown")));
@property (class, readonly) NSDKMRouteParkingAreaType *surface __attribute__((swift_name("surface")));
@property (class, readonly) NSDKMRouteParkingAreaType *underground __attribute__((swift_name("underground")));
@property (class, readonly) NSDKMRouteParkingAreaType *multiStorey __attribute__((swift_name("multiStorey")));
@property (class, readonly) NSDKMRouteParkingAreaType *rooftop __attribute__((swift_name("rooftop")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMRouteParkingAreaType *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.RouteDelta")))
@interface NSDKMRouteRouteDelta : NSDKMBase
@property (readonly) NSDKMDuration *deltaDuration __attribute__((swift_name("deltaDuration")));
@property (readonly) NSDKMLength *distance __attribute__((swift_name("distance")));
@property (readonly) NSDKMDuration *duration __attribute__((swift_name("duration")));
@property (readonly) int32_t endIndex __attribute__((swift_name("endIndex")));
@property (readonly) NSArray<NSDKMLatLng *> *polyline __attribute__((swift_name("polyline")));
@property (readonly) NSString *routeHash __attribute__((swift_name("routeHash")));
@property (readonly) int32_t startIndex __attribute__((swift_name("startIndex")));
- (instancetype)initWithRouteHash:(NSString *)routeHash polyline:(NSArray<NSDKMLatLng *> *)polyline distance:(NSDKMLength *)distance duration:(NSDKMDuration *)duration deltaDuration:(NSDKMDuration *)deltaDuration startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex __attribute__((swift_name("init(routeHash:polyline:distance:duration:deltaDuration:startIndex:endIndex:)"))) __attribute__((objc_designated_initializer));
- (NSDKMRouteRouteDelta *)doCopyRouteHash:(NSString *)routeHash polyline:(NSArray<NSDKMLatLng *> *)polyline distance:(NSDKMLength *)distance duration:(NSDKMDuration *)duration deltaDuration:(NSDKMDuration *)deltaDuration startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex __attribute__((swift_name("doCopy(routeHash:polyline:distance:duration:deltaDuration:startIndex:endIndex:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.Segment")))
@interface NSDKMRouteSegment : NSDKMFreezable
@property (readonly) NSDKMRouteWaypoint *end __attribute__((swift_name("end")));
@property (readonly) int32_t index __attribute__((swift_name("index")));
@property (readonly) NSDKMRouteWaypoint *start __attribute__((swift_name("start")));
- (instancetype)initWithSegment:(NSDKMRouteSegment *)segment __attribute__((swift_name("init(segment:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithIndex:(int32_t)index start:(NSDKMRouteWaypoint *)start end:(NSDKMRouteWaypoint *)end __attribute__((swift_name("init(index:start:end:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteSegment *)doCopyIndex:(int32_t)index start:(NSDKMRouteWaypoint *)start end:(NSDKMRouteWaypoint *)end __attribute__((swift_name("doCopy(index:start:end:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.Step")))
@interface NSDKMRouteStep : NSDKMBase
@property (readonly) NSDKMSpeed * _Nullable anticipatedSpeed __attribute__((swift_name("anticipatedSpeed")));
@property (readonly) NSDKMRouteWaypointGpsQuality *gpsQuality __attribute__((swift_name("gpsQuality")));
@property (readonly) NSArray<NSDKMLatLng *> *latLngs __attribute__((swift_name("latLngs")));
@property (readonly) NSDKMInt * _Nullable level __attribute__((swift_name("level")));
@property (readonly) NSDKMRoadClass *roadClass __attribute__((swift_name("roadClass")));
@property (readonly) NSDKMSpeed * _Nullable speedLimit __attribute__((swift_name("speedLimit")));
- (instancetype)initWithLatLngs:(NSArray<NSDKMLatLng *> *)latLngs turnInfo:(NSDKMTurnInfo * _Nullable)turnInfo laneInfo:(NSDKMLaneInfo * _Nullable)laneInfo anticipatedSpeed:(NSDKMSpeed * _Nullable)anticipatedSpeed speedLimit:(NSDKMSpeed * _Nullable)speedLimit roadClass:(NSDKMRoadClass *)roadClass gpsQuality:(NSDKMRouteWaypointGpsQuality *)gpsQuality level:(NSDKMInt * _Nullable)level __attribute__((swift_name("init(latLngs:turnInfo:laneInfo:anticipatedSpeed:speedLimit:roadClass:gpsQuality:level:)"))) __attribute__((objc_designated_initializer));
- (NSDKMRouteStep *)doCopyLatLngs:(NSArray<NSDKMLatLng *> *)latLngs turnInfo:(NSDKMTurnInfo * _Nullable)turnInfo laneInfo:(NSDKMLaneInfo * _Nullable)laneInfo anticipatedSpeed:(NSDKMSpeed * _Nullable)anticipatedSpeed speedLimit:(NSDKMSpeed * _Nullable)speedLimit roadClass:(NSDKMRoadClass *)roadClass gpsQuality:(NSDKMRouteWaypointGpsQuality *)gpsQuality level:(NSDKMInt * _Nullable)level __attribute__((swift_name("doCopy(latLngs:turnInfo:laneInfo:anticipatedSpeed:speedLimit:roadClass:gpsQuality:level:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.Waypoint")))
@interface NSDKMRouteWaypoint : NSDKMFreezable
@property (readonly) NSDKMSpeed * _Nullable anticipatedSpeed __attribute__((swift_name("anticipatedSpeed")));
@property (readonly) NSDKMRouteWaypointGpsQuality *gpsQuality __attribute__((swift_name("gpsQuality")));
@property (readonly) NSDKMLatLng *latLng __attribute__((swift_name("latLng")));
@property (readonly) NSDKMInt * _Nullable level __attribute__((swift_name("level")));
@property (readonly) NSDKMRoadClass *roadClass __attribute__((swift_name("roadClass")));
@property (readonly) NSDKMSpeed * _Nullable speedLimit __attribute__((swift_name("speedLimit")));
@property (readonly) NSDictionary<NSString *, id> *tags __attribute__((swift_name("tags")));
- (instancetype)initWithLatLng:(NSDKMLatLng *)latLng __attribute__((swift_name("init(latLng:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithAnticipatedSpeed:(NSDKMSpeed *)anticipatedSpeed __attribute__((swift_name("init(anticipatedSpeed:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithWaypoint:(NSDKMRouteWaypoint *)waypoint __attribute__((swift_name("init(waypoint:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLatLng:(NSDKMLatLng *)latLng turnInfo:(NSDKMTurnInfo * _Nullable)turnInfo laneInfo:(NSDKMLaneInfo * _Nullable)laneInfo tags:(NSDictionary<NSString *, id> *)tags anticipatedSpeed:(NSDKMSpeed * _Nullable)anticipatedSpeed speedLimit:(NSDKMSpeed * _Nullable)speedLimit roadClass:(NSDKMRoadClass *)roadClass gpsQuality:(NSDKMRouteWaypointGpsQuality *)gpsQuality level:(NSDKMInt * _Nullable)level __attribute__((swift_name("init(latLng:turnInfo:laneInfo:tags:anticipatedSpeed:speedLimit:roadClass:gpsQuality:level:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteWaypoint *)doCopyLatLng:(NSDKMLatLng *)latLng turnInfo:(NSDKMTurnInfo * _Nullable)turnInfo laneInfo:(NSDKMLaneInfo * _Nullable)laneInfo tags:(NSDictionary<NSString *, id> *)tags anticipatedSpeed:(NSDKMSpeed * _Nullable)anticipatedSpeed speedLimit:(NSDKMSpeed * _Nullable)speedLimit roadClass:(NSDKMRoadClass *)roadClass gpsQuality:(NSDKMRouteWaypointGpsQuality *)gpsQuality level:(NSDKMInt * _Nullable)level __attribute__((swift_name("doCopy(latLng:turnInfo:laneInfo:tags:anticipatedSpeed:speedLimit:roadClass:gpsQuality:level:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.WaypointGpsQuality")))
@interface NSDKMRouteWaypointGpsQuality : NSDKMKotlinEnum<NSDKMRouteWaypointGpsQuality *>
@property (class, readonly) NSDKMRouteWaypointGpsQuality *good __attribute__((swift_name("good")));
@property (class, readonly) NSDKMRouteWaypointGpsQuality *poor __attribute__((swift_name("poor")));
@property (class, readonly) NSDKMRouteWaypointGpsQuality *useless __attribute__((swift_name("useless")));
@property (class, readonly) NSDKMRouteWaypointGpsQuality *beaconOnly __attribute__((swift_name("beaconOnly")));
@property (class, readonly) NSDKMRouteWaypointGpsQuality *unknown __attribute__((swift_name("unknown")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMRouteWaypointGpsQuality *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteData")))
@interface NSDKMRouteData : NSDKMFreezable
@property (readonly) NSDKMLength *distance __attribute__((swift_name("distance")));
@property (readonly) NSDKMDuration *duration __attribute__((swift_name("duration")));
- (instancetype)initWithDuration:(NSDKMDuration *)duration distance:(NSDKMLength *)distance __attribute__((swift_name("init(duration:distance:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMRouteData *)doCopyDuration:(NSDKMDuration *)duration distance:(NSDKMLength *)distance __attribute__((swift_name("doCopy(duration:distance:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnCommand")))
@interface NSDKMTurnCommand : NSDKMKotlinEnum<NSDKMTurnCommand *>
@property (class, readonly, getter=companion) NSDKMTurnCommandCompanion *companion __attribute__((swift_name("companion")));
@property (class, readonly) NSDKMTurnCommand *unknown __attribute__((swift_name("unknown")));
@property (class, readonly) NSDKMTurnCommand *straight __attribute__((swift_name("straight")));
@property (class, readonly) NSDKMTurnCommand *left __attribute__((swift_name("left")));
@property (class, readonly) NSDKMTurnCommand *slightleft __attribute__((swift_name("slightleft")));
@property (class, readonly) NSDKMTurnCommand *sharpleft __attribute__((swift_name("sharpleft")));
@property (class, readonly) NSDKMTurnCommand *right __attribute__((swift_name("right")));
@property (class, readonly) NSDKMTurnCommand *slightright __attribute__((swift_name("slightright")));
@property (class, readonly) NSDKMTurnCommand *sharpright __attribute__((swift_name("sharpright")));
@property (class, readonly) NSDKMTurnCommand *uturn __attribute__((swift_name("uturn")));
@property (class, readonly) NSDKMTurnCommand *roundaboutstraight __attribute__((swift_name("roundaboutstraight")));
@property (class, readonly) NSDKMTurnCommand *roundaboutexit __attribute__((swift_name("roundaboutexit")));
@property (class, readonly) NSDKMTurnCommand *roundaboutentry __attribute__((swift_name("roundaboutentry")));
@property (class, readonly) NSDKMTurnCommand *rampexit __attribute__((swift_name("rampexit")));
@property (class, readonly) NSDKMTurnCommand *rampright __attribute__((swift_name("rampright")));
@property (class, readonly) NSDKMTurnCommand *rampleft __attribute__((swift_name("rampleft")));
@property (class, readonly) NSDKMTurnCommand *rampstraight __attribute__((swift_name("rampstraight")));
@property (class, readonly) NSDKMTurnCommand *roundaboutexit1 __attribute__((swift_name("roundaboutexit1")));
@property (class, readonly) NSDKMTurnCommand *roundaboutexit2 __attribute__((swift_name("roundaboutexit2")));
@property (class, readonly) NSDKMTurnCommand *roundaboutexit3 __attribute__((swift_name("roundaboutexit3")));
@property (class, readonly) NSDKMTurnCommand *roundaboutexit4 __attribute__((swift_name("roundaboutexit4")));
@property (class, readonly) NSDKMTurnCommand *roundaboutexit5 __attribute__((swift_name("roundaboutexit5")));
@property (class, readonly) NSDKMTurnCommand *roundaboutexit6 __attribute__((swift_name("roundaboutexit6")));
@property (class, readonly) NSDKMTurnCommand *roundaboutexit7 __attribute__((swift_name("roundaboutexit7")));
@property (class, readonly) NSDKMTurnCommand *roundaboutexit8 __attribute__((swift_name("roundaboutexit8")));
@property (class, readonly) NSDKMTurnCommand *roundaboutexit9 __attribute__((swift_name("roundaboutexit9")));
@property (class, readonly) NSDKMTurnCommand *roundaboutexit10 __attribute__((swift_name("roundaboutexit10")));
@property (class, readonly) NSDKMTurnCommand *destination __attribute__((swift_name("destination")));
@property (class, readonly) NSDKMTurnCommand *gateThrough __attribute__((swift_name("gateThrough")));
@property (class, readonly) NSDKMTurnCommand *parkingExit __attribute__((swift_name("parkingExit")));
@property (class, readonly) NSDKMTurnCommand *rampUp __attribute__((swift_name("rampUp")));
@property (class, readonly) NSDKMTurnCommand *rampDown __attribute__((swift_name("rampDown")));
@property (class, readonly) NSDKMTurnCommand *none __attribute__((swift_name("none")));
@property (readonly) int32_t id_ __attribute__((swift_name("id_")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMTurnCommand *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnCommand.Companion")))
@interface NSDKMTurnCommandCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMTurnCommandCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSArray<NSDKMTurnCommand *> *allCases __attribute__((swift_name("allCases")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnInfo")))
@interface NSDKMTurnInfo : NSDKMFreezable
@property (readonly) NSArray<NSString *> *directionNames __attribute__((swift_name("directionNames")));
@property (readonly) NSArray<NSString *> *directionReferenceNames __attribute__((swift_name("directionReferenceNames")));
@property (readonly) BOOL endOfStreet __attribute__((swift_name("endOfStreet")));
@property (readonly) NSDKMInt * _Nullable leadsToLevel __attribute__((swift_name("leadsToLevel")));
@property (readonly) NSDKMRoadClass *leadsToRoadClass __attribute__((swift_name("leadsToRoadClass")));
@property (readonly) NSString * _Nullable leadsToStreetName __attribute__((swift_name("leadsToStreetName")));
@property (readonly) NSDKMTurnInfoStreetSide *streetSide __attribute__((swift_name("streetSide"))) __attribute__((deprecated("This should not be here, since it's only used to determine the side of the street for the destination")));
@property (readonly) BOOL suppressed __attribute__((swift_name("suppressed")));
@property (readonly) NSDKMFloat * _Nullable turnAngle __attribute__((swift_name("turnAngle")));
@property (readonly) NSDKMTurnCommand *turnCommand __attribute__((swift_name("turnCommand")));
@property (readonly) NSDKMLong * _Nullable turnCostMs __attribute__((swift_name("turnCostMs")));
- (instancetype)initWithTurnCommand:(NSDKMTurnCommand *)turnCommand leadsToRoadClass:(NSDKMRoadClass *)leadsToRoadClass leadsToStreetName:(NSString * _Nullable)leadsToStreetName leadsToLevel:(NSDKMInt * _Nullable)leadsToLevel endOfStreet:(BOOL)endOfStreet turnCostMs:(NSDKMLong * _Nullable)turnCostMs turnAngle:(NSDKMFloat * _Nullable)turnAngle directionReferenceNames:(NSArray<NSString *> *)directionReferenceNames directionNames:(NSArray<NSString *> *)directionNames streetSide:(NSDKMTurnInfoStreetSide *)streetSide suppressed:(BOOL)suppressed __attribute__((swift_name("init(turnCommand:leadsToRoadClass:leadsToStreetName:leadsToLevel:endOfStreet:turnCostMs:turnAngle:directionReferenceNames:directionNames:streetSide:suppressed:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMTurnInfo *)doCopyTurnCommand:(NSDKMTurnCommand *)turnCommand leadsToRoadClass:(NSDKMRoadClass *)leadsToRoadClass leadsToStreetName:(NSString * _Nullable)leadsToStreetName leadsToLevel:(NSDKMInt * _Nullable)leadsToLevel endOfStreet:(BOOL)endOfStreet turnCostMs:(NSDKMLong * _Nullable)turnCostMs turnAngle:(NSDKMFloat * _Nullable)turnAngle directionReferenceNames:(NSArray<NSString *> *)directionReferenceNames directionNames:(NSArray<NSString *> *)directionNames streetSide:(NSDKMTurnInfoStreetSide *)streetSide suppressed:(BOOL)suppressed __attribute__((swift_name("doCopy(turnCommand:leadsToRoadClass:leadsToStreetName:leadsToLevel:endOfStreet:turnCostMs:turnAngle:directionReferenceNames:directionNames:streetSide:suppressed:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnInfo.StreetSide")))
@interface NSDKMTurnInfoStreetSide : NSDKMKotlinEnum<NSDKMTurnInfoStreetSide *>
@property (class, readonly) NSDKMTurnInfoStreetSide *none __attribute__((swift_name("none")));
@property (class, readonly) NSDKMTurnInfoStreetSide *left __attribute__((swift_name("left")));
@property (class, readonly) NSDKMTurnInfoStreetSide *right __attribute__((swift_name("right")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMTurnInfoStreetSide *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationLifeCycleAnalyticsLogger")))
@interface NSDKMNavigationLifeCycleAnalyticsLogger : NSDKMBase <NSDKMNavigationEventHandlerOnNavigationStartedListener, NSDKMNavigationEventHandlerOnNavigationStoppedListener, NSDKMNavigationEventHandlerOnDestinationReachedListener, NSDKMNavigationEventHandlerOnInitialRouteReceivedListener, NSDKMNavigationEventHandlerOnTrackingSpeedReachedListener, NSDKMNavigationEventHandlerOnLeavingDestinationListener, NSDKMOnCurrentDestinationChangedListener>
- (instancetype)initWithNavigationSdk:(id<NSDKMNavigationSdk>)navigationSdk __attribute__((swift_name("init(navigationSdk:)"))) __attribute__((objc_designated_initializer));
- (void)addStatisticsProviderStatisticsProvider:(id<NSDKMStatisticsProvider>)statisticsProvider __attribute__((swift_name("addStatisticsProvider(statisticsProvider:)")));
- (void)onCurrentDestinationChangedDestination:(id<NSDKMRoutable> _Nullable)destination __attribute__((swift_name("onCurrentDestinationChanged(destination:)")));
- (void)onDestinationReachedNavigationResult:(NSDKMNavigationResult *)navigationResult __attribute__((swift_name("onDestinationReached(navigationResult:)")));
- (void)onInitialRouteReceivedRoute:(NSDKMRoute *)route __attribute__((swift_name("onInitialRouteReceived(route:)")));
- (void)onLeavingDestinationRoutable:(id<NSDKMRoutable>)routable __attribute__((swift_name("onLeavingDestination(routable:)")));
- (void)onNavigationStartedRoutable:(id<NSDKMRoutable>)routable __attribute__((swift_name("onNavigationStarted(routable:)")));
- (void)onNavigationStopped __attribute__((swift_name("onNavigationStopped()")));
- (void)onTrackingSpeedReachedSpeed:(NSDKMSpeed *)speed __attribute__((swift_name("onTrackingSpeedReached(speed:)")));
@end

__attribute__((swift_name("VehicleConfig")))
@protocol NSDKMVehicleConfig
@required
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSDKMVehicleConfigProperties * _Nullable properties __attribute__((swift_name("properties")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GenericVehicleConfig")))
@interface NSDKMGenericVehicleConfig : NSDKMBase <NSDKMVehicleConfig>
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSDKMVehicleConfigProperties * _Nullable properties __attribute__((swift_name("properties")));
- (instancetype)initWithName:(NSString *)name properties:(NSDKMVehicleConfigProperties * _Nullable)properties __attribute__((swift_name("init(name:properties:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Templates")))
@interface NSDKMTemplates : NSDKMBase
@property (class, readonly, getter=shared) NSDKMTemplates *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMGenericVehicleConfig *BICYCLE __attribute__((swift_name("BICYCLE")));
@property (readonly) NSDKMGenericVehicleConfig *BUS __attribute__((swift_name("BUS")));
@property (readonly) NSDKMGenericVehicleConfig *CAR __attribute__((swift_name("CAR")));
@property (readonly) NSDKMGenericVehicleConfig *MOTORBIKE __attribute__((swift_name("MOTORBIKE")));
@property (readonly) NSDKMTruckConfig *TRUCK __attribute__((swift_name("TRUCK")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)templates __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TruckConfig")))
@interface NSDKMTruckConfig : NSDKMBase <NSDKMVehicleConfig>
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSDKMInt * _Nullable numberOfTrailers __attribute__((swift_name("numberOfTrailers")));
@property (readonly) NSDKMVehicleConfigProperties * _Nullable properties __attribute__((swift_name("properties")));
- (instancetype)initWithProperties:(NSDKMVehicleConfigProperties * _Nullable)properties numberOfTrailers:(NSDKMInt * _Nullable)numberOfTrailers __attribute__((swift_name("init(properties:numberOfTrailers:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("VehicleConfigDimensions")))
@interface NSDKMVehicleConfigDimensions : NSDKMBase
@property (readonly) NSDKMLength *height __attribute__((swift_name("height")));
@property (readonly) NSDKMLength *length __attribute__((swift_name("length")));
@property (readonly) NSDKMLength *width __attribute__((swift_name("width")));
- (instancetype)initWithWidth:(NSDKMLength *)width height:(NSDKMLength *)height length:(NSDKMLength *)length __attribute__((swift_name("init(width:height:length:)"))) __attribute__((objc_designated_initializer));
- (NSDKMVehicleConfigDimensions *)doCopyWidth:(NSDKMLength *)width height:(NSDKMLength *)height length:(NSDKMLength *)length __attribute__((swift_name("doCopy(width:height:length:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("VehicleConfigProperties")))
@interface NSDKMVehicleConfigProperties : NSDKMBase
@property (readonly) NSDictionary<NSString *, NSString *> *additionalData __attribute__((swift_name("additionalData")));
@property (readonly) NSDKMVehicleConfigDimensions * _Nullable dimensions __attribute__((swift_name("dimensions")));
@property (readonly) NSDKMDouble * _Nullable weightKg __attribute__((swift_name("weightKg")));
- (instancetype)initWithDimensions:(NSDKMVehicleConfigDimensions * _Nullable)dimensions weightKg:(NSDKMDouble * _Nullable)weightKg additionalData:(NSDictionary<NSString *, NSString *> *)additionalData __attribute__((swift_name("init(dimensions:weightKg:additionalData:)"))) __attribute__((objc_designated_initializer));
- (NSDKMVehicleConfigProperties *)doCopyDimensions:(NSDKMVehicleConfigDimensions * _Nullable)dimensions weightKg:(NSDKMDouble * _Nullable)weightKg additionalData:(NSDictionary<NSString *, NSString *> *)additionalData __attribute__((swift_name("doCopy(dimensions:weightKg:additionalData:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("Executor")))
@protocol NSDKMExecutor
@required
- (void)executeBlock:(void (^)(void))block __attribute__((swift_name("execute(block:)")));
- (id<NSDKMExecutorFuture>)executeDelayedDelay:(NSDKMDuration *)delay block:(void (^)(void))block __attribute__((swift_name("executeDelayed(delay:block:)")));
- (void)runOnUiThreadBlock:(void (^)(void))block __attribute__((swift_name("runOnUiThread(block:)"))) __attribute__((deprecated("Will be removed soon")));
- (id<NSDKMExecutorFuture>)scheduleUpdateRate:(NSDKMDuration *)updateRate block:(void (^)(void))block __attribute__((swift_name("schedule(updateRate:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineExecutor")))
@interface NSDKMCoroutineExecutor : NSDKMBase <NSDKMExecutor>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)executeBlock:(void (^)(void))block __attribute__((swift_name("execute(block:)")));
- (id<NSDKMExecutorFuture>)executeDelayedDelay:(NSDKMDuration *)delay block:(void (^)(void))block __attribute__((swift_name("executeDelayed(delay:block:)")));
- (void)runOnUiThreadBlock:(void (^)(void))block __attribute__((swift_name("runOnUiThread(block:)"))) __attribute__((deprecated("Will be removed soon")));
- (id<NSDKMExecutorFuture>)scheduleUpdateRate:(NSDKMDuration *)updateRate block:(void (^)(void))block __attribute__((swift_name("schedule(updateRate:block:)")));
@end

__attribute__((swift_name("ExecutorFuture")))
@protocol NSDKMExecutorFuture
@required
- (void)cancel __attribute__((swift_name("cancel()")));
@end

__attribute__((swift_name("TimeProvider")))
@protocol NSDKMTimeProvider
@required
@property (readonly) int64_t currentTimeMillis __attribute__((swift_name("currentTimeMillis")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FoundationTimeProvider")))
@interface NSDKMFoundationTimeProvider : NSDKMBase <NSDKMTimeProvider>
@property (readonly) int64_t currentTimeMillis __attribute__((swift_name("currentTimeMillis")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OperationQueueExecutor")))
@interface NSDKMOperationQueueExecutor : NSDKMBase <NSDKMExecutor>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)executeBlock:(void (^)(void))block __attribute__((swift_name("execute(block:)")));
- (id<NSDKMExecutorFuture>)executeDelayedDelay:(NSDKMDuration *)delay block:(void (^)(void))block __attribute__((swift_name("executeDelayed(delay:block:)")));
- (void)runOnUiThreadBlock:(void (^)(void))block __attribute__((swift_name("runOnUiThread(block:)"))) __attribute__((deprecated("Overrides deprecated member in 'net.graphmasters.multiplatform.core.Executor'. Will be removed soon")));
- (id<NSDKMExecutorFuture>)scheduleUpdateRate:(NSDKMDuration *)updateRate block:(void (^)(void))block __attribute__((swift_name("schedule(updateRate:block:)")));
@end

__attribute__((swift_name("Serializable")))
@protocol NSDKMSerializable
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CLLocationConverter")))
@interface NSDKMCLLocationConverter : NSDKMBase
@property (class, readonly, getter=shared) NSDKMCLLocationConverter *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)cLLocationConverter __attribute__((swift_name("init()")));
- (CLLocation *)convertLocation:(NSDKMLocation *)location __attribute__((swift_name("convert(location:)")));
- (NSDKMLocation * _Nullable)convertClLocation:(CLLocation *)clLocation __attribute__((swift_name("convert(clLocation:)")));
- (NSDKMLocation * _Nullable)convertClLocation:(CLLocation *)clLocation oldLocation:(NSDKMLocation * _Nullable)oldLocation __attribute__((swift_name("convert(clLocation:oldLocation:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CLLocationProvider")))
@interface NSDKMCLLocationProvider : NSDKMBase <NSDKMLocationProvider>
@property (readonly) BOOL active __attribute__((swift_name("active")));
@property (readonly) id<CLLocationManagerDelegate> delegate __attribute__((swift_name("delegate")));
@property (readonly) NSDKMLocation * _Nullable lastKnownLocation __attribute__((swift_name("lastKnownLocation")));
- (instancetype)initWithLocationManager:(CLLocationManager * _Nullable)locationManager __attribute__((swift_name("init(locationManager:)"))) __attribute__((objc_designated_initializer));
- (void)addLocationUpdateListenerLocationUpdateListener:(id<NSDKMLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("addLocationUpdateListener(locationUpdateListener:)")));
- (void)removeLocationUpdateListenerLocationUpdateListener:(id<NSDKMLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("removeLocationUpdateListener(locationUpdateListener:)")));
- (void)startLocationUpdates __attribute__((swift_name("startLocationUpdates()")));
- (void)stopLocationUpdates __attribute__((swift_name("stopLocationUpdates()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IteratingLocationProvider")))
@interface NSDKMIteratingLocationProvider : NSDKMBase <NSDKMLocationProvider>
@property (readonly) BOOL active __attribute__((swift_name("active")));
@property NSDKMLocation * _Nullable lastKnownLocation __attribute__((swift_name("lastKnownLocation")));
- (instancetype)initWithLocations:(NSArray<NSDKMLocation *> *)locations executor:(id<NSDKMExecutor>)executor __attribute__((swift_name("init(locations:executor:)"))) __attribute__((objc_designated_initializer));
- (void)addLocationUpdateListenerLocationUpdateListener:(id<NSDKMLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("addLocationUpdateListener(locationUpdateListener:)")));
- (void)removeLocationUpdateListenerLocationUpdateListener:(id<NSDKMLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("removeLocationUpdateListener(locationUpdateListener:)")));
- (void)startLocationUpdates __attribute__((swift_name("startLocationUpdates()")));
- (void)stopLocationUpdates __attribute__((swift_name("stopLocationUpdates()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Location.Companion")))
@interface NSDKMLocationCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMLocationCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("LocationProviderLocationUpdateListener")))
@protocol NSDKMLocationProviderLocationUpdateListener
@required
- (void)onLocationUpdatedLocation:(NSDKMLocation *)location __attribute__((swift_name("onLocationUpdated(location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GMLog")))
@interface NSDKMGMLog : NSDKMBase
@property (class, readonly, getter=shared) NSDKMGMLog *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)gMLog __attribute__((swift_name("init()")));
- (void)appendLogger:(id<NSDKMLogger>)logger __attribute__((swift_name("append(logger:)")));
- (void)dMessage:(NSString *)message __attribute__((swift_name("d(message:)")));
- (void)dTag:(NSString * _Nullable)tag message:(NSString *)message __attribute__((swift_name("d(tag:message:)")));
- (void)eMessage:(NSString *)message __attribute__((swift_name("e(message:)")));
- (void)eTag:(NSString * _Nullable)tag message:(NSString *)message __attribute__((swift_name("e(tag:message:)")));
- (void)eTag:(NSString * _Nullable)tag throwable:(NSDKMKotlinThrowable *)throwable __attribute__((swift_name("e(tag:throwable:)")));
- (void)eThrowable:(NSDKMKotlinThrowable *)throwable __attribute__((swift_name("e(throwable:)")));
- (void)iMessage:(NSString *)message __attribute__((swift_name("i(message:)")));
- (void)iTag:(NSString * _Nullable)tag message:(NSString *)message __attribute__((swift_name("i(tag:message:)")));
- (void)vMessage:(NSString *)message __attribute__((swift_name("v(message:)")));
- (void)vTag:(NSString * _Nullable)tag message:(NSString *)message __attribute__((swift_name("v(tag:message:)")));
- (void)wMessage:(NSString *)message __attribute__((swift_name("w(message:)")));
- (void)wTag:(NSString * _Nullable)tag message:(NSString *)message __attribute__((swift_name("w(tag:message:)")));
@end

__attribute__((swift_name("Logger")))
@protocol NSDKMLogger
@required
- (void)dTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("d(tag:msg:)")));
- (void)eTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("e(tag:msg:)")));
- (void)eTag:(NSString * _Nullable)tag throwable:(NSDKMKotlinThrowable *)throwable __attribute__((swift_name("e(tag:throwable:)")));
- (void)iTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("i(tag:msg:)")));
- (void)vTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("v(tag:msg:)")));
- (void)wTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("w(tag:msg:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrintLogger")))
@interface NSDKMPrintLogger : NSDKMBase <NSDKMLogger>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)dTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("d(tag:msg:)")));
- (void)eTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("e(tag:msg:)")));
- (void)eTag:(NSString * _Nullable)tag throwable:(NSDKMKotlinThrowable *)throwable __attribute__((swift_name("e(tag:throwable:)")));
- (void)iTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("i(tag:msg:)")));
- (void)vTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("v(tag:msg:)")));
- (void)wTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("w(tag:msg:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Duration")))
@interface NSDKMDuration : NSDKMBase <NSDKMSerializable, NSDKMKotlinComparable>
@property (class, readonly, getter=companion) NSDKMDurationCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)compareToOther:(NSDKMDuration *)other __attribute__((swift_name("compareTo(other:)")));
- (NSDKMDuration *)doCopyMilliseconds:(int64_t)milliseconds __attribute__((swift_name("doCopy(milliseconds:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (int64_t)hours __attribute__((swift_name("hours()"))) __attribute__((deprecated("Use wholeHours() instead.")));
- (int64_t)inWholeHours __attribute__((swift_name("inWholeHours()")));
- (int64_t)inWholeMilliseconds __attribute__((swift_name("inWholeMilliseconds()")));
- (int64_t)inWholeMinutes __attribute__((swift_name("inWholeMinutes()")));
- (int64_t)inWholeSeconds __attribute__((swift_name("inWholeSeconds()")));
- (int64_t)milliseconds __attribute__((swift_name("milliseconds()"))) __attribute__((deprecated("Will be removed in the future")));
- (NSDKMDuration *)minusOther:(NSDKMDuration *)other __attribute__((swift_name("minus(other:)")));
- (int64_t)minutes __attribute__((swift_name("minutes()"))) __attribute__((deprecated("Use wholeMinutes() instead.")));
- (NSDKMDuration *)plusOther:(NSDKMDuration *)other __attribute__((swift_name("plus(other:)")));
- (int64_t)seconds __attribute__((swift_name("seconds()"))) __attribute__((deprecated("Will be removed in the future")));
- (NSString *)description __attribute__((swift_name("description()")));
- (int64_t)wholeHours __attribute__((swift_name("wholeHours()"))) __attribute__((deprecated("Will be removed in the future")));
- (int64_t)wholeMilliseconds __attribute__((swift_name("wholeMilliseconds()"))) __attribute__((deprecated("Will be removed in the future")));
- (int64_t)wholeMinutes __attribute__((swift_name("wholeMinutes()"))) __attribute__((deprecated("Will be removed in the future")));
- (int64_t)wholeSeconds __attribute__((swift_name("wholeSeconds()"))) __attribute__((deprecated("Will be removed in the future")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Duration.Companion")))
@interface NSDKMDurationCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMDurationCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMDuration *ZERO __attribute__((swift_name("ZERO")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMDuration *)addFirst:(NSDKMDuration *)first second:(NSDKMDuration *)second __attribute__((swift_name("add(first:second:)"))) __attribute__((deprecated("Use default addition.")));
- (NSDKMDuration *)fromHoursHours:(int64_t)hours __attribute__((swift_name("fromHours(hours:)")));
- (NSDKMDuration *)fromMillisecondsMilliseconds:(int64_t)milliseconds __attribute__((swift_name("fromMilliseconds(milliseconds:)")));
- (NSDKMDuration *)fromMinutesMinutes:(int64_t)minutes __attribute__((swift_name("fromMinutes(minutes:)")));
- (NSDKMDuration *)fromSecondsSeconds:(int64_t)seconds __attribute__((swift_name("fromSeconds(seconds:)")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
- (NSDKMDuration *)subtractFirst:(NSDKMDuration *)first second:(NSDKMDuration *)second __attribute__((swift_name("subtract(first:second:)"))) __attribute__((deprecated("Use default subtraction.")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Length")))
@interface NSDKMLength : NSDKMBase <NSDKMKotlinComparable, NSDKMSerializable>
@property (class, readonly, getter=companion) NSDKMLengthCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)compareToOther:(NSDKMLength *)other __attribute__((swift_name("compareTo(other:)")));
- (NSDKMLength *)doCopyMeters:(double)meters __attribute__((swift_name("doCopy(meters:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (double)feet __attribute__((swift_name("feet()"))) __attribute__((deprecated("Will be removed in the future")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (double)inFeet __attribute__((swift_name("inFeet()")));
- (double)inKilometers __attribute__((swift_name("inKilometers()")));
- (double)inMeters __attribute__((swift_name("inMeters()")));
- (double)inMiles __attribute__((swift_name("inMiles()")));
- (double)kilometers __attribute__((swift_name("kilometers()"))) __attribute__((deprecated("Will be removed in the future")));
- (double)meters __attribute__((swift_name("meters()"))) __attribute__((deprecated("Will be removed in the future")));
- (double)miles __attribute__((swift_name("miles()"))) __attribute__((deprecated("Will be removed in the future")));
- (NSDKMLength *)minusOther:(NSDKMLength *)other __attribute__((swift_name("minus(other:)")));
- (NSDKMLength *)plusOther:(NSDKMLength *)other __attribute__((swift_name("plus(other:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Length.Companion")))
@interface NSDKMLengthCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMLengthCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) double SECONDS_TO_MILLISECONDS __attribute__((swift_name("SECONDS_TO_MILLISECONDS")));
@property (readonly) NSDKMLength *ZERO __attribute__((swift_name("ZERO")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMLength *)addFirst:(NSDKMLength *)first second:(NSDKMLength *)second __attribute__((swift_name("add(first:second:)")));
- (NSDKMLength *)fromKilometersKilometers:(double)kilometers __attribute__((swift_name("fromKilometers(kilometers:)")));
- (NSDKMLength *)fromMetersMeters:(double)meters __attribute__((swift_name("fromMeters(meters:)")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
- (NSDKMLength *)subtractFirst:(NSDKMLength *)first second:(NSDKMLength *)second __attribute__((swift_name("subtract(first:second:)")));
@end

__attribute__((swift_name("MeasurementSystemProvider")))
@protocol NSDKMMeasurementSystemProvider
@required
- (NSDKMMeasurementSystem *)getMeasurementSystem __attribute__((swift_name("getMeasurementSystem()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocaleMeasurementSystemProvider")))
@interface NSDKMLocaleMeasurementSystemProvider : NSDKMBase <NSDKMMeasurementSystemProvider>
- (instancetype)initWithLocale:(NSLocale *)locale __attribute__((swift_name("init(locale:)"))) __attribute__((objc_designated_initializer));
- (NSDKMMeasurementSystem *)getMeasurementSystem __attribute__((swift_name("getMeasurementSystem()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeasurementSystem")))
@interface NSDKMMeasurementSystem : NSDKMKotlinEnum<NSDKMMeasurementSystem *>
@property (class, readonly) NSDKMMeasurementSystem *metric __attribute__((swift_name("metric")));
@property (class, readonly) NSDKMMeasurementSystem *imperial __attribute__((swift_name("imperial")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMMeasurementSystem *> *)values __attribute__((swift_name("values()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Speed")))
@interface NSDKMSpeed : NSDKMBase <NSDKMSerializable>
@property (class, readonly, getter=companion) NSDKMSpeedCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)compareToOther:(NSDKMSpeed *)other __attribute__((swift_name("compareTo(other:)")));
- (NSDKMSpeed *)doCopyMs:(double)ms __attribute__((swift_name("doCopy(ms:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (double)inKmh __attribute__((swift_name("inKmh()")));
- (double)inMph __attribute__((swift_name("inMph()")));
- (double)inMs __attribute__((swift_name("inMs()")));
- (double)kmh __attribute__((swift_name("kmh()"))) __attribute__((deprecated("Will be removed in the future")));
- (double)mph __attribute__((swift_name("mph()"))) __attribute__((deprecated("Will be removed in the future")));
- (double)ms __attribute__((swift_name("ms()"))) __attribute__((deprecated("Will be removed in the future")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Speed.Companion")))
@interface NSDKMSpeedCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMSpeedCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) double KMH_TO_MS __attribute__((swift_name("KMH_TO_MS")));
@property (readonly) double MS_TO_MPH __attribute__((swift_name("MS_TO_MPH")));
@property (readonly) double SECONDS_TO_MILLISECONDS __attribute__((swift_name("SECONDS_TO_MILLISECONDS")));
@property (readonly) NSDKMSpeed *ZERO __attribute__((swift_name("ZERO")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMSpeed *)fromKmhKmh:(double)kmh __attribute__((swift_name("fromKmh(kmh:)")));
- (NSDKMSpeed *)fromMsMs:(double)ms __attribute__((swift_name("fromMs(ms:)")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Timestamp")))
@interface NSDKMTimestamp : NSDKMFreezable <NSDKMSerializable>
@property (class, readonly, getter=companion) NSDKMTimestampCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (int32_t)compareToOther:(NSDKMTimestamp *)other __attribute__((swift_name("compareTo(other:)")));
- (NSDKMTimestamp *)doCopyMillisecondsSince1970:(int64_t)millisecondsSince1970 __attribute__((swift_name("doCopy(millisecondsSince1970:)")));
- (NSDKMDuration *)deltaOther:(NSDKMTimestamp *)other __attribute__((swift_name("delta(other:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSDKMTimestamp *)minusOther:(NSDKMDuration *)other __attribute__((swift_name("minus(other:)")));
- (NSDKMTimestamp *)plusOther:(NSDKMDuration *)other __attribute__((swift_name("plus(other:)")));
- (NSString *)description __attribute__((swift_name("description()")));
- (int64_t)wholeMilliseconds __attribute__((swift_name("wholeMilliseconds()")));
- (int64_t)wholeSeconds __attribute__((swift_name("wholeSeconds()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Timestamp.Companion")))
@interface NSDKMTimestampCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMTimestampCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) int32_t SECONDS_TO_MILLISECONDS __attribute__((swift_name("SECONDS_TO_MILLISECONDS")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMTimestamp *)fromMillisecondsMilliseconds:(int64_t)milliseconds __attribute__((swift_name("fromMilliseconds(milliseconds:)")));
- (NSDKMTimestamp *)fromSecondsSeconds:(int64_t)seconds __attribute__((swift_name("fromSeconds(seconds:)")));
- (NSDKMTimestamp *)now __attribute__((swift_name("now()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((swift_name("AnalyticsHandler")))
@protocol NSDKMAnalyticsHandler
@required
- (void)postErrorThrowable:(NSDKMKotlinThrowable *)throwable properties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("postError(throwable:properties:)")));
- (void)postEventMessage:(NSString *)message properties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("postEvent(message:properties:)")));
- (void)postStatisticsMessage:(NSString *)message statistics:(NSDictionary<NSString *, id> *)statistics __attribute__((swift_name("postStatistics(message:statistics:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GMAnalytics")))
@interface NSDKMGMAnalytics : NSDKMBase
@property (class, readonly, getter=shared) NSDKMGMAnalytics *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)gMAnalytics __attribute__((swift_name("init()")));
- (void)appendAnalyticsHandler:(id<NSDKMAnalyticsHandler>)analyticsHandler __attribute__((swift_name("append(analyticsHandler:)")));

/**
 * @note annotations
 *   kotlin.jvm.JvmOverloads
*/
- (void)postErrorThrowable:(NSDKMKotlinThrowable *)throwable properties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("postError(throwable:properties:)")));
- (void)postEventMessage:(NSString *)message __attribute__((swift_name("postEvent(message:)")));
- (void)postEventTag:(NSString *)tag message:(NSString *)message __attribute__((swift_name("postEvent(tag:message:)")));
- (void)postEventTag:(NSString * _Nullable)tag message:(NSString *)message properties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("postEvent(tag:message:properties:)")));
- (void)postStatisticsTag:(NSString * _Nullable)tag message:(NSString *)message statistics:(NSDictionary<NSString *, id> *)statistics __attribute__((swift_name("postStatistics(tag:message:statistics:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineDispatchers")))
@interface NSDKMCoroutineDispatchers : NSDKMBase
@property (class, readonly, getter=shared) NSDKMCoroutineDispatchers *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKotlinx_coroutines_coreCoroutineDispatcher *Default __attribute__((swift_name("Default")));
@property (readonly) NSDKMKotlinx_coroutines_coreCoroutineDispatcher *IO __attribute__((swift_name("IO")));
@property (readonly) NSDKMKotlinx_coroutines_coreCoroutineDispatcher *Main __attribute__((swift_name("Main")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)coroutineDispatchers __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainThread")))
@interface NSDKMMainThread : NSDKMBase
@property (class, readonly, getter=shared) NSDKMMainThread *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)mainThread __attribute__((swift_name("init()")));
- (void)executeBlock:(void (^)(void))block __attribute__((swift_name("execute(block:)")));
- (BOOL)isCurrentThread __attribute__((swift_name("isCurrentThread()")));
@end

__attribute__((swift_name("OptimizationProblem")))
@protocol NSDKMOptimizationProblem
@required
@property (readonly) NSDKMIncrementor *evaluationCounter __attribute__((swift_name("evaluationCounter")));
@property (readonly) NSDKMIncrementor *iterationCounter __attribute__((swift_name("iterationCounter")));
@end

__attribute__((swift_name("AbstractOptimizationProblem")))
@interface NSDKMAbstractOptimizationProblem<PAIR> : NSDKMBase <NSDKMOptimizationProblem>
@property (class, readonly, getter=companion) NSDKMAbstractOptimizationProblemCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSDKMIncrementor *evaluationCounter __attribute__((swift_name("evaluationCounter")));
@property (readonly) NSDKMIncrementor *iterationCounter __attribute__((swift_name("iterationCounter")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (instancetype)initWithMaxEvaluations:(int32_t)maxEvaluations maxIterations:(int32_t)maxIterations __attribute__((swift_name("init(maxEvaluations:maxIterations:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AbstractOptimizationProblemCompanion")))
@interface NSDKMAbstractOptimizationProblemCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMAbstractOptimizationProblemCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("LeastSquaresProblemEvaluation")))
@protocol NSDKMLeastSquaresProblemEvaluation
@required
- (double)getCost __attribute__((swift_name("getCost()")));
- (id<NSDKMRealMatrix>)getCovariancesThreshold:(double)threshold __attribute__((swift_name("getCovariances(threshold:)")));
- (id<NSDKMRealMatrix>)getJacobian __attribute__((swift_name("getJacobian()")));
- (NSDKMRealVector *)getPoint __attribute__((swift_name("getPoint()")));
- (double)getRMS __attribute__((swift_name("getRMS()")));
- (NSDKMRealVector *)getResiduals __attribute__((swift_name("getResiduals()")));
- (NSDKMRealVector *)getSigmaCovarianceSingularityThreshold:(double)covarianceSingularityThreshold __attribute__((swift_name("getSigma(covarianceSingularityThreshold:)")));
@end

__attribute__((swift_name("AbstractEvaluation")))
@interface NSDKMAbstractEvaluation : NSDKMBase <NSDKMLeastSquaresProblemEvaluation>
- (double)getCost __attribute__((swift_name("getCost()")));
- (id<NSDKMRealMatrix>)getCovariancesThreshold:(double)threshold __attribute__((swift_name("getCovariances(threshold:)")));
- (double)getRMS __attribute__((swift_name("getRMS()")));
- (NSDKMRealVector *)getSigmaCovarianceSingularityThreshold:(double)covarianceSingularityThreshold __attribute__((swift_name("getSigma(covarianceSingularityThreshold:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DenseWeightedEvaluation")))
@interface NSDKMDenseWeightedEvaluation : NSDKMAbstractEvaluation
- (instancetype)initWithUnweighted:(id<NSDKMLeastSquaresProblemEvaluation>)unweighted weightSqrt:(id<NSDKMRealMatrix>)weightSqrt __attribute__((swift_name("init(unweighted:weightSqrt:)"))) __attribute__((objc_designated_initializer));
- (id<NSDKMRealMatrix>)getJacobian __attribute__((swift_name("getJacobian()")));
- (NSDKMRealVector *)getPoint __attribute__((swift_name("getPoint()")));
- (NSDKMRealVector *)getResiduals __attribute__((swift_name("getResiduals()")));
@end

__attribute__((swift_name("LeastSquaresProblem")))
@protocol NSDKMLeastSquaresProblem <NSDKMOptimizationProblem>
@required
- (id<NSDKMLeastSquaresProblemEvaluation>)evaluatePoint:(NSDKMRealVector *)point __attribute__((swift_name("evaluate(point:)")));
- (int32_t)getObservationSize __attribute__((swift_name("getObservationSize()")));
- (int32_t)getParameterSize __attribute__((swift_name("getParameterSize()")));
- (NSDKMRealVector *)getStart __attribute__((swift_name("getStart()")));
@end

__attribute__((swift_name("LeastSquaresAdapter")))
@interface NSDKMLeastSquaresAdapter : NSDKMBase <NSDKMLeastSquaresProblem>
@property (readonly) NSDKMIncrementor *evaluationCounter __attribute__((swift_name("evaluationCounter")));
@property (readonly) NSDKMIncrementor *iterationCounter __attribute__((swift_name("iterationCounter")));
- (instancetype)initWithProblem:(id<NSDKMLeastSquaresProblem>)problem __attribute__((swift_name("init(problem:)"))) __attribute__((objc_designated_initializer));
- (id<NSDKMLeastSquaresProblemEvaluation>)evaluatePoint:(NSDKMRealVector *)point __attribute__((swift_name("evaluate(point:)")));
- (int32_t)getObservationSize __attribute__((swift_name("getObservationSize()")));
- (int32_t)getParameterSize __attribute__((swift_name("getParameterSize()")));
- (NSDKMRealVector *)getStart __attribute__((swift_name("getStart()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LeastSquaresFactory")))
@interface NSDKMLeastSquaresFactory : NSDKMBase
@property (class, readonly, getter=companion) NSDKMLeastSquaresFactoryCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LeastSquaresFactory.Companion")))
@interface NSDKMLeastSquaresFactoryCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMLeastSquaresFactoryCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMLeastSquaresProblem>)createFunction:(id<NSDKMMultivariateJacobianFunction>)function observed:(NSDKMRealVector *)observed start:(NSDKMRealVector *)start weight:(id<NSDKMRealMatrix>)weight maxEvaluations:(int32_t)maxEvaluations maxIterations:(int32_t)maxIterations __attribute__((swift_name("create(function:observed:start:weight:maxEvaluations:maxIterations:)")));
@end

__attribute__((swift_name("LeastSquaresOptimizer")))
@protocol NSDKMLeastSquaresOptimizer
@required
- (id<NSDKMLeastSquaresOptimizerOptimum>)optimizeLeastSquaresProblem:(id<NSDKMLeastSquaresProblem>)leastSquaresProblem __attribute__((swift_name("optimize(leastSquaresProblem:)")));
@end

__attribute__((swift_name("LeastSquaresOptimizerOptimum")))
@protocol NSDKMLeastSquaresOptimizerOptimum <NSDKMLeastSquaresProblemEvaluation>
@required
- (int32_t)getEvaluations __attribute__((swift_name("getEvaluations()")));
- (int32_t)getIterations __attribute__((swift_name("getIterations()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LevenbergMarquardtOptimizer")))
@interface NSDKMLevenbergMarquardtOptimizer : NSDKMBase <NSDKMLeastSquaresOptimizer>
@property (class, readonly, getter=companion) NSDKMLevenbergMarquardtOptimizerCompanion *companion __attribute__((swift_name("companion")));

/**
 * @note annotations
 *   kotlin.jvm.JvmOverloads
*/
- (instancetype)initWithInitialStepBoundFactor:(double)initialStepBoundFactor costRelativeTolerance:(double)costRelativeTolerance parameterRelativeTolerance:(double)parameterRelativeTolerance orthoTolerance:(double)orthoTolerance rankingThreshold:(double)rankingThreshold __attribute__((swift_name("init(initialStepBoundFactor:costRelativeTolerance:parameterRelativeTolerance:orthoTolerance:rankingThreshold:)"))) __attribute__((objc_designated_initializer));
- (id<NSDKMLeastSquaresOptimizerOptimum>)optimizeLeastSquaresProblem:(id<NSDKMLeastSquaresProblem>)leastSquaresProblem __attribute__((swift_name("optimize(leastSquaresProblem:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LevenbergMarquardtOptimizer.Companion")))
@interface NSDKMLevenbergMarquardtOptimizerCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMLevenbergMarquardtOptimizerCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalLeastSquaresProblem")))
@interface NSDKMLocalLeastSquaresProblem : NSDKMAbstractOptimizationProblem<id<NSDKMLeastSquaresProblemEvaluation>> <NSDKMLeastSquaresProblem>
- (instancetype)initWithModel:(id<NSDKMMultivariateJacobianFunction>)model target:(NSDKMRealVector *)target start:(NSDKMRealVector *)start maxEvaluations:(int32_t)maxEvaluations maxIterations:(int32_t)maxIterations __attribute__((swift_name("init(model:target:start:maxEvaluations:maxIterations:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (instancetype)initWithMaxEvaluations:(int32_t)maxEvaluations maxIterations:(int32_t)maxIterations __attribute__((swift_name("init(maxEvaluations:maxIterations:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (id<NSDKMLeastSquaresProblemEvaluation>)evaluatePoint:(NSDKMRealVector *)point __attribute__((swift_name("evaluate(point:)")));
- (int32_t)getObservationSize __attribute__((swift_name("getObservationSize()")));
- (int32_t)getParameterSize __attribute__((swift_name("getParameterSize()")));
- (NSDKMRealVector *)getStart __attribute__((swift_name("getStart()")));
@end

__attribute__((swift_name("MultivariateJacobianFunction")))
@protocol NSDKMMultivariateJacobianFunction
@required
- (NSDKMPair<NSDKMRealVector *, id<NSDKMRealMatrix>> *)valuePoint:(NSDKMRealVector *)point __attribute__((swift_name("value(point:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OptimumImpl")))
@interface NSDKMOptimumImpl : NSDKMBase <NSDKMLeastSquaresOptimizerOptimum>
- (instancetype)initWithValue:(id<NSDKMLeastSquaresProblemEvaluation>)value evaluations:(int32_t)evaluations iterations:(int32_t)iterations __attribute__((swift_name("init(value:evaluations:iterations:)"))) __attribute__((objc_designated_initializer));
- (double)getCost __attribute__((swift_name("getCost()")));
- (id<NSDKMRealMatrix>)getCovariancesThreshold:(double)threshold __attribute__((swift_name("getCovariances(threshold:)")));
- (int32_t)getEvaluations __attribute__((swift_name("getEvaluations()")));
- (int32_t)getIterations __attribute__((swift_name("getIterations()")));
- (id<NSDKMRealMatrix>)getJacobian __attribute__((swift_name("getJacobian()")));
- (NSDKMRealVector *)getPoint __attribute__((swift_name("getPoint()")));
- (double)getRMS __attribute__((swift_name("getRMS()")));
- (NSDKMRealVector *)getResiduals __attribute__((swift_name("getResiduals()")));
- (NSDKMRealVector *)getSigmaCovarianceSingularityThreshold:(double)covarianceSingularityThreshold __attribute__((swift_name("getSigma(covarianceSingularityThreshold:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Precision")))
@interface NSDKMPrecision : NSDKMBase
@property (class, readonly, getter=companion) NSDKMPrecisionCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note annotations
 *   kotlin.jvm.JvmOverloads
*/
- (BOOL)equalsX:(double)x y:(double)y maxUlps:(int32_t)maxUlps __attribute__((swift_name("equals(x:y:maxUlps:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Precision.Companion")))
@interface NSDKMPrecisionCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMPrecisionCompanion *shared __attribute__((swift_name("shared")));
@property double EPSILON __attribute__((swift_name("EPSILON")));
@property double SAFE_MIN __attribute__((swift_name("SAFE_MIN")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("KotlinIterator")))
@protocol NSDKMKotlinIterator
@required
- (BOOL)hasNext __attribute__((swift_name("hasNext()")));
- (id _Nullable)next __attribute__((swift_name("next()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Incrementor")))
@interface NSDKMIncrementor : NSDKMBase <NSDKMKotlinIterator>
@property (class, readonly, getter=companion) NSDKMIncrementorCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) int32_t count __attribute__((swift_name("count")));
- (instancetype)initWithStart:(int32_t)start max:(int32_t)max step:(int32_t)step cb:(id<NSDKMIncrementorMaxCountExceededCallback>)cb __attribute__((swift_name("init(start:max:step:cb:)"))) __attribute__((objc_designated_initializer));
- (BOOL)hasNext __attribute__((swift_name("hasNext()")));

/**
 * @note annotations
 *   kotlin.jvm.JvmOverloads
*/
- (void)incrementNTimes:(int32_t)nTimes __attribute__((swift_name("increment(nTimes:)")));
- (NSDKMInt *)next __attribute__((swift_name("next()")));
- (NSDKMIncrementor *)withCallbackCb:(id<NSDKMIncrementorMaxCountExceededCallback>)cb __attribute__((swift_name("withCallback(cb:)")));
- (NSDKMIncrementor *)withMaximalCountMax:(int32_t)max __attribute__((swift_name("withMaximalCount(max:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Incrementor.Companion")))
@interface NSDKMIncrementorCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMIncrementorCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMIncrementor *)create __attribute__((swift_name("create()")));
@end

__attribute__((swift_name("IncrementorMaxCountExceededCallback")))
@protocol NSDKMIncrementorMaxCountExceededCallback
@required
- (void)triggerMaximalCount:(int32_t)maximalCount __attribute__((swift_name("trigger(maximalCount:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MatrixUtils")))
@interface NSDKMMatrixUtils : NSDKMBase
@property (class, readonly, getter=companion) NSDKMMatrixUtilsCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MatrixUtils.Companion")))
@interface NSDKMMatrixUtilsCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMMatrixUtilsCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (void)checkAdditionCompatibleLeft:(id<NSDKMAnyMatrix>)left right:(id<NSDKMAnyMatrix>)right __attribute__((swift_name("checkAdditionCompatible(left:right:)")));
- (void)checkColumnIndexM:(id<NSDKMAnyMatrix>)m column:(int32_t)column __attribute__((swift_name("checkColumnIndex(m:column:)")));
- (void)checkMatrixIndexM:(id<NSDKMAnyMatrix>)m row:(int32_t)row column:(int32_t)column __attribute__((swift_name("checkMatrixIndex(m:row:column:)")));
- (void)checkMultiplicationCompatibleLeft:(id<NSDKMAnyMatrix>)left right:(id<NSDKMAnyMatrix>)right __attribute__((swift_name("checkMultiplicationCompatible(left:right:)")));
- (void)checkRowIndexM:(id<NSDKMAnyMatrix>)m row:(int32_t)row __attribute__((swift_name("checkRowIndex(m:row:)")));
- (void)checkSubMatrixIndexM:(id<NSDKMAnyMatrix>)m startRow:(int32_t)startRow endRow:(int32_t)endRow startColumn:(int32_t)startColumn endColumn:(int32_t)endColumn __attribute__((swift_name("checkSubMatrixIndex(m:startRow:endRow:startColumn:endColumn:)")));
- (void)checkSubtractionCompatibleLeft:(id<NSDKMAnyMatrix>)left right:(id<NSDKMAnyMatrix>)right __attribute__((swift_name("checkSubtractionCompatible(left:right:)")));
- (id<NSDKMRealMatrix>)createRealIdentityMatrixDimension:(int32_t)dimension __attribute__((swift_name("createRealIdentityMatrix(dimension:)")));
@end

__attribute__((swift_name("Pair")))
@interface NSDKMPair<K, V> : NSDKMBase
@property (readonly) K _Nullable first __attribute__((swift_name("first")));
@property (readonly) V _Nullable second __attribute__((swift_name("second")));
- (instancetype)initWithFirst:(K _Nullable)first second:(V _Nullable)second __attribute__((swift_name("init(first:second:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("AnyMatrix")))
@protocol NSDKMAnyMatrix
@required
- (int32_t)getColumnDimension __attribute__((swift_name("getColumnDimension()")));
- (int32_t)getRowDimension __attribute__((swift_name("getRowDimension()")));
- (BOOL)isSquare __attribute__((swift_name("isSquare()")));
@end

__attribute__((swift_name("RealMatrix")))
@protocol NSDKMRealMatrix <NSDKMAnyMatrix>
@required
- (id<NSDKMRealMatrix>)addM:(id<NSDKMRealMatrix>)m __attribute__((swift_name("add(m:)")));
- (void)doCopySubMatrixStartRow:(int32_t)startRow endRow:(int32_t)endRow startColumn:(int32_t)startColumn endColumn:(int32_t)endColumn destination:(NSDKMKotlinArray<NSDKMKotlinDoubleArray *> *)destination __attribute__((swift_name("doCopySubMatrix(startRow:endRow:startColumn:endColumn:destination:)")));
- (id<NSDKMRealMatrix>)createMatrixRowDimension:(int32_t)rowDimension columnDimension:(int32_t)columnDimension __attribute__((swift_name("createMatrix(rowDimension:columnDimension:)")));
- (NSDKMKotlinArray<NSDKMKotlinDoubleArray *> *)getData __attribute__((swift_name("getData()")));
- (double)getEntryRow:(int32_t)row column:(int32_t)column __attribute__((swift_name("getEntry(row:column:)")));
- (id<NSDKMRealMatrix>)multiplyM:(id<NSDKMRealMatrix>)m __attribute__((swift_name("multiply(m:)")));
- (NSDKMRealVector *)operateV:(NSDKMRealVector *)v __attribute__((swift_name("operate(v:)")));
- (id<NSDKMRealMatrix>)scalarMultiplyD:(double)d __attribute__((swift_name("scalarMultiply(d:)")));
- (void)setEntryRow:(int32_t)row column:(int32_t)column value:(double)value __attribute__((swift_name("setEntry(row:column:value:)")));
- (id<NSDKMRealMatrix>)subtractM:(id<NSDKMRealMatrix>)m __attribute__((swift_name("subtract(m:)")));
- (id<NSDKMRealMatrix>)transpose __attribute__((swift_name("transpose()")));
- (double)walkInOptimizedOrderVisitor:(id<NSDKMRealMatrixPreservingVisitor>)visitor __attribute__((swift_name("walkInOptimizedOrder(visitor:)")));
@end

__attribute__((swift_name("AbstractRealMatrix")))
@interface NSDKMAbstractRealMatrix : NSDKMBase <NSDKMRealMatrix>
@property (class, readonly, getter=companion) NSDKMAbstractRealMatrixCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)initWithRows:(int32_t)rows columns:(int32_t)columns __attribute__((swift_name("init(rows:columns:)"))) __attribute__((objc_designated_initializer));
- (id<NSDKMRealMatrix>)addM:(id<NSDKMRealMatrix>)m __attribute__((swift_name("add(m:)")));
- (void)doCopySubMatrixStartRow:(int32_t)startRow endRow:(int32_t)endRow startColumn:(int32_t)startColumn endColumn:(int32_t)endColumn destination:(NSDKMKotlinArray<NSDKMKotlinDoubleArray *> *)destination __attribute__((swift_name("doCopySubMatrix(startRow:endRow:startColumn:endColumn:destination:)")));
- (id<NSDKMRealMatrix>)createMatrixRowDimension:(int32_t)rowDimension columnDimension:(int32_t)columnDimension __attribute__((swift_name("createMatrix(rowDimension:columnDimension:)")));
- (int32_t)getColumnDimension __attribute__((swift_name("getColumnDimension()")));
- (NSDKMKotlinArray<NSDKMKotlinDoubleArray *> *)getData __attribute__((swift_name("getData()")));
- (double)getEntryRow:(int32_t)row column:(int32_t)column __attribute__((swift_name("getEntry(row:column:)")));
- (int32_t)getRowDimension __attribute__((swift_name("getRowDimension()")));
- (BOOL)isSquare __attribute__((swift_name("isSquare()")));
- (id<NSDKMRealMatrix>)multiplyM:(id<NSDKMRealMatrix>)m __attribute__((swift_name("multiply(m:)")));
- (NSDKMRealVector *)operateV:(NSDKMRealVector *)v __attribute__((swift_name("operate(v:)")));
- (id<NSDKMRealMatrix>)scalarMultiplyD:(double)d __attribute__((swift_name("scalarMultiply(d:)")));
- (void)setEntryRow:(int32_t)row column:(int32_t)column value:(double)value __attribute__((swift_name("setEntry(row:column:value:)")));
- (void)setSubMatrixSubMatrix:(NSDKMKotlinArray<NSDKMKotlinDoubleArray *> *)subMatrix row:(int32_t)row column:(int32_t)column __attribute__((swift_name("setSubMatrix(subMatrix:row:column:)")));
- (id<NSDKMRealMatrix>)subtractM:(id<NSDKMRealMatrix>)m __attribute__((swift_name("subtract(m:)")));
- (id<NSDKMRealMatrix>)transpose __attribute__((swift_name("transpose()")));
- (double)walkInOptimizedOrderVisitor:(id<NSDKMRealMatrixPreservingVisitor>)visitor __attribute__((swift_name("walkInOptimizedOrder(visitor:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AbstractRealMatrix.Companion")))
@interface NSDKMAbstractRealMatrixCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMAbstractRealMatrixCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Array2DRowRealMatrix")))
@interface NSDKMArray2DRowRealMatrix : NSDKMAbstractRealMatrix
- (instancetype)initWithRowDimension:(int32_t)rowDimension columnDimension:(int32_t)columnDimension __attribute__((swift_name("init(rowDimension:columnDimension:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithData:(NSDKMKotlinArray<NSDKMKotlinDoubleArray *> *)data __attribute__((swift_name("init(data:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithRows:(int32_t)rows columns:(int32_t)columns __attribute__((swift_name("init(rows:columns:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (id<NSDKMRealMatrix>)createMatrixRowDimension:(int32_t)rowDimension columnDimension:(int32_t)columnDimension __attribute__((swift_name("createMatrix(rowDimension:columnDimension:)")));
- (int32_t)getColumnDimension __attribute__((swift_name("getColumnDimension()")));
- (NSDKMKotlinArray<NSDKMKotlinDoubleArray *> *)getData __attribute__((swift_name("getData()")));
- (double)getEntryRow:(int32_t)row column:(int32_t)column __attribute__((swift_name("getEntry(row:column:)")));
- (int32_t)getRowDimension __attribute__((swift_name("getRowDimension()")));
- (void)setEntryRow:(int32_t)row column:(int32_t)column value:(double)value __attribute__((swift_name("setEntry(row:column:value:)")));
@end

__attribute__((swift_name("RealVector")))
@interface NSDKMRealVector : NSDKMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)checkIndexIndex:(int32_t)index __attribute__((swift_name("checkIndex(index:)")));
- (NSDKMRealVector *)doCopy __attribute__((swift_name("doCopy()")));
- (double)dotProductV:(NSDKMRealVector *)v __attribute__((swift_name("dotProduct(v:)")));
- (int32_t)getDimension __attribute__((swift_name("getDimension()")));
- (double)getEntryIndex:(int32_t)index __attribute__((swift_name("getEntry(index:)")));
- (void)setEntryIndex:(int32_t)index value:(double)value __attribute__((swift_name("setEntry(index:value:)")));
- (NSDKMRealVector *)subtractV:(NSDKMRealVector *)v __attribute__((swift_name("subtract(v:)")));
- (NSDKMKotlinDoubleArray *)toArray __attribute__((swift_name("toArray()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ArrayRealVector")))
@interface NSDKMArrayRealVector : NSDKMRealVector
- (instancetype)initWithDim:(int32_t)dim __attribute__((swift_name("init(dim:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithV:(NSDKMRealVector *)v __attribute__((swift_name("init(v:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithV_:(NSDKMArrayRealVector *)v __attribute__((swift_name("init(v_:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithData:(NSDKMKotlinDoubleArray *)data __attribute__((swift_name("init(data:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMArrayRealVector *)doCopy __attribute__((swift_name("doCopy()")));
- (NSDKMKotlinDoubleArray *)getDataRef __attribute__((swift_name("getDataRef()")));
- (int32_t)getDimension __attribute__((swift_name("getDimension()")));
- (double)getEntryIndex:(int32_t)index __attribute__((swift_name("getEntry(index:)")));
- (void)setEntryIndex:(int32_t)index value:(double)value __attribute__((swift_name("setEntry(index:value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BlockRealMatrix")))
@interface NSDKMBlockRealMatrix : NSDKMAbstractRealMatrix
@property (class, readonly, getter=companion) NSDKMBlockRealMatrixCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)initWithRows:(int32_t)rows columns:(int32_t)columns __attribute__((swift_name("init(rows:columns:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithRows:(int32_t)rows columns:(int32_t)columns blocksData:(NSDKMKotlinArray<NSDKMKotlinDoubleArray *> *)blocksData __attribute__((swift_name("init(rows:columns:blocksData:)"))) __attribute__((objc_designated_initializer));
- (NSDKMBlockRealMatrix *)createMatrixRowDimension:(int32_t)rowDimension columnDimension:(int32_t)columnDimension __attribute__((swift_name("createMatrix(rowDimension:columnDimension:)")));
- (int32_t)getColumnDimension __attribute__((swift_name("getColumnDimension()")));
- (double)getEntryRow:(int32_t)row column:(int32_t)column __attribute__((swift_name("getEntry(row:column:)")));
- (int32_t)getRowDimension __attribute__((swift_name("getRowDimension()")));
- (void)setEntryRow:(int32_t)row column:(int32_t)column value:(double)value __attribute__((swift_name("setEntry(row:column:value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BlockRealMatrix.Companion")))
@interface NSDKMBlockRealMatrixCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMBlockRealMatrixCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) int32_t BLOCK_SIZE __attribute__((swift_name("BLOCK_SIZE")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMKotlinArray<NSDKMKotlinDoubleArray *> *)createBlocksLayoutRows:(int32_t)rows columns:(int32_t)columns __attribute__((swift_name("createBlocksLayout(rows:columns:)")));
@end

__attribute__((swift_name("DecompositionSolver")))
@protocol NSDKMDecompositionSolver
@required
- (id<NSDKMRealMatrix>)solveB:(id<NSDKMRealMatrix>)b __attribute__((swift_name("solve(b:)")));
@property (readonly, getter=inverse_) id<NSDKMRealMatrix> inverse __attribute__((swift_name("inverse")));
@property (readonly) BOOL isNonSingular __attribute__((swift_name("isNonSingular")));
@end

__attribute__((swift_name("RealMatrixPreservingVisitor")))
@protocol NSDKMRealMatrixPreservingVisitor
@required
- (double)end __attribute__((swift_name("end()")));
- (void)startRows:(int32_t)rows columns:(int32_t)columns startRow:(int32_t)startRow endRow:(int32_t)endRow startColumn:(int32_t)startColumn endColumn:(int32_t)endColumn __attribute__((swift_name("start(rows:columns:startRow:endRow:startColumn:endColumn:)")));
- (void)visitRow:(int32_t)row column:(int32_t)column value:(double)value __attribute__((swift_name("visit(row:column:value:)")));
@end

__attribute__((swift_name("DefaultRealMatrixPreservingVisitor")))
@interface NSDKMDefaultRealMatrixPreservingVisitor : NSDKMBase <NSDKMRealMatrixPreservingVisitor>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (double)end __attribute__((swift_name("end()")));
- (void)startRows:(int32_t)rows columns:(int32_t)columns startRow:(int32_t)startRow endRow:(int32_t)endRow startColumn:(int32_t)startColumn endColumn:(int32_t)endColumn __attribute__((swift_name("start(rows:columns:startRow:endRow:startColumn:endColumn:)")));
- (void)visitRow:(int32_t)row column:(int32_t)column value:(double)value __attribute__((swift_name("visit(row:column:value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DiagonalMatrix")))
@interface NSDKMDiagonalMatrix : NSDKMAbstractRealMatrix
- (instancetype)initWithDim:(int32_t)dim __attribute__((swift_name("init(dim:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithData:(NSDKMKotlinDoubleArray *)data __attribute__((swift_name("init(data:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithRows:(int32_t)rows columns:(int32_t)columns __attribute__((swift_name("init(rows:columns:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (id<NSDKMRealMatrix>)createMatrixRowDimension:(int32_t)rowDimension columnDimension:(int32_t)columnDimension __attribute__((swift_name("createMatrix(rowDimension:columnDimension:)")));
- (int32_t)getColumnDimension __attribute__((swift_name("getColumnDimension()")));
- (double)getEntryRow:(int32_t)row column:(int32_t)column __attribute__((swift_name("getEntry(row:column:)")));
- (int32_t)getRowDimension __attribute__((swift_name("getRowDimension()")));
- (id<NSDKMRealMatrix>)multiplyM:(id<NSDKMRealMatrix>)m __attribute__((swift_name("multiply(m:)")));
- (void)setEntryRow:(int32_t)row column:(int32_t)column value:(double)value __attribute__((swift_name("setEntry(row:column:value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LUDecomposition")))
@interface NSDKMLUDecomposition : NSDKMBase
@property (class, readonly, getter=companion) NSDKMLUDecompositionCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) id<NSDKMDecompositionSolver> solver __attribute__((swift_name("solver")));

/**
 * @note annotations
 *   kotlin.jvm.JvmOverloads
*/
- (instancetype)initWithMatrix:(id<NSDKMRealMatrix>)matrix singularityThreshold:(double)singularityThreshold __attribute__((swift_name("init(matrix:singularityThreshold:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LUDecomposition.Companion")))
@interface NSDKMLUDecompositionCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMLUDecompositionCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("QRDecomposition")))
@interface NSDKMQRDecomposition : NSDKMBase
@property (readonly) id<NSDKMDecompositionSolver> solver __attribute__((swift_name("solver")));
- (instancetype)initWithMatrix:(id<NSDKMRealMatrix>)matrix threshold:(double)threshold __attribute__((swift_name("init(matrix:threshold:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)performHouseholderReflectionMinor:(int32_t)minor matrix:(NSDKMKotlinArray<NSDKMKotlinDoubleArray *> *)matrix __attribute__((swift_name("performHouseholderReflection(minor:matrix:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("QRDecomposition.Solver")))
@interface NSDKMQRDecompositionSolver : NSDKMBase <NSDKMDecompositionSolver>
@property (readonly, getter=inverse_) id<NSDKMRealMatrix> inverse __attribute__((swift_name("inverse")));
@property (readonly) BOOL isNonSingular __attribute__((swift_name("isNonSingular")));
- (instancetype)initWith:(NSDKMQRDecomposition *)receiver qrt:(NSDKMKotlinArray<NSDKMKotlinDoubleArray *> *)qrt rDiag:(NSDKMKotlinDoubleArray *)rDiag threshold:(double)threshold __attribute__((swift_name("init(_:qrt:rDiag:threshold:)"))) __attribute__((objc_designated_initializer));
- (id<NSDKMRealMatrix>)solveB:(id<NSDKMRealMatrix>)b __attribute__((swift_name("solve(b:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Cartesian")))
@interface NSDKMCartesian : NSDKMBase
@property (class, readonly, getter=shared) NSDKMCartesian *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)cartesian __attribute__((swift_name("init()")));
- (NSDKMKotlinDoubleArray *)addVectorA:(NSDKMKotlinDoubleArray *)vectorA vectorB:(NSDKMKotlinDoubleArray *)vectorB __attribute__((swift_name("add(vectorA:vectorB:)")));
- (double)distanceFromPointToLinePoint:(NSDKMKotlinDoubleArray *)point linePointA:(NSDKMKotlinDoubleArray *)linePointA linePointB:(NSDKMKotlinDoubleArray *)linePointB __attribute__((swift_name("distanceFromPointToLine(point:linePointA:linePointB:)")));
- (double)distanceFromPointToSegmentPoint:(NSDKMKotlinDoubleArray *)point linePointA:(NSDKMKotlinDoubleArray *)linePointA linePointB:(NSDKMKotlinDoubleArray *)linePointB __attribute__((swift_name("distanceFromPointToSegment(point:linePointA:linePointB:)")));
- (double)distancePointToPointPointA:(NSDKMKotlinDoubleArray *)pointA pointB:(NSDKMKotlinDoubleArray *)pointB __attribute__((swift_name("distancePointToPoint(pointA:pointB:)")));
- (double)dotProductVectorA:(NSDKMKotlinDoubleArray *)vectorA vectorB:(NSDKMKotlinDoubleArray *)vectorB __attribute__((swift_name("dotProduct(vectorA:vectorB:)")));
- (NSDKMKotlinDoubleArray * _Nullable)intersection2dP0:(NSDKMKotlinDoubleArray *)p0 p1:(NSDKMKotlinDoubleArray *)p1 p2:(NSDKMKotlinDoubleArray *)p2 p3:(NSDKMKotlinDoubleArray *)p3 __attribute__((swift_name("intersection2d(p0:p1:p2:p3:)")));
- (double)normVector:(NSDKMKotlinDoubleArray *)vector __attribute__((swift_name("norm(vector:)")));
- (NSDKMKotlinDoubleArray *)projectPointOntoLinePoint:(NSDKMKotlinDoubleArray *)point linePointA:(NSDKMKotlinDoubleArray *)linePointA linePointB:(NSDKMKotlinDoubleArray *)linePointB __attribute__((swift_name("projectPointOntoLine(point:linePointA:linePointB:)")));
- (NSDKMKotlinDoubleArray *)projectPointOntoSegmentPoint:(NSDKMKotlinDoubleArray *)point linePointA:(NSDKMKotlinDoubleArray *)linePointA linePointB:(NSDKMKotlinDoubleArray *)linePointB __attribute__((swift_name("projectPointOntoSegment(point:linePointA:linePointB:)")));
- (NSDKMKotlinDoubleArray *)projectVectorOntoVectorVectorA:(NSDKMKotlinDoubleArray *)vectorA vectorB:(NSDKMKotlinDoubleArray *)vectorB __attribute__((swift_name("projectVectorOntoVector(vectorA:vectorB:)")));
- (NSDKMKotlinDoubleArray *)scaleScalar:(double)scalar vector:(NSDKMKotlinDoubleArray *)vector __attribute__((swift_name("scale(scalar:vector:)")));
- (NSDKMKotlinDoubleArray *)subtractVectorA:(NSDKMKotlinDoubleArray *)vectorA vectorB:(NSDKMKotlinDoubleArray *)vectorB __attribute__((swift_name("subtract(vectorA:vectorB:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Geodesy")))
@interface NSDKMGeodesy : NSDKMBase
@property (class, readonly, getter=shared) NSDKMGeodesy *shared __attribute__((swift_name("shared")));
@property (readonly) double EARTH_RADIUS_METER __attribute__((swift_name("EARTH_RADIUS_METER")));
@property (readonly) double METERS_NORTH_TO_LATITUDE __attribute__((swift_name("METERS_NORTH_TO_LATITUDE")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)geodesy __attribute__((swift_name("init()")));
- (double)addHeadingHeading:(double)heading toAdd:(double)toAdd __attribute__((swift_name("addHeading(heading:toAdd:)")));
- (NSDKMKotlinDoubleArray *)calculateShiftDistanceSrc:(NSDKMLatLng *)src dst:(NSDKMLatLng *)dst __attribute__((swift_name("calculateShiftDistance(src:dst:)")));
- (NSDKMLength *)distanceFromPointOntoSegmentBase:(NSDKMLatLng *)base start:(NSDKMLatLng *)start end:(NSDKMLatLng *)end __attribute__((swift_name("distanceFromPointOntoSegment(base:start:end:)")));
- (double)distanceMetersEastSrc:(NSDKMLatLng *)src dst:(NSDKMLatLng *)dst __attribute__((swift_name("distanceMetersEast(src:dst:)")));
- (double)distanceMetersNorthSrc:(NSDKMLatLng *)src dst:(NSDKMLatLng *)dst __attribute__((swift_name("distanceMetersNorth(src:dst:)")));
- (double)getHeadingStart:(NSDKMLatLng *)start end:(NSDKMLatLng *)end __attribute__((swift_name("getHeading(start:end:)")));
- (double)getHeadingDeltaRouteHeading:(double)routeHeading probeHeading:(double)probeHeading __attribute__((swift_name("getHeadingDelta(routeHeading:probeHeading:)")));
- (double)getHeadingInDegreesStart:(NSDKMLatLng *)start end:(NSDKMLatLng *)end __attribute__((swift_name("getHeadingInDegrees(start:end:)")));
- (double)getHeadingInRadiansSrc:(NSDKMLatLng *)src dst:(NSDKMLatLng *)dst __attribute__((swift_name("getHeadingInRadians(src:dst:)")));
- (BOOL)isOrthogonallyProjectableOntoSegmentBase:(NSDKMLatLng *)base segment:(NSDKMGeodesySegment *)segment __attribute__((swift_name("isOrthogonallyProjectableOntoSegment(base:segment:)")));
- (NSDKMLength *)lineDistanceLine:(NSArray<NSDKMLatLng *> *)line __attribute__((swift_name("lineDistance(line:)")));
- (NSDKMLatLng *)moveLocationOnLineStart:(NSDKMLatLng *)start end:(NSDKMLatLng *)end distance:(NSDKMLength *)distance __attribute__((swift_name("moveLocationOnLine(start:end:distance:)")));
- (NSDKMLength *)pointToPointDistanceStart:(NSDKMLatLng *)start end:(NSDKMLatLng *)end __attribute__((swift_name("pointToPointDistance(start:end:)")));
- (double)pointToPointDistanceHaversineALat:(double)aLat aLon:(double)aLon bLat:(double)bLat bLon:(double)bLon __attribute__((swift_name("pointToPointDistanceHaversine(aLat:aLon:bLat:bLon:)")));
- (double)pointToPointDistanceHaversineStart:(NSDKMLatLng *)start end:(NSDKMLatLng *)end __attribute__((swift_name("pointToPointDistanceHaversine(start:end:)")));
- (NSDKMLatLng *)projectPointOntoLineBase:(NSDKMLatLng *)base start:(NSDKMLatLng *)start end:(NSDKMLatLng *)end __attribute__((swift_name("projectPointOntoLine(base:start:end:)")));
- (NSDKMLatLng *)projectPointOntoSegmentBase:(NSDKMLatLng *)base segment:(NSDKMGeodesySegment *)segment __attribute__((swift_name("projectPointOntoSegment(base:segment:)")));
- (NSDKMLatLng *)projectPointOntoSegmentBase:(NSDKMLatLng *)base start:(NSDKMLatLng *)start end:(NSDKMLatLng *)end __attribute__((swift_name("projectPointOntoSegment(base:start:end:)")));
- (NSDKMLatLng *)shiftByCartesianPosition:(NSDKMLatLng *)position metersNorth:(double)metersNorth metersEast:(double)metersEast __attribute__((swift_name("shiftByCartesian(position:metersNorth:metersEast:)")));
- (NSDKMLatLng *)shiftByCartesianPosition:(NSDKMLatLng *)position shift:(NSDKMKotlinDoubleArray *)shift __attribute__((swift_name("shiftByCartesian(position:shift:)")));
- (NSDKMLatLng *)shiftByPolarInDegreesPosition:(NSDKMLatLng *)position meters:(NSDKMLength *)meters heading:(double)heading __attribute__((swift_name("shiftByPolarInDegrees(position:meters:heading:)")));
- (NSDKMLatLng *)shiftByPolarInRadiansPosition:(NSDKMLatLng *)position meters:(NSDKMLength *)meters heading:(double)heading __attribute__((swift_name("shiftByPolarInRadians(position:meters:heading:)")));
- (double)toDegreesRadians:(double)radians __attribute__((swift_name("toDegrees(radians:)")));
- (double)toRadiansDegrees:(double)degrees __attribute__((swift_name("toRadians(degrees:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Geodesy.Segment")))
@interface NSDKMGeodesySegment : NSDKMBase
@property (readonly) NSDKMLatLng *end __attribute__((swift_name("end")));
@property (readonly) NSDKMLatLng *start __attribute__((swift_name("start")));
- (instancetype)initWithStart:(NSDKMLatLng *)start end:(NSDKMLatLng *)end __attribute__((swift_name("init(start:end:)"))) __attribute__((objc_designated_initializer));
- (NSDKMGeodesySegment *)doCopyStart:(NSDKMLatLng *)start end:(NSDKMLatLng *)end __attribute__((swift_name("doCopy(start:end:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GeodeticCalculator")))
@interface NSDKMGeodeticCalculator : NSDKMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (double)toDegreesRadians:(double)radians __attribute__((swift_name("toDegrees(radians:)")));
- (double)toRadiansDegrees:(double)degrees __attribute__((swift_name("toRadians(degrees:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LatLng")))
@interface NSDKMLatLng : NSDKMFreezable <NSDKMSerializable>
@property (class, readonly, getter=companion) NSDKMLatLngCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) double latitude __attribute__((swift_name("latitude")));
@property (readonly) double longitude __attribute__((swift_name("longitude")));
- (instancetype)initWithLatitude:(double)latitude longitude:(double)longitude __attribute__((swift_name("init(latitude:longitude:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSDKMLatLng *)doCopyLatitude:(double)latitude longitude:(double)longitude __attribute__((swift_name("doCopy(latitude:longitude:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LatLng.Companion")))
@interface NSDKMLatLngCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMLatLngCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UUID")))
@interface NSDKMUUID : NSDKMBase
@property (class, readonly, getter=shared) NSDKMUUID *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)uUID __attribute__((swift_name("init()")));
- (NSString *)doNewUUID __attribute__((swift_name("doNewUUID()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AdjustableBaselineTimeProvider")))
@interface NSDKMAdjustableBaselineTimeProvider : NSDKMBase <NSDKMTimeProvider>
@property NSDKMLong * _Nullable baselineTime __attribute__((swift_name("baselineTime")));
@property (readonly) int64_t currentTimeMillis __attribute__((swift_name("currentTimeMillis")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end

__attribute__((swift_name("DateTimeFormatter")))
@protocol NSDKMDateTimeFormatter
@required
- (NSDKMDuration *)convertFormat:(NSString *)format time:(NSString *)time __attribute__((swift_name("convert(format:time:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Time")))
@interface NSDKMTime : NSDKMBase
@property (class, readonly, getter=shared) NSDKMTime *shared __attribute__((swift_name("shared")));
@property (readonly) int64_t currentTimeMs __attribute__((swift_name("currentTimeMs")));
@property (readonly) int64_t elapsedTimeMsSinceStart __attribute__((swift_name("elapsedTimeMsSinceStart")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)time __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SkieColdFlowIterator")))
@interface NSDKMSkieColdFlowIterator<E> : NSDKMBase
- (instancetype)initWithFlow:(id<NSDKMKotlinx_coroutines_coreFlow>)flow __attribute__((swift_name("init(flow:)"))) __attribute__((objc_designated_initializer));
- (void)cancel __attribute__((swift_name("cancel()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)hasNextWithCompletionHandler:(void (^)(NSDKMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("hasNext(completionHandler:)")));
- (E _Nullable)next __attribute__((swift_name("next()")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreFlow")))
@protocol NSDKMKotlinx_coroutines_coreFlow
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<NSDKMKotlinx_coroutines_coreFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SkieKotlinFlow")))
@interface NSDKMSkieKotlinFlow<__covariant T> : NSDKMBase <NSDKMKotlinx_coroutines_coreFlow>
- (instancetype)initWithDelegate:(id<NSDKMKotlinx_coroutines_coreFlow>)delegate __attribute__((swift_name("init(_:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<NSDKMKotlinx_coroutines_coreFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreSharedFlow")))
@protocol NSDKMKotlinx_coroutines_coreSharedFlow <NSDKMKotlinx_coroutines_coreFlow>
@required
@property (readonly) NSArray<id> *replayCache __attribute__((swift_name("replayCache")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreFlowCollector")))
@protocol NSDKMKotlinx_coroutines_coreFlowCollector
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)emitValue:(id _Nullable)value completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("emit(value:completionHandler:)")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreMutableSharedFlow")))
@protocol NSDKMKotlinx_coroutines_coreMutableSharedFlow <NSDKMKotlinx_coroutines_coreSharedFlow, NSDKMKotlinx_coroutines_coreFlowCollector>
@required

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
- (void)resetReplayCache __attribute__((swift_name("resetReplayCache()")));
- (BOOL)tryEmitValue:(id _Nullable)value __attribute__((swift_name("tryEmit(value:)")));
@property (readonly) id<NSDKMKotlinx_coroutines_coreStateFlow> subscriptionCount __attribute__((swift_name("subscriptionCount")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SkieKotlinMutableSharedFlow")))
@interface NSDKMSkieKotlinMutableSharedFlow<T> : NSDKMBase <NSDKMKotlinx_coroutines_coreMutableSharedFlow>
@property (readonly) NSArray<T> *replayCache __attribute__((swift_name("replayCache")));
@property (readonly) id<NSDKMKotlinx_coroutines_coreStateFlow> subscriptionCount __attribute__((swift_name("subscriptionCount")));
- (instancetype)initWithDelegate:(id<NSDKMKotlinx_coroutines_coreMutableSharedFlow>)delegate __attribute__((swift_name("init(_:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<NSDKMKotlinx_coroutines_coreFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)emitValue:(T)value completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("emit(value:completionHandler:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
- (void)resetReplayCache __attribute__((swift_name("resetReplayCache()")));
- (BOOL)tryEmitValue:(T)value __attribute__((swift_name("tryEmit(value:)")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreStateFlow")))
@protocol NSDKMKotlinx_coroutines_coreStateFlow <NSDKMKotlinx_coroutines_coreSharedFlow>
@required
@property (readonly) id _Nullable value_ __attribute__((swift_name("value_")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreMutableStateFlow")))
@protocol NSDKMKotlinx_coroutines_coreMutableStateFlow <NSDKMKotlinx_coroutines_coreStateFlow, NSDKMKotlinx_coroutines_coreMutableSharedFlow>
@required
- (BOOL)compareAndSetExpect:(id _Nullable)expect update:(id _Nullable)update __attribute__((swift_name("compareAndSet(expect:update:)")));
- (void)setValue:(id _Nullable)value __attribute__((swift_name("setValue(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SkieKotlinMutableStateFlow")))
@interface NSDKMSkieKotlinMutableStateFlow<T> : NSDKMBase <NSDKMKotlinx_coroutines_coreMutableStateFlow>
@property (readonly) NSArray<T> *replayCache __attribute__((swift_name("replayCache")));
@property (readonly) id<NSDKMKotlinx_coroutines_coreStateFlow> subscriptionCount __attribute__((swift_name("subscriptionCount")));
@property (setter=setValue:) T value_ __attribute__((swift_name("value_")));
- (instancetype)initWithDelegate:(id<NSDKMKotlinx_coroutines_coreMutableStateFlow>)delegate __attribute__((swift_name("init(_:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<NSDKMKotlinx_coroutines_coreFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));
- (BOOL)compareAndSetExpect:(T)expect update:(T)update __attribute__((swift_name("compareAndSet(expect:update:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)emitValue:(T)value completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("emit(value:completionHandler:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
- (void)resetReplayCache __attribute__((swift_name("resetReplayCache()")));
- (BOOL)tryEmitValue:(T)value __attribute__((swift_name("tryEmit(value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SkieKotlinOptionalFlow")))
@interface NSDKMSkieKotlinOptionalFlow<__covariant T> : NSDKMBase <NSDKMKotlinx_coroutines_coreFlow>
- (instancetype)initWithDelegate:(id<NSDKMKotlinx_coroutines_coreFlow>)delegate __attribute__((swift_name("init(_:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<NSDKMKotlinx_coroutines_coreFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SkieKotlinOptionalMutableSharedFlow")))
@interface NSDKMSkieKotlinOptionalMutableSharedFlow<T> : NSDKMBase <NSDKMKotlinx_coroutines_coreMutableSharedFlow>
@property (readonly) NSArray<id> *replayCache __attribute__((swift_name("replayCache")));
@property (readonly) id<NSDKMKotlinx_coroutines_coreStateFlow> subscriptionCount __attribute__((swift_name("subscriptionCount")));
- (instancetype)initWithDelegate:(id<NSDKMKotlinx_coroutines_coreMutableSharedFlow>)delegate __attribute__((swift_name("init(_:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<NSDKMKotlinx_coroutines_coreFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)emitValue:(T _Nullable)value completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("emit(value:completionHandler:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
- (void)resetReplayCache __attribute__((swift_name("resetReplayCache()")));
- (BOOL)tryEmitValue:(T _Nullable)value __attribute__((swift_name("tryEmit(value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SkieKotlinOptionalMutableStateFlow")))
@interface NSDKMSkieKotlinOptionalMutableStateFlow<T> : NSDKMBase <NSDKMKotlinx_coroutines_coreMutableStateFlow>
@property (readonly) NSArray<id> *replayCache __attribute__((swift_name("replayCache")));
@property (readonly) id<NSDKMKotlinx_coroutines_coreStateFlow> subscriptionCount __attribute__((swift_name("subscriptionCount")));
@property (setter=setValue:) T _Nullable value_ __attribute__((swift_name("value_")));
- (instancetype)initWithDelegate:(id<NSDKMKotlinx_coroutines_coreMutableStateFlow>)delegate __attribute__((swift_name("init(_:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<NSDKMKotlinx_coroutines_coreFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));
- (BOOL)compareAndSetExpect:(T _Nullable)expect update:(T _Nullable)update __attribute__((swift_name("compareAndSet(expect:update:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)emitValue:(T _Nullable)value completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("emit(value:completionHandler:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
- (void)resetReplayCache __attribute__((swift_name("resetReplayCache()")));
- (BOOL)tryEmitValue:(T _Nullable)value __attribute__((swift_name("tryEmit(value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SkieKotlinOptionalSharedFlow")))
@interface NSDKMSkieKotlinOptionalSharedFlow<__covariant T> : NSDKMBase <NSDKMKotlinx_coroutines_coreSharedFlow>
@property (readonly) NSArray<id> *replayCache __attribute__((swift_name("replayCache")));
- (instancetype)initWithDelegate:(id<NSDKMKotlinx_coroutines_coreSharedFlow>)delegate __attribute__((swift_name("init(_:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<NSDKMKotlinx_coroutines_coreFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SkieKotlinOptionalStateFlow")))
@interface NSDKMSkieKotlinOptionalStateFlow<__covariant T> : NSDKMBase <NSDKMKotlinx_coroutines_coreStateFlow>
@property (readonly) NSArray<id> *replayCache __attribute__((swift_name("replayCache")));
@property (readonly) T _Nullable value_ __attribute__((swift_name("value_")));
- (instancetype)initWithDelegate:(id<NSDKMKotlinx_coroutines_coreStateFlow>)delegate __attribute__((swift_name("init(_:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<NSDKMKotlinx_coroutines_coreFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SkieKotlinSharedFlow")))
@interface NSDKMSkieKotlinSharedFlow<__covariant T> : NSDKMBase <NSDKMKotlinx_coroutines_coreSharedFlow>
@property (readonly) NSArray<T> *replayCache __attribute__((swift_name("replayCache")));
- (instancetype)initWithDelegate:(id<NSDKMKotlinx_coroutines_coreSharedFlow>)delegate __attribute__((swift_name("init(_:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<NSDKMKotlinx_coroutines_coreFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SkieKotlinStateFlow")))
@interface NSDKMSkieKotlinStateFlow<__covariant T> : NSDKMBase <NSDKMKotlinx_coroutines_coreStateFlow>
@property (readonly) NSArray<T> *replayCache __attribute__((swift_name("replayCache")));
@property (readonly) T value_ __attribute__((swift_name("value_")));
- (instancetype)initWithDelegate:(id<NSDKMKotlinx_coroutines_coreStateFlow>)delegate __attribute__((swift_name("init(_:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<NSDKMKotlinx_coroutines_coreFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Skie_CancellationHandler")))
@interface NSDKMSkie_CancellationHandler : NSDKMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)cancel __attribute__((swift_name("cancel()")));
@end

__attribute__((swift_name("Skie_DispatcherDelegate")))
@protocol NSDKMSkie_DispatcherDelegate
@required
- (void)dispatchBlock:(id<NSDKMKotlinx_coroutines_coreRunnable>)block __attribute__((swift_name("dispatch(block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Skie_SuspendHandler")))
@interface NSDKMSkie_SuspendHandler : NSDKMBase
- (instancetype)initWithCancellationHandler:(NSDKMSkie_CancellationHandler *)cancellationHandler dispatcherDelegate:(id<NSDKMSkie_DispatcherDelegate>)dispatcherDelegate onResult:(void (^)(NSDKMSkie_SuspendResult *))onResult __attribute__((swift_name("init(cancellationHandler:dispatcherDelegate:onResult:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("Skie_SuspendResult")))
@interface NSDKMSkie_SuspendResult : NSDKMBase
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Skie_SuspendResult.Canceled")))
@interface NSDKMSkie_SuspendResultCanceled : NSDKMSkie_SuspendResult
@property (class, readonly, getter=shared) NSDKMSkie_SuspendResultCanceled *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)canceled __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Skie_SuspendResult.Error")))
@interface NSDKMSkie_SuspendResultError : NSDKMSkie_SuspendResult
@property (readonly) NSError *error __attribute__((swift_name("error")));
- (instancetype)initWithError:(NSError *)error __attribute__((swift_name("init(error:)"))) __attribute__((objc_designated_initializer));
- (NSDKMSkie_SuspendResultError *)doCopyError:(NSError *)error __attribute__((swift_name("doCopy(error:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Skie_SuspendResult.Success")))
@interface NSDKMSkie_SuspendResultSuccess : NSDKMSkie_SuspendResult
@property (readonly) id _Nullable value __attribute__((swift_name("value")));
- (instancetype)initWithValue:(id _Nullable)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
- (NSDKMSkie_SuspendResultSuccess *)doCopyValue:(id _Nullable)value __attribute__((swift_name("doCopy(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LaneIconProvider")))
@interface NSDKMLaneIconProvider : NSDKMBase
@property (class, readonly, getter=shared) NSDKMLaneIconProvider *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)laneIconProvider __attribute__((swift_name("init()")));
- (NSArray<NSDKMLaneIconProviderLaneIcon *> *)getLaneIconLaneInfo:(NSDKMLaneInfo *)laneInfo turnCommand:(NSDKMTurnCommand * _Nullable)turnCommand __attribute__((swift_name("getLaneIcon(laneInfo:turnCommand:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LaneIconProvider.LaneIcon")))
@interface NSDKMLaneIconProviderLaneIcon : NSDKMKotlinEnum<NSDKMLaneIconProviderLaneIcon *>
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *left __attribute__((swift_name("left")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *leftUseLeft __attribute__((swift_name("leftUseLeft")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *right __attribute__((swift_name("right")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *rightUseRight __attribute__((swift_name("rightUseRight")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *slightLeft __attribute__((swift_name("slightLeft")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *slightLeftUseLeft __attribute__((swift_name("slightLeftUseLeft")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *slightRight __attribute__((swift_name("slightRight")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *slightRightUseRight __attribute__((swift_name("slightRightUseRight")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *through __attribute__((swift_name("through")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *throughLeft __attribute__((swift_name("throughLeft")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *throughLeftUseLeft __attribute__((swift_name("throughLeftUseLeft")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *throughLeftUseThrough __attribute__((swift_name("throughLeftUseThrough")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *throughRight __attribute__((swift_name("throughRight")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *throughRightUseRight __attribute__((swift_name("throughRightUseRight")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *throughRightUseThrough __attribute__((swift_name("throughRightUseThrough")));
@property (class, readonly) NSDKMLaneIconProviderLaneIcon *throughUseThrough __attribute__((swift_name("throughUseThrough")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMLaneIconProviderLaneIcon *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("TimestampConverter")))
@protocol NSDKMTimestampConverter
@required
- (NSDKMTimestampConverterResult *)convertTimestamp:(int64_t)timestamp hourCycle:(NSDKMHourCycle *)hourCycle timeZone:(NSString * _Nullable)timeZone __attribute__((swift_name("convert(timestamp:hourCycle:timeZone:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DayTimeTimestampConverter")))
@interface NSDKMDayTimeTimestampConverter : NSDKMBase <NSDKMTimestampConverter>
@property (class, readonly, getter=companion) NSDKMDayTimeTimestampConverterCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMTimestampConverterResult *)convertTimestamp:(int64_t)timestamp hourCycle:(NSDKMHourCycle *)hourCycle timeZone:(NSString * _Nullable)timeZone __attribute__((swift_name("convert(timestamp:hourCycle:timeZone:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DayTimeTimestampConverter.Companion")))
@interface NSDKMDayTimeTimestampConverterCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMDayTimeTimestampConverterCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("SdkDurationConverter")))
@protocol NSDKMSdkDurationConverter
@required
- (NSArray<NSDKMSdkDurationConverterResult *> *)convertDuration:(NSDKMDuration *)duration __attribute__((swift_name("convert(duration:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HourDurationConverter")))
@interface NSDKMHourDurationConverter : NSDKMBase <NSDKMSdkDurationConverter>
@property (class, readonly, getter=companion) NSDKMHourDurationConverterCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSArray<NSDKMSdkDurationConverterResult *> *)convertDuration:(NSDKMDuration *)duration __attribute__((swift_name("convert(duration:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HourDurationConverter.Companion")))
@interface NSDKMHourDurationConverterCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMHourDurationConverterCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SdkDistanceConverter")))
@interface NSDKMSdkDistanceConverter : NSDKMBase <NSDKMDistanceConverter>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMDistanceConverterResult *)convertLength:(NSDKMLength *)length measurementSystem:(NSDKMMeasurementSystem *)measurementSystem __attribute__((swift_name("convert(length:measurementSystem:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SdkDurationConverterResult")))
@interface NSDKMSdkDurationConverterResult : NSDKMBase
@property (readonly) NSDKMSdkDurationConverterUnit *unit __attribute__((swift_name("unit")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
- (instancetype)initWithValue:(NSString *)value unit:(NSDKMSdkDurationConverterUnit *)unit __attribute__((swift_name("init(value:unit:)"))) __attribute__((objc_designated_initializer));
- (NSDKMSdkDurationConverterResult *)doCopyValue:(NSString *)value unit:(NSDKMSdkDurationConverterUnit *)unit __attribute__((swift_name("doCopy(value:unit:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SdkDurationConverterUnit")))
@interface NSDKMSdkDurationConverterUnit : NSDKMKotlinEnum<NSDKMSdkDurationConverterUnit *>
@property (class, readonly) NSDKMSdkDurationConverterUnit *hour __attribute__((swift_name("hour")));
@property (class, readonly) NSDKMSdkDurationConverterUnit *minute __attribute__((swift_name("minute")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMSdkDurationConverterUnit *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimestampConverterResult")))
@interface NSDKMTimestampConverterResult : NSDKMBase
@property (readonly) NSString * _Nullable unit __attribute__((swift_name("unit")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
- (instancetype)initWithValue:(NSString *)value unit:(NSString * _Nullable)unit __attribute__((swift_name("init(value:unit:)"))) __attribute__((objc_designated_initializer));
- (NSDKMTimestampConverterResult *)doCopyValue:(NSString *)value unit:(NSString * _Nullable)unit __attribute__((swift_name("doCopy(value:unit:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimestampUtils")))
@interface NSDKMTimestampUtils : NSDKMBase
@property (class, readonly, getter=shared) NSDKMTimestampUtils *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)timestampUtils __attribute__((swift_name("init()")));
- (int64_t)millisecondsOfDayTimestamp:(NSDKMTimestamp *)timestamp timeZone:(NSString * _Nullable)timeZone __attribute__((swift_name("millisecondsOfDay(timestamp:timeZone:)")));
@end

__attribute__((swift_name("ViewModel")))
@protocol NSDKMViewModel
@required
- (void)onCleared __attribute__((swift_name("onCleared()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationUIState")))
@interface NSDKMNavigationUIState : NSDKMBase
@property (readonly) id<NSDKMRoutable> destination __attribute__((swift_name("destination")));
@property (readonly) BOOL detached __attribute__((swift_name("detached")));
@property (readonly) BOOL loading __attribute__((swift_name("loading")));
@property (readonly) NSDKMLocation * _Nullable location __attribute__((swift_name("location")));
@property (readonly) NSDKMManeuver * _Nullable maneuver __attribute__((swift_name("maneuver")));
@property (readonly) NSDKMNavigationUIStateNavigationError * _Nullable navigationError __attribute__((swift_name("navigationError")));
@property (readonly) NSDKMNavigationResult * _Nullable navigationResult __attribute__((swift_name("navigationResult")));
@property (readonly) NSDKMNavigationState * _Nullable navigationState __attribute__((swift_name("navigationState")));
@property (readonly) BOOL verifyStopNavigation __attribute__((swift_name("verifyStopNavigation")));
@property (readonly) BOOL voiceInstructionsEnabled __attribute__((swift_name("voiceInstructionsEnabled")));
@property (readonly) NSArray<NSDKMRouteWaypoint *> *waypoints __attribute__((swift_name("waypoints")));
- (instancetype)initWithDestination:(id<NSDKMRoutable>)destination location:(NSDKMLocation * _Nullable)location navigationState:(NSDKMNavigationState * _Nullable)navigationState detached:(BOOL)detached navigationResult:(NSDKMNavigationResult * _Nullable)navigationResult navigationError:(NSDKMNavigationUIStateNavigationError * _Nullable)navigationError verifyStopNavigation:(BOOL)verifyStopNavigation voiceInstructionsEnabled:(BOOL)voiceInstructionsEnabled __attribute__((swift_name("init(destination:location:navigationState:detached:navigationResult:navigationError:verifyStopNavigation:voiceInstructionsEnabled:)"))) __attribute__((objc_designated_initializer));
- (NSDKMNavigationUIState *)doCopyDestination:(id<NSDKMRoutable>)destination location:(NSDKMLocation * _Nullable)location navigationState:(NSDKMNavigationState * _Nullable)navigationState detached:(BOOL)detached navigationResult:(NSDKMNavigationResult * _Nullable)navigationResult navigationError:(NSDKMNavigationUIStateNavigationError * _Nullable)navigationError verifyStopNavigation:(BOOL)verifyStopNavigation voiceInstructionsEnabled:(BOOL)voiceInstructionsEnabled __attribute__((swift_name("doCopy(destination:location:navigationState:detached:navigationResult:navigationError:verifyStopNavigation:voiceInstructionsEnabled:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationUIState.NavigationError")))
@interface NSDKMNavigationUIStateNavigationError : NSDKMBase
@property (readonly) BOOL critical __attribute__((swift_name("critical")));
@property (readonly) NSDKMKotlinException *exception __attribute__((swift_name("exception")));
@property (readonly) NSString *message __attribute__((swift_name("message")));
- (instancetype)initWithException:(NSDKMKotlinException *)exception message:(NSString *)message critical:(BOOL)critical __attribute__((swift_name("init(exception:message:critical:)"))) __attribute__((objc_designated_initializer));
- (NSDKMNavigationUIStateNavigationError *)doCopyException:(NSDKMKotlinException *)exception message:(NSString *)message critical:(BOOL)critical __attribute__((swift_name("doCopy(exception:message:critical:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationViewModel")))
@interface NSDKMNavigationViewModel : NSDKMBase <NSDKMViewModel, NSDKMOnNavigationStateUpdatedListener, NSDKMNavigationEventHandlerOnDestinationReachedListener, NSDKMNavigationEventHandlerOnNavigationStoppedListener, NSDKMNavigationEventHandlerOnNavigationStartedListener, NSDKMNavigationEventHandlerOnRouteRequestFailedListener, NSDKMNavigationEventHandlerOnRouteUpdateListener, NSDKMLocationProviderLocationUpdateListener>
@property (readonly) id<NSDKMKotlinx_coroutines_coreStateFlow> state __attribute__((swift_name("state")));
- (instancetype)initWithNavigationSdk:(id<NSDKMNavigationSdk>)navigationSdk locationProvider:(id<NSDKMLocationProvider>)locationProvider __attribute__((swift_name("init(navigationSdk:locationProvider:)"))) __attribute__((objc_designated_initializer));
- (void)onBackPress __attribute__((swift_name("onBackPress()")));
- (void)onCleared __attribute__((swift_name("onCleared()")));
- (void)onDestinationReachedNavigationResult:(NSDKMNavigationResult *)navigationResult __attribute__((swift_name("onDestinationReached(navigationResult:)")));
- (void)onEndNavigationButtonClicked __attribute__((swift_name("onEndNavigationButtonClicked()")));
- (void)onLocationUpdatedLocation:(NSDKMLocation *)location __attribute__((swift_name("onLocationUpdated(location:)")));
- (void)onNavigationStartedRoutable:(id<NSDKMRoutable>)routable __attribute__((swift_name("onNavigationStarted(routable:)")));
- (void)onNavigationStateUpdatedNavigationState:(NSDKMNavigationState * _Nullable)navigationState __attribute__((swift_name("onNavigationStateUpdated(navigationState:)")));
- (void)onNavigationStopped __attribute__((swift_name("onNavigationStopped()")));
- (void)onResumeNavigation __attribute__((swift_name("onResumeNavigation()")));
- (void)onRouteRequestFailedE:(NSDKMKotlinException *)e __attribute__((swift_name("onRouteRequestFailed(e:)")));
- (void)onRouteUpdatedRoute:(NSDKMRoute *)route __attribute__((swift_name("onRouteUpdated(route:)")));
- (void)onVoiceInstructionButtonClicked __attribute__((swift_name("onVoiceInstructionButtonClicked()")));
- (void)onWatermarkClicked __attribute__((swift_name("onWatermarkClicked()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormattedRouteProgressUIState")))
@interface NSDKMFormattedRouteProgressUIState : NSDKMBase
@property (readonly) NSDKMDistanceConverterResult *distance __attribute__((swift_name("distance")));
@property (readonly) NSDKMSdkDurationConverterResult *duration __attribute__((swift_name("duration")));
@property (readonly) NSDKMTimestampConverterResult *timestampConverter __attribute__((swift_name("timestampConverter")));
- (instancetype)initWithDuration:(NSDKMSdkDurationConverterResult *)duration timestampConverter:(NSDKMTimestampConverterResult *)timestampConverter distance:(NSDKMDistanceConverterResult *)distance __attribute__((swift_name("init(duration:timestampConverter:distance:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("Use formatted values of `RouteProgressUIState` directly")));
- (NSDKMFormattedRouteProgressUIState *)doCopyDuration:(NSDKMSdkDurationConverterResult *)duration timestampConverter:(NSDKMTimestampConverterResult *)timestampConverter distance:(NSDKMDistanceConverterResult *)distance __attribute__((swift_name("doCopy(duration:timestampConverter:distance:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProgressUIStateFormatter")))
@interface NSDKMRouteProgressUIStateFormatter : NSDKMBase
@property (class, readonly, getter=shared) NSDKMRouteProgressUIStateFormatter *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)routeProgressUIStateFormatter __attribute__((swift_name("init()")));
- (NSDKMFormattedRouteProgressUIState *)convertRouteProgressUIState:(NSDKMRouteProgressUIStateFollowingRoute *)routeProgressUIState __attribute__((swift_name("convert(routeProgressUIState:)")));
@end

__attribute__((swift_name("RouteProgressViewModel")))
@interface NSDKMRouteProgressViewModel : NSDKMBase <NSDKMViewModel, NSDKMOnNavigationStateUpdatedListener>
@property (readonly) id<NSDKMKotlinx_coroutines_coreStateFlow> state __attribute__((swift_name("state")));
- (instancetype)initWithNavigationSdk:(id<NSDKMNavigationSdk>)navigationSdk routeDetachStateProvider:(id<NSDKMRouteDetachStateProvider>)routeDetachStateProvider routeProgressUIStateConverter:(NSDKMRouteProgressUIStateConverter *)routeProgressUIStateConverter __attribute__((swift_name("init(navigationSdk:routeDetachStateProvider:routeProgressUIStateConverter:)"))) __attribute__((objc_designated_initializer));
- (void)onCleared __attribute__((swift_name("onCleared()")));
- (void)onNavigationStateUpdatedNavigationState:(NSDKMNavigationState * _Nullable)navigationState __attribute__((swift_name("onNavigationStateUpdated(navigationState:)")));
@end

__attribute__((swift_name("RouteProgressUIState")))
@protocol NSDKMRouteProgressUIState
@required
@property (readonly) NSDKMRouteProgressUIStateFollowingRoute * _Nullable asFollowingRoute __attribute__((swift_name("asFollowingRoute")));
@property (readonly) NSDKMRouteProgressUIStateLoading * _Nullable asLoading __attribute__((swift_name("asLoading")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProgressUIStateFollowingRoute")))
@interface NSDKMRouteProgressUIStateFollowingRoute : NSDKMBase <NSDKMRouteProgressUIState>
@property (readonly) BOOL destinationReached __attribute__((swift_name("destinationReached")));
@property (readonly) NSDKMDistanceConverterResult *formattedDistance __attribute__((swift_name("formattedDistance")));
@property (readonly) NSDKMSdkDurationConverterResult *formattedDuration __attribute__((swift_name("formattedDuration")));
@property (readonly) NSDKMTimestampConverterResult *formattedTimestamp __attribute__((swift_name("formattedTimestamp")));
@property (readonly) NSDKMRouteProgressTrackerRouteProgress *routeProgress __attribute__((swift_name("routeProgress"))) __attribute__((deprecated("Use formatted values on this class directly")));
- (instancetype)initWithDestinationReached:(BOOL)destinationReached formattedDuration:(NSDKMSdkDurationConverterResult *)formattedDuration formattedTimestamp:(NSDKMTimestampConverterResult *)formattedTimestamp formattedDistance:(NSDKMDistanceConverterResult *)formattedDistance routeProgress:(NSDKMRouteProgressTrackerRouteProgress *)routeProgress __attribute__((swift_name("init(destinationReached:formattedDuration:formattedTimestamp:formattedDistance:routeProgress:)"))) __attribute__((objc_designated_initializer));
- (NSDKMRouteProgressUIStateFollowingRoute *)doCopyDestinationReached:(BOOL)destinationReached formattedDuration:(NSDKMSdkDurationConverterResult *)formattedDuration formattedTimestamp:(NSDKMTimestampConverterResult *)formattedTimestamp formattedDistance:(NSDKMDistanceConverterResult *)formattedDistance routeProgress:(NSDKMRouteProgressTrackerRouteProgress *)routeProgress __attribute__((swift_name("doCopy(destinationReached:formattedDuration:formattedTimestamp:formattedDistance:routeProgress:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProgressUIStateLoading")))
@interface NSDKMRouteProgressUIStateLoading : NSDKMBase <NSDKMRouteProgressUIState>
@property (class, readonly, getter=shared) NSDKMRouteProgressUIStateLoading *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)loading __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("RouteProgressUIStateConverter")))
@interface NSDKMRouteProgressUIStateConverter : NSDKMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id<NSDKMRouteProgressUIState>)convertNavigationState:(NSDKMNavigationState * _Nullable)navigationState detached:(BOOL)detached __attribute__((swift_name("convert(navigationState:detached:)")));
@end

__attribute__((swift_name("ManeuverViewModel")))
@interface NSDKMManeuverViewModel : NSDKMBase <NSDKMViewModel, NSDKMOnNavigationStateUpdatedListener>
@property (readonly) id<NSDKMKotlinx_coroutines_coreStateFlow> state __attribute__((swift_name("state")));
- (instancetype)initWithNavigationSdk:(id<NSDKMNavigationSdk>)navigationSdk detachStateProvider:(id<NSDKMRouteDetachStateProvider>)detachStateProvider maneuverUIStateConverter:(NSDKMManeuverUIStateConverter *)maneuverUIStateConverter __attribute__((swift_name("init(navigationSdk:detachStateProvider:maneuverUIStateConverter:)"))) __attribute__((objc_designated_initializer));
- (void)onCleared __attribute__((swift_name("onCleared()")));
- (void)onNavigationStateUpdatedNavigationState:(NSDKMNavigationState * _Nullable)navigationState __attribute__((swift_name("onNavigationStateUpdated(navigationState:)")));
@end

__attribute__((swift_name("ManeuverUIState")))
@protocol NSDKMManeuverUIState
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManeuverUIStateFollowingRoute")))
@interface NSDKMManeuverUIStateFollowingRoute : NSDKMBase <NSDKMManeuverUIState>
@property (readonly) NSDKMManeuver * _Nullable followingManeuver __attribute__((swift_name("followingManeuver"))) __attribute__((deprecated("Use formatted values on this class directly")));
@property (readonly) NSDKMLaneInfo * _Nullable laneInfo __attribute__((swift_name("laneInfo")));
@property (readonly) NSDKMManeuverUIStatePrimaryManeuverInfo *primaryManeuverInfo __attribute__((swift_name("primaryManeuverInfo")));
@property (readonly) id<NSDKMManeuverUIStateSecondaryManeuverInfo> _Nullable secondaryManeuverInfo __attribute__((swift_name("secondaryManeuverInfo")));
@property (readonly) NSDKMManeuver *upcomingManeuver __attribute__((swift_name("upcomingManeuver"))) __attribute__((deprecated("Use formatted values on this class directly")));
- (instancetype)initWithPrimaryManeuverInfo:(NSDKMManeuverUIStatePrimaryManeuverInfo *)primaryManeuverInfo secondaryManeuverInfo:(id<NSDKMManeuverUIStateSecondaryManeuverInfo> _Nullable)secondaryManeuverInfo upcomingManeuver:(NSDKMManeuver *)upcomingManeuver followingManeuver:(NSDKMManeuver * _Nullable)followingManeuver laneInfo:(NSDKMLaneInfo * _Nullable)laneInfo __attribute__((swift_name("init(primaryManeuverInfo:secondaryManeuverInfo:upcomingManeuver:followingManeuver:laneInfo:)"))) __attribute__((objc_designated_initializer));
- (NSDKMManeuverUIStateFollowingRoute *)doCopyPrimaryManeuverInfo:(NSDKMManeuverUIStatePrimaryManeuverInfo *)primaryManeuverInfo secondaryManeuverInfo:(id<NSDKMManeuverUIStateSecondaryManeuverInfo> _Nullable)secondaryManeuverInfo upcomingManeuver:(NSDKMManeuver *)upcomingManeuver followingManeuver:(NSDKMManeuver * _Nullable)followingManeuver laneInfo:(NSDKMLaneInfo * _Nullable)laneInfo __attribute__((swift_name("doCopy(primaryManeuverInfo:secondaryManeuverInfo:upcomingManeuver:followingManeuver:laneInfo:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManeuverUIStateLoading")))
@interface NSDKMManeuverUIStateLoading : NSDKMBase <NSDKMManeuverUIState>
@property (readonly) BOOL detached __attribute__((swift_name("detached")));
- (instancetype)initWithDetached:(BOOL)detached __attribute__((swift_name("init(detached:)"))) __attribute__((objc_designated_initializer));
- (NSDKMManeuverUIStateLoading *)doCopyDetached:(BOOL)detached __attribute__((swift_name("doCopy(detached:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManeuverUIStatePrimaryManeuverInfo")))
@interface NSDKMManeuverUIStatePrimaryManeuverInfo : NSDKMBase
@property (readonly) NSString * _Nullable destinationName __attribute__((swift_name("destinationName")));
@property (readonly) NSDKMDistanceConverterResult *distance __attribute__((swift_name("distance"))) __attribute__((deprecated("Use formatted values on this class directly")));
@property (readonly) NSDKMDistanceConverterResult *formattedDistance __attribute__((swift_name("formattedDistance")));
@property (readonly) NSDKMManeuverIconProviderManeuverIcon *maneuverIcon __attribute__((swift_name("maneuverIcon")));
- (instancetype)initWithManeuverIcon:(NSDKMManeuverIconProviderManeuverIcon *)maneuverIcon formattedDistance:(NSDKMDistanceConverterResult *)formattedDistance destinationName:(NSString * _Nullable)destinationName __attribute__((swift_name("init(maneuverIcon:formattedDistance:destinationName:)"))) __attribute__((objc_designated_initializer));
- (NSDKMManeuverUIStatePrimaryManeuverInfo *)doCopyManeuverIcon:(NSDKMManeuverIconProviderManeuverIcon *)maneuverIcon formattedDistance:(NSDKMDistanceConverterResult *)formattedDistance destinationName:(NSString * _Nullable)destinationName __attribute__((swift_name("doCopy(maneuverIcon:formattedDistance:destinationName:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("ManeuverUIStateSecondaryManeuverInfo")))
@protocol NSDKMManeuverUIStateSecondaryManeuverInfo
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManeuverUIStateSecondaryManeuverInfoFollowingManeuver")))
@interface NSDKMManeuverUIStateSecondaryManeuverInfoFollowingManeuver : NSDKMBase <NSDKMManeuverUIStateSecondaryManeuverInfo>
@property (readonly) NSDKMDistanceConverterResult *distance __attribute__((swift_name("distance"))) __attribute__((deprecated("Use formatted values on this class directly")));
@property (readonly) NSDKMDistanceConverterResult *formattedDistance __attribute__((swift_name("formattedDistance")));
@property (readonly) NSDKMManeuverIconProviderManeuverIcon *maneuverIcon __attribute__((swift_name("maneuverIcon")));
- (instancetype)initWithManeuverIcon:(NSDKMManeuverIconProviderManeuverIcon *)maneuverIcon formattedDistance:(NSDKMDistanceConverterResult *)formattedDistance __attribute__((swift_name("init(maneuverIcon:formattedDistance:)"))) __attribute__((objc_designated_initializer));
- (NSDKMManeuverUIStateSecondaryManeuverInfoFollowingManeuver *)doCopyManeuverIcon:(NSDKMManeuverIconProviderManeuverIcon *)maneuverIcon formattedDistance:(NSDKMDistanceConverterResult *)formattedDistance __attribute__((swift_name("doCopy(maneuverIcon:formattedDistance:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManeuverUIStateSecondaryManeuverInfoLaneInfo")))
@interface NSDKMManeuverUIStateSecondaryManeuverInfoLaneInfo : NSDKMBase <NSDKMManeuverUIStateSecondaryManeuverInfo>
@property (readonly) NSArray<NSDKMLaneIconProviderLaneIcon *> *laneIcons __attribute__((swift_name("laneIcons")));
- (instancetype)initWithLaneIcons:(NSArray<NSDKMLaneIconProviderLaneIcon *> *)laneIcons __attribute__((swift_name("init(laneIcons:)"))) __attribute__((objc_designated_initializer));
- (NSDKMManeuverUIStateSecondaryManeuverInfoLaneInfo *)doCopyLaneIcons:(NSArray<NSDKMLaneIconProviderLaneIcon *> *)laneIcons __attribute__((swift_name("doCopy(laneIcons:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("ManeuverUIStateConverter")))
@interface NSDKMManeuverUIStateConverter : NSDKMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id<NSDKMManeuverUIState>)convertNavigationState:(NSDKMNavigationState * _Nullable)navigationState lastManeuverUIState:(id<NSDKMManeuverUIState> _Nullable)lastManeuverUIState detached:(BOOL)detached __attribute__((swift_name("convert(navigationState:lastManeuverUIState:detached:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormattedManeuverUIState")))
@interface NSDKMFormattedManeuverUIState : NSDKMBase
@property (readonly) NSDKMManeuverUIStatePrimaryManeuverInfo *primaryManeuverInfo __attribute__((swift_name("primaryManeuverInfo")));
@property (readonly) id<NSDKMManeuverUIStateSecondaryManeuverInfo> _Nullable secondaryManeuverInfo __attribute__((swift_name("secondaryManeuverInfo")));
- (instancetype)initWithPrimaryManeuverInfo:(NSDKMManeuverUIStatePrimaryManeuverInfo *)primaryManeuverInfo secondaryManeuverInfo:(id<NSDKMManeuverUIStateSecondaryManeuverInfo> _Nullable)secondaryManeuverInfo __attribute__((swift_name("init(primaryManeuverInfo:secondaryManeuverInfo:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("Use formatted values of `ManeuverUIState` directly")));
- (NSDKMFormattedManeuverUIState *)doCopyPrimaryManeuverInfo:(NSDKMManeuverUIStatePrimaryManeuverInfo *)primaryManeuverInfo secondaryManeuverInfo:(id<NSDKMManeuverUIStateSecondaryManeuverInfo> _Nullable)secondaryManeuverInfo __attribute__((swift_name("doCopy(primaryManeuverInfo:secondaryManeuverInfo:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManeuverUIStateFormatter")))
@interface NSDKMManeuverUIStateFormatter : NSDKMBase
@property (class, readonly, getter=shared) NSDKMManeuverUIStateFormatter *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)maneuverUIStateFormatter __attribute__((swift_name("init()")));
- (NSDKMFormattedManeuverUIState *)convertManeuverUIState:(NSDKMManeuverUIStateFollowingRoute *)maneuverUIState __attribute__((swift_name("convert(maneuverUIState:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HourCycle")))
@interface NSDKMHourCycle : NSDKMKotlinEnum<NSDKMHourCycle *>
@property (class, readonly) NSDKMHourCycle *zeroToEleven __attribute__((swift_name("zeroToEleven")));
@property (class, readonly) NSDKMHourCycle *zeroToTwentyThree __attribute__((swift_name("zeroToTwentyThree")));
@property (class, readonly) NSDKMHourCycle *oneToTwelve __attribute__((swift_name("oneToTwelve")));
@property (class, readonly) NSDKMHourCycle *oneToTwentyFour __attribute__((swift_name("oneToTwentyFour")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMHourCycle *> *)values __attribute__((swift_name("values()")));
@end

@interface NSDKMBaseNavigationSdk (Extensions)
- (NSDKMKotlinUnit *(^(^)(NSDKMKotlinUnit *(^)(NSDKMRouteData *, NSDKMKotlinUnit *), NSDKMKotlinUnit *(^)(NSError *, NSDKMKotlinUnit *), NSDKMKotlinUnit *(^)(NSError *, NSDKMKotlinUnit *)))(void))requestStaticRouteDataOrigin:(NSDKMLocation *)origin destination:(id<NSDKMRoutable>)destination vehicleConfig:(id<NSDKMVehicleConfig> _Nullable)vehicleConfig __attribute__((swift_name("requestStaticRouteData(origin:destination:vehicleConfig:)")));
- (NSDKMKotlinUnit *(^(^)(NSDKMKotlinUnit *(^)(NSDKMRoute *, NSDKMKotlinUnit *), NSDKMKotlinUnit *(^)(NSError *, NSDKMKotlinUnit *), NSDKMKotlinUnit *(^)(NSError *, NSDKMKotlinUnit *)))(void))requestStaticRouteOrigin:(NSDKMLocation *)origin destination:(id<NSDKMRoutable>)destination vehicleConfig:(id<NSDKMVehicleConfig> _Nullable)vehicleConfig __attribute__((swift_name("requestStaticRoute(origin:destination:vehicleConfig:)")));
- (void)updateLocationClLocation:(CLLocation *)clLocation __attribute__((swift_name("updateLocation(clLocation:)")));
@end

@interface NSDKMRouteComparisonProvider (Extensions)
- (NSDKMKotlinUnit *(^(^)(NSDKMKotlinUnit *(^)(NSDKMRouteComparisonResult *, NSDKMKotlinUnit *), NSDKMKotlinUnit *(^)(NSError *, NSDKMKotlinUnit *), NSDKMKotlinUnit *(^)(NSError *, NSDKMKotlinUnit *)))(void))createRouteComparisonResultDefault:(NSDKMRoute *)default_ comparisonRoute:(NSDKMRoute *)comparisonRoute __attribute__((swift_name("createRouteComparisonResult(default:comparisonRoute:)")));
- (NSDKMKotlinUnit *(^(^)(NSDKMKotlinUnit *(^)(NSDKMRouteComparisonResult *, NSDKMKotlinUnit *), NSDKMKotlinUnit *(^)(NSError *, NSDKMKotlinUnit *), NSDKMKotlinUnit *(^)(NSError *, NSDKMKotlinUnit *)))(void))requestRouteComparisonOrigin:(NSDKMLocation *)origin destination:(id<NSDKMRoutable>)destination vehicleConfig:(id<NSDKMVehicleConfig> _Nullable)vehicleConfig __attribute__((swift_name("requestRouteComparison(origin:destination:vehicleConfig:)")));
- (NSDKMKotlinUnit *(^(^)(NSDKMKotlinUnit *(^)(NSDKMRouteComparisonResult *, NSDKMKotlinUnit *), NSDKMKotlinUnit *(^)(NSError *, NSDKMKotlinUnit *), NSDKMKotlinUnit *(^)(NSError *, NSDKMKotlinUnit *)))(void))requestRouteComparisonRouteRequest:(NSDKMRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("requestRouteComparison(routeRequest:)")));
@end

@interface NSDKMOnRouteProjectorProjectedLocation (Extensions)
- (NSArray<NSDKMRouteWaypoint *> *)remainingWaypoints __attribute__((swift_name("remainingWaypoints()")));
@end

@interface NSDKMRoute (Extensions)
- (BOOL)isFullRoute __attribute__((swift_name("isFullRoute()")));
@end

@interface NSDKMRouteWaypoint (Extensions)
- (BOOL)isTurnCommand __attribute__((swift_name("isTurnCommand()")));
@end

@interface NSDKMLocation (Extensions)
@property (readonly) CLLocation *clLocation __attribute__((swift_name("clLocation"))) __attribute__((deprecated("Use `CLLocationConverter` instead.")));
- (NSDKMLength *)distanceFromLocation:(NSDKMLocation *)location __attribute__((swift_name("distanceFrom(location:)"))) __attribute__((deprecated("Use `Geodesy` instead.")));
@end

@interface NSDKMLocationCompanion (Extensions)
- (NSDKMLocation *)fromLatLng:(NSDKMLatLng *)latLng __attribute__((swift_name("from(latLng:)"))) __attribute__((deprecated("Use initializer instead")));
- (NSDKMLocation *)fromClLocation:(CLLocation *)clLocation __attribute__((swift_name("from(clLocation:)"))) __attribute__((deprecated("Use `CLLocationConverter` instead.")));
@end

@interface NSDKMGMLog (Extensions)
- (void)eTag:(NSString * _Nullable)tag error:(NSError *)error __attribute__((swift_name("e(tag:error:)")));
- (void)eError:(NSError *)error __attribute__((swift_name("e(error:)")));
@end

@interface NSDKMDuration (Extensions)
@property (readonly) double timeInterval __attribute__((swift_name("timeInterval")));
- (NSDKMDuration *)fromTimeInterval:(double)timeInterval __attribute__((swift_name("from(timeInterval:)")));
@end

@interface NSDKMLength (Extensions)
- (NSDKMSpeed *)divDuration:(NSDKMDuration *)duration __attribute__((swift_name("div(duration:)")));
- (NSDKMDuration *)divSpeed:(NSDKMSpeed *)speed __attribute__((swift_name("div(speed:)")));
@end

@interface NSDKMTimestamp (Extensions)
- (BOOL)isOlderThanDuration:(NSDKMDuration *)duration __attribute__((swift_name("isOlderThan(duration:)")));
@end

@interface NSDKMSpeed (Extensions)
- (NSDKMLength *)timesOther:(NSDKMDuration *)other __attribute__((swift_name("times(other:)")));
@end

@interface NSDKMGMAnalytics (Extensions)
- (void)postErrorError:(NSError *)error __attribute__((swift_name("postError(error:)")));
- (void)postErrorError:(NSError *)error properties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("postError(error:properties:)")));
@end

@interface NSDKMLatLng (Extensions)
@property (readonly) NSDKMKotlinCValue<id> *clLocationCoordinate2DCValue __attribute__((swift_name("clLocationCoordinate2DCValue")));
@property (readonly) BOOL isValid __attribute__((swift_name("isValid")));
- (NSDKMLength *)distanceFromLatLng:(NSDKMLatLng *)latLng __attribute__((swift_name("distanceFrom(latLng:)"))) __attribute__((deprecated("Use `Geodesy` instead.")));
@end

@interface NSDKMLatLngCompanion (Extensions)
@property (readonly) NSDKMLatLng *graphmastersOfficeHanover __attribute__((swift_name("graphmastersOfficeHanover")));
@property (readonly) NSDKMLatLng *graphmastersOfficeVienna __attribute__((swift_name("graphmastersOfficeVienna")));
@property (readonly) NSDKMLatLng *invalid __attribute__((swift_name("invalid")));
- (NSDKMLatLng *)fromCoordinate:(void *)coordinate __attribute__((swift_name("from(coordinate:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinDelegates")))
@interface NSDKMKotlinDelegates : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKotlinDelegates *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)delegates __attribute__((swift_name("init()")));
- (id<NSDKMKotlinReadWriteProperty>)notNull __attribute__((swift_name("notNull()")));
- (id<NSDKMKotlinReadWriteProperty>)observableInitialValue:(id _Nullable)initialValue onChange:(void (^)(id<NSDKMKotlinKProperty>, id _Nullable, id _Nullable))onChange __attribute__((swift_name("observable(initialValue:onChange:)")));
- (id<NSDKMKotlinReadWriteProperty>)vetoableInitialValue:(id _Nullable)initialValue onChange:(NSDKMBoolean *(^)(id<NSDKMKotlinKProperty>, id _Nullable, id _Nullable))onChange __attribute__((swift_name("vetoable(initialValue:onChange:)")));
@end

@interface NSDKMKotlinDelegates (Extensions)
- (id<NSDKMKotlinReadWriteProperty>)onChangeInitialValue:(id _Nullable)initialValue onChange:(void (^)(id _Nullable))onChange __attribute__((swift_name("onChange(initialValue:onChange:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("__SkieSuspendWrappersKt")))
@interface NSDKM__SkieSuspendWrappersKt : NSDKMBase
+ (void)Skie_Suspend__0__hasNextDispatchReceiver:(NSDKMSkieColdFlowIterator<id> *)dispatchReceiver suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__0__hasNext(dispatchReceiver:suspendHandler:)")));
+ (void)Skie_Suspend__1__collectDispatchReceiver:(id<NSDKMKotlinx_coroutines_coreFlow>)dispatchReceiver collector:(id<NSDKMKotlinx_coroutines_coreFlowCollector>)collector suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__1__collect(dispatchReceiver:collector:suspendHandler:)")));
+ (void)Skie_Suspend__2__emitDispatchReceiver:(id<NSDKMKotlinx_coroutines_coreFlowCollector>)dispatchReceiver value:(id _Nullable)value suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__2__emit(dispatchReceiver:value:suspendHandler:)")));
+ (void)Skie_Suspend__3__executeDispatchReceiver:(id<NSDKMKtor_client_coreHttpClientEngine>)dispatchReceiver data:(NSDKMKtor_client_coreHttpRequestData *)data suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__3__execute(dispatchReceiver:data:suspendHandler:)")));
+ (void)Skie_Suspend__4__writeToDispatchReceiver:(NSDKMKtor_httpOutgoingContentWriteChannelContent *)dispatchReceiver channel:(id<NSDKMKtor_ioByteWriteChannel>)channel suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__4__writeTo(dispatchReceiver:channel:suspendHandler:)")));
+ (void)Skie_Suspend__5__upgradeDispatchReceiver:(NSDKMKtor_httpOutgoingContentProtocolUpgrade *)dispatchReceiver input:(id<NSDKMKtor_ioByteReadChannel>)input output:(id<NSDKMKtor_ioByteWriteChannel>)output engineContext:(id<NSDKMKotlinCoroutineContext>)engineContext userContext:(id<NSDKMKotlinCoroutineContext>)userContext suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__5__upgrade(dispatchReceiver:input:output:engineContext:userContext:suspendHandler:)")));
+ (void)Skie_Suspend__6__executeDispatchReceiver:(NSDKMKtor_utilsPipeline<id, id> *)dispatchReceiver context:(id)context subject:(id)subject suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__6__execute(dispatchReceiver:context:subject:suspendHandler:)")));
+ (void)Skie_Suspend__7__awaitContentDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__7__awaitContent(dispatchReceiver:suspendHandler:)")));
+ (void)Skie_Suspend__8__discardDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver max:(int64_t)max suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__8__discard(dispatchReceiver:max:suspendHandler:)")));
+ (void)Skie_Suspend__9__peekToDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver destination:(NSDKMKtor_ioMemory *)destination destinationOffset:(int64_t)destinationOffset offset:(int64_t)offset min:(int64_t)min max:(int64_t)max suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__9__peekTo(dispatchReceiver:destination:destinationOffset:offset:min:max:suspendHandler:)")));
+ (void)Skie_Suspend__10__readAvailableDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver dst:(NSDKMKtor_ioChunkBuffer *)dst suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__10__readAvailable(dispatchReceiver:dst:suspendHandler:)")));
+ (void)Skie_Suspend__11__readAvailableDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver dst:(NSDKMKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__11__readAvailable(dispatchReceiver:dst:offset:length:suspendHandler:)")));
+ (void)Skie_Suspend__12__readAvailableDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver dst:(void *)dst offset:(int32_t)offset length:(int32_t)length suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__12__readAvailable(dispatchReceiver:dst:offset:length:suspendHandler:)")));
+ (void)Skie_Suspend__13__readAvailableDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver dst:(void *)dst offset:(int64_t)offset length:(int64_t)length suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__13__readAvailable(dispatchReceiver:dst:offset:length:suspendHandler:)")));
+ (void)Skie_Suspend__14__readBooleanDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__14__readBoolean(dispatchReceiver:suspendHandler:)")));
+ (void)Skie_Suspend__15__readByteDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__15__readByte(dispatchReceiver:suspendHandler:)")));
+ (void)Skie_Suspend__16__readDoubleDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__16__readDouble(dispatchReceiver:suspendHandler:)")));
+ (void)Skie_Suspend__17__readFloatDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__17__readFloat(dispatchReceiver:suspendHandler:)")));
+ (void)Skie_Suspend__18__readFullyDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver dst:(NSDKMKtor_ioChunkBuffer *)dst n:(int32_t)n suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__18__readFully(dispatchReceiver:dst:n:suspendHandler:)")));
+ (void)Skie_Suspend__19__readFullyDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver dst:(NSDKMKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__19__readFully(dispatchReceiver:dst:offset:length:suspendHandler:)")));
+ (void)Skie_Suspend__20__readFullyDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver dst:(void *)dst offset:(int32_t)offset length:(int32_t)length suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__20__readFully(dispatchReceiver:dst:offset:length:suspendHandler:)")));
+ (void)Skie_Suspend__21__readFullyDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver dst:(void *)dst offset:(int64_t)offset length:(int64_t)length suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__21__readFully(dispatchReceiver:dst:offset:length:suspendHandler:)")));
+ (void)Skie_Suspend__22__readIntDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__22__readInt(dispatchReceiver:suspendHandler:)")));
+ (void)Skie_Suspend__23__readLongDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__23__readLong(dispatchReceiver:suspendHandler:)")));
+ (void)Skie_Suspend__24__readPacketDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver size:(int32_t)size suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__24__readPacket(dispatchReceiver:size:suspendHandler:)")));
+ (void)Skie_Suspend__25__readRemainingDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver limit:(int64_t)limit suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__25__readRemaining(dispatchReceiver:limit:suspendHandler:)")));
+ (void)Skie_Suspend__26__readShortDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__26__readShort(dispatchReceiver:suspendHandler:)")));
+ (void)Skie_Suspend__27__readSuspendableSessionDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver consumer:(id<NSDKMKotlinSuspendFunction1>)consumer suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__27__readSuspendableSession(dispatchReceiver:consumer:suspendHandler:)")));
+ (void)Skie_Suspend__28__readUTF8LineDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver limit:(int32_t)limit suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__28__readUTF8Line(dispatchReceiver:limit:suspendHandler:)")));
+ (void)Skie_Suspend__29__readUTF8LineToDispatchReceiver:(id<NSDKMKtor_ioByteReadChannel>)dispatchReceiver out:(id<NSDKMKotlinAppendable>)out limit:(int32_t)limit suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__29__readUTF8LineTo(dispatchReceiver:out:limit:suspendHandler:)")));
+ (void)Skie_Suspend__30__awaitFreeSpaceDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__30__awaitFreeSpace(dispatchReceiver:suspendHandler:)")));
+ (void)Skie_Suspend__31__writeAvailableDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver src:(NSDKMKtor_ioChunkBuffer *)src suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__31__writeAvailable(dispatchReceiver:src:suspendHandler:)")));
+ (void)Skie_Suspend__32__writeAvailableDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver src:(NSDKMKotlinByteArray *)src offset:(int32_t)offset length:(int32_t)length suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__32__writeAvailable(dispatchReceiver:src:offset:length:suspendHandler:)")));
+ (void)Skie_Suspend__33__writeAvailableDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver src:(void *)src offset:(int32_t)offset length:(int32_t)length suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__33__writeAvailable(dispatchReceiver:src:offset:length:suspendHandler:)")));
+ (void)Skie_Suspend__34__writeAvailableDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver src:(void *)src offset:(int64_t)offset length:(int64_t)length suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__34__writeAvailable(dispatchReceiver:src:offset:length:suspendHandler:)")));
+ (void)Skie_Suspend__35__writeByteDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver b:(int8_t)b suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__35__writeByte(dispatchReceiver:b:suspendHandler:)")));
+ (void)Skie_Suspend__36__writeDoubleDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver d:(double)d suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__36__writeDouble(dispatchReceiver:d:suspendHandler:)")));
+ (void)Skie_Suspend__37__writeFloatDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver f:(float)f suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__37__writeFloat(dispatchReceiver:f:suspendHandler:)")));
+ (void)Skie_Suspend__38__writeFullyDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver memory:(NSDKMKtor_ioMemory *)memory startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__38__writeFully(dispatchReceiver:memory:startIndex:endIndex:suspendHandler:)")));
+ (void)Skie_Suspend__39__writeFullyDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver src:(NSDKMKtor_ioBuffer *)src suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__39__writeFully(dispatchReceiver:src:suspendHandler:)")));
+ (void)Skie_Suspend__40__writeFullyDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver src:(NSDKMKotlinByteArray *)src offset:(int32_t)offset length:(int32_t)length suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__40__writeFully(dispatchReceiver:src:offset:length:suspendHandler:)")));
+ (void)Skie_Suspend__41__writeFullyDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver src:(void *)src offset:(int32_t)offset length:(int32_t)length suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__41__writeFully(dispatchReceiver:src:offset:length:suspendHandler:)")));
+ (void)Skie_Suspend__42__writeFullyDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver src:(void *)src offset:(int64_t)offset length:(int64_t)length suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__42__writeFully(dispatchReceiver:src:offset:length:suspendHandler:)")));
+ (void)Skie_Suspend__43__writeIntDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver i:(int32_t)i suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__43__writeInt(dispatchReceiver:i:suspendHandler:)")));
+ (void)Skie_Suspend__44__writeLongDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver l:(int64_t)l suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__44__writeLong(dispatchReceiver:l:suspendHandler:)")));
+ (void)Skie_Suspend__45__writePacketDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver packet:(NSDKMKtor_ioByteReadPacket *)packet suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__45__writePacket(dispatchReceiver:packet:suspendHandler:)")));
+ (void)Skie_Suspend__46__writeShortDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver s:(int16_t)s suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__46__writeShort(dispatchReceiver:s:suspendHandler:)")));
+ (void)Skie_Suspend__47__writeSuspendSessionDispatchReceiver:(id<NSDKMKtor_ioByteWriteChannel>)dispatchReceiver visitor:(id<NSDKMKotlinSuspendFunction1>)visitor suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__47__writeSuspendSession(dispatchReceiver:visitor:suspendHandler:)")));
+ (void)Skie_Suspend__48__joinDispatchReceiver:(id<NSDKMKotlinx_coroutines_coreJob>)dispatchReceiver suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__48__join(dispatchReceiver:suspendHandler:)")));
+ (void)Skie_Suspend__49__invokeDispatchReceiver:(id<NSDKMKotlinSuspendFunction2>)dispatchReceiver p1:(id _Nullable)p1 p2:(id _Nullable)p2 suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__49__invoke(dispatchReceiver:p1:p2:suspendHandler:)")));
+ (void)Skie_Suspend__50__bodyDispatchReceiver:(NSDKMKtor_client_coreHttpClientCall *)dispatchReceiver info:(NSDKMKtor_utilsTypeInfo *)info suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__50__body(dispatchReceiver:info:suspendHandler:)")));
+ (void)Skie_Suspend__51__bodyNullableDispatchReceiver:(NSDKMKtor_client_coreHttpClientCall *)dispatchReceiver info:(NSDKMKtor_utilsTypeInfo *)info suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__51__bodyNullable(dispatchReceiver:info:suspendHandler:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
+ (void)Skie_Suspend__52__getResponseContentDispatchReceiver:(NSDKMKtor_client_coreHttpClientCall *)dispatchReceiver suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__52__getResponseContent(dispatchReceiver:suspendHandler:)")));
+ (void)Skie_Suspend__53__invokeDispatchReceiver:(id<NSDKMKotlinSuspendFunction1>)dispatchReceiver p1:(id _Nullable)p1 suspendHandler:(NSDKMSkie_SuspendHandler *)suspendHandler __attribute__((swift_name("Skie_Suspend__53__invoke(dispatchReceiver:p1:suspendHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SkieTypeExportsKt")))
@interface NSDKMSkieTypeExportsKt : NSDKMBase
+ (void)skieTypeExportsP0:(NSDKMKtor_httpOutgoingContentNoContent *)p0 p1:(NSDKMKtor_httpOutgoingContentReadChannelContent *)p1 p2:(NSDKMKtor_httpOutgoingContentWriteChannelContent *)p2 p3:(NSDKMKtor_httpOutgoingContentByteArrayContent *)p3 p4:(NSDKMKtor_httpOutgoingContentProtocolUpgrade *)p4 p5:(NSDKMKotlinx_serialization_corePolymorphicKind *)p5 p6:(NSDKMKotlinx_serialization_corePrimitiveKind *)p6 p7:(NSDKMKotlinx_serialization_coreSerialKindCONTEXTUAL *)p7 p8:(NSDKMKotlinx_serialization_coreSerialKindENUM *)p8 p9:(NSDKMKotlinx_serialization_coreStructureKind *)p9 p10:(NSDKMKotlinx_serialization_corePolymorphicKindOPEN *)p10 p11:(NSDKMKotlinx_serialization_corePolymorphicKindSEALED *)p11 p12:(NSDKMKotlinx_serialization_corePrimitiveKindBOOLEAN *)p12 p13:(NSDKMKotlinx_serialization_corePrimitiveKindBYTE *)p13 p14:(NSDKMKotlinx_serialization_corePrimitiveKindCHAR *)p14 p15:(NSDKMKotlinx_serialization_corePrimitiveKindDOUBLE *)p15 p16:(NSDKMKotlinx_serialization_corePrimitiveKindFLOAT *)p16 p17:(NSDKMKotlinx_serialization_corePrimitiveKindINT *)p17 p18:(NSDKMKotlinx_serialization_corePrimitiveKindLONG *)p18 p19:(NSDKMKotlinx_serialization_corePrimitiveKindSHORT *)p19 p20:(NSDKMKotlinx_serialization_corePrimitiveKindSTRING *)p20 p21:(NSDKMKotlinx_serialization_coreStructureKindCLASS *)p21 p22:(NSDKMKotlinx_serialization_coreStructureKindLIST *)p22 p23:(NSDKMKotlinx_serialization_coreStructureKindMAP *)p23 p24:(NSDKMKotlinx_serialization_coreStructureKindOBJECT *)p24 p25:(id<NSDKMKotlinx_coroutines_coreSelectClause1>)p25 p26:(id<NSDKMKotlinx_coroutines_coreSelectClause2>)p26 __attribute__((swift_name("skieTypeExports(p0:p1:p2:p3:p4:p5:p6:p7:p8:p9:p10:p11:p12:p13:p14:p15:p16:p17:p18:p19:p20:p21:p22:p23:p24:p25:p26:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationSdkNativeKt")))
@interface NSDKMNavigationSdkNativeKt : NSDKMBase
+ (NSDKMKotlinUnit *(^(^)(NSDKMKotlinUnit *(^)(NSDKMRouteData *, NSDKMKotlinUnit *), NSDKMKotlinUnit *(^)(NSError *, NSDKMKotlinUnit *), NSDKMKotlinUnit *(^)(NSError *, NSDKMKotlinUnit *)))(void))requestStaticRouteData:(id<NSDKMNavigationSdk>)receiver origin:(NSDKMLocation *)origin destination:(id<NSDKMRoutable>)destination vehicleConfig:(id<NSDKMVehicleConfig> _Nullable)vehicleConfig __attribute__((swift_name("requestStaticRouteData(_:origin:destination:vehicleConfig:)")));
+ (NSDKMKotlinUnit *(^(^)(NSDKMKotlinUnit *(^)(NSDKMRoute *, NSDKMKotlinUnit *), NSDKMKotlinUnit *(^)(NSError *, NSDKMKotlinUnit *), NSDKMKotlinUnit *(^)(NSError *, NSDKMKotlinUnit *)))(void))requestStaticRoute:(id<NSDKMNavigationSdk>)receiver origin:(NSDKMLocation *)origin destination:(id<NSDKMRoutable>)destination vehicleConfig:(id<NSDKMVehicleConfig> _Nullable)vehicleConfig __attribute__((swift_name("requestStaticRoute(_:origin:destination:vehicleConfig:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("VehicleConfigKt")))
@interface NSDKMVehicleConfigKt : NSDKMBase
@property (class, readonly) NSString *KEY_BICYCLE __attribute__((swift_name("KEY_BICYCLE")));
@property (class, readonly) NSString *KEY_BUS __attribute__((swift_name("KEY_BUS")));
@property (class, readonly) NSString *KEY_CAR __attribute__((swift_name("KEY_CAR")));
@property (class, readonly) NSString *KEY_MOTORBIKE __attribute__((swift_name("KEY_MOTORBIKE")));
@property (class, readonly) NSString *KEY_TRUCK __attribute__((swift_name("KEY_TRUCK")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocationKt")))
@interface NSDKMLocationKt : NSDKMBase
+ (NSDKMLocation *)LocationLatLng:(NSDKMLatLng *)latLng __attribute__((swift_name("Location(latLng:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DurationKt")))
@interface NSDKMDurationKt : NSDKMBase
+ (NSDKMDuration *)hours:(int32_t)receiver __attribute__((swift_name("hours(_:)")));
+ (NSDKMDuration *)milliseconds:(int32_t)receiver __attribute__((swift_name("milliseconds(_:)")));
+ (NSDKMDuration *)minutes:(int32_t)receiver __attribute__((swift_name("minutes(_:)")));
+ (NSDKMDuration *)seconds:(int32_t)receiver __attribute__((swift_name("seconds(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LengthKt")))
@interface NSDKMLengthKt : NSDKMBase
+ (NSDKMLength *)kilometers:(double)receiver __attribute__((swift_name("kilometers(_:)")));
+ (NSDKMLength *)meters:(double)receiver __attribute__((swift_name("meters(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SpeedKt")))
@interface NSDKMSpeedKt : NSDKMBase
+ (NSDKMSpeed *)kmh:(double)receiver __attribute__((swift_name("kmh(_:)")));
+ (NSDKMSpeed *)ms:(double)receiver __attribute__((swift_name("ms(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NormalizedKt")))
@interface NSDKMNormalizedKt : NSDKMBase
+ (double)normalize:(double)receiver range:(NSDKMKotlinIntRange *)range __attribute__((swift_name("normalize(_:range:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateKt")))
@interface NSDKMDateKt : NSDKMBase
+ (int64_t)millisecondsSince1970:(NSDate *)receiver __attribute__((swift_name("millisecondsSince1970(_:)")));
+ (NSDate *)from:(Class)receiver millisecondsSince1970:(int64_t)millisecondsSince1970 __attribute__((swift_name("from(_:millisecondsSince1970:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeProviderKt")))
@interface NSDKMTimeProviderKt : NSDKMBase
+ (NSDKMTimestamp *)currentTimestamp:(id<NSDKMTimeProvider>)receiver __attribute__((swift_name("currentTimestamp(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinArray")))
@interface NSDKMKotlinArray<T> : NSDKMBase
@property (readonly) int32_t size __attribute__((swift_name("size")));
+ (instancetype)arrayWithSize:(int32_t)size init:(T _Nullable (^)(NSDKMInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (T _Nullable)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (id<NSDKMKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(T _Nullable)value __attribute__((swift_name("set(index:value:)")));
@end

__attribute__((swift_name("KotlinIterable")))
@protocol NSDKMKotlinIterable
@required
- (id<NSDKMKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
@end

__attribute__((swift_name("KotlinIntProgression")))
@interface NSDKMKotlinIntProgression : NSDKMBase <NSDKMKotlinIterable>
@property (class, readonly, getter=companion) NSDKMKotlinIntProgressionCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) int32_t first __attribute__((swift_name("first")));
@property (readonly) int32_t last __attribute__((swift_name("last")));
@property (readonly) int32_t step __attribute__((swift_name("step")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (NSDKMKotlinIntIterator *)iterator __attribute__((swift_name("iterator()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("KotlinClosedRange")))
@protocol NSDKMKotlinClosedRange
@required
- (BOOL)containsValue:(id)value __attribute__((swift_name("contains(value:)")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
@property (readonly) id endInclusive __attribute__((swift_name("endInclusive")));
@property (readonly, getter=start_) id start __attribute__((swift_name("start")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.7")
 *   kotlin.ExperimentalStdlibApi
*/
__attribute__((swift_name("KotlinOpenEndRange")))
@protocol NSDKMKotlinOpenEndRange
@required
- (BOOL)containsValue_:(id)value __attribute__((swift_name("contains(value_:)")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
@property (readonly) id endExclusive __attribute__((swift_name("endExclusive")));
@property (readonly, getter=start_) id start __attribute__((swift_name("start")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinIntRange")))
@interface NSDKMKotlinIntRange : NSDKMKotlinIntProgression <NSDKMKotlinClosedRange, NSDKMKotlinOpenEndRange>
@property (class, readonly, getter=companion) NSDKMKotlinIntRangeCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSDKMInt *endExclusive __attribute__((swift_name("endExclusive"))) __attribute__((deprecated("Can throw an exception when it's impossible to represent the value with Int type, for example, when the range includes MAX_VALUE. It's recommended to use 'endInclusive' property that doesn't throw.")));
@property (readonly) NSDKMInt *endInclusive __attribute__((swift_name("endInclusive")));
@property (readonly, getter=start_) NSDKMInt *start __attribute__((swift_name("start")));
- (instancetype)initWithStart:(int32_t)start endInclusive:(int32_t)endInclusive __attribute__((swift_name("init(start:endInclusive:)"))) __attribute__((objc_designated_initializer));
- (BOOL)containsValue:(NSDKMInt *)value __attribute__((swift_name("contains(value:)")));
- (BOOL)containsValue_:(NSDKMInt *)value __attribute__((swift_name("contains(value_:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (NSString *)description __attribute__((swift_name("description()")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.7")
 *   kotlin.ExperimentalStdlibApi
*/
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinFloatArray")))
@interface NSDKMKotlinFloatArray : NSDKMBase
@property (readonly) int32_t size __attribute__((swift_name("size")));
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(NSDKMFloat *(^)(NSDKMInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (float)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (NSDKMKotlinFloatIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(float)value __attribute__((swift_name("set(index:value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinEnumCompanion")))
@interface NSDKMKotlinEnumCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKotlinEnumCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("KotlinLongProgression")))
@interface NSDKMKotlinLongProgression : NSDKMBase <NSDKMKotlinIterable>
@property (class, readonly, getter=companion) NSDKMKotlinLongProgressionCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) int64_t first __attribute__((swift_name("first")));
@property (readonly) int64_t last __attribute__((swift_name("last")));
@property (readonly) int64_t step __attribute__((swift_name("step")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (NSDKMKotlinLongIterator *)iterator __attribute__((swift_name("iterator()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLongRange")))
@interface NSDKMKotlinLongRange : NSDKMKotlinLongProgression <NSDKMKotlinClosedRange, NSDKMKotlinOpenEndRange>
@property (class, readonly, getter=companion) NSDKMKotlinLongRangeCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSDKMLong *endExclusive __attribute__((swift_name("endExclusive"))) __attribute__((deprecated("Can throw an exception when it's impossible to represent the value with Long type, for example, when the range includes MAX_VALUE. It's recommended to use 'endInclusive' property that doesn't throw.")));
@property (readonly) NSDKMLong *endInclusive __attribute__((swift_name("endInclusive")));
@property (readonly, getter=start_) NSDKMLong *start __attribute__((swift_name("start")));
- (instancetype)initWithStart:(int64_t)start endInclusive:(int64_t)endInclusive __attribute__((swift_name("init(start:endInclusive:)"))) __attribute__((objc_designated_initializer));
- (BOOL)containsValue:(NSDKMLong *)value __attribute__((swift_name("contains(value:)")));
- (BOOL)containsValue_:(NSDKMLong *)value __attribute__((swift_name("contains(value_:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (NSString *)description __attribute__((swift_name("description()")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.7")
 *   kotlin.ExperimentalStdlibApi
*/
@end

__attribute__((swift_name("Kotlinx_coroutines_coreCoroutineScope")))
@protocol NSDKMKotlinx_coroutines_coreCoroutineScope
@required
@property (readonly) id<NSDKMKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@end

__attribute__((swift_name("Ktor_ioCloseable")))
@protocol NSDKMKtor_ioCloseable
@required
- (void)close __attribute__((swift_name("close()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpClient")))
@interface NSDKMKtor_client_coreHttpClient : NSDKMBase <NSDKMKotlinx_coroutines_coreCoroutineScope, NSDKMKtor_ioCloseable>
@property (readonly) id<NSDKMKtor_utilsAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) id<NSDKMKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) id<NSDKMKtor_client_coreHttpClientEngine> engine __attribute__((swift_name("engine")));
@property (readonly) NSDKMKtor_client_coreHttpClientEngineConfig *engineConfig __attribute__((swift_name("engineConfig")));
@property (readonly) NSDKMKtor_eventsEvents *monitor __attribute__((swift_name("monitor")));
@property (readonly) NSDKMKtor_client_coreHttpReceivePipeline *receivePipeline __attribute__((swift_name("receivePipeline")));
@property (readonly) NSDKMKtor_client_coreHttpRequestPipeline *requestPipeline __attribute__((swift_name("requestPipeline")));
@property (readonly) NSDKMKtor_client_coreHttpResponsePipeline *responsePipeline __attribute__((swift_name("responsePipeline")));
@property (readonly) NSDKMKtor_client_coreHttpSendPipeline *sendPipeline __attribute__((swift_name("sendPipeline")));
- (instancetype)initWithEngine:(id<NSDKMKtor_client_coreHttpClientEngine>)engine userConfig:(NSDKMKtor_client_coreHttpClientConfig<NSDKMKtor_client_coreHttpClientEngineConfig *> *)userConfig __attribute__((swift_name("init(engine:userConfig:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
- (NSDKMKtor_client_coreHttpClient *)configBlock:(void (^)(NSDKMKtor_client_coreHttpClientConfig<id> *))block __attribute__((swift_name("config(block:)")));
- (BOOL)isSupportedCapability:(id<NSDKMKtor_client_coreHttpClientEngineCapability>)capability __attribute__((swift_name("isSupported(capability:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("Ktor_client_coreHttpClientEngine")))
@protocol NSDKMKtor_client_coreHttpClientEngine <NSDKMKotlinx_coroutines_coreCoroutineScope, NSDKMKtor_ioCloseable>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeData:(NSDKMKtor_client_coreHttpRequestData *)data completionHandler:(void (^)(NSDKMKtor_client_coreHttpResponseData * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(data:completionHandler:)")));
- (void)installClient:(NSDKMKtor_client_coreHttpClient *)client __attribute__((swift_name("install(client:)")));
@property (readonly) NSDKMKtor_client_coreHttpClientEngineConfig *config __attribute__((swift_name("config")));
@property (readonly) NSDKMKotlinx_coroutines_coreCoroutineDispatcher *dispatcher __attribute__((swift_name("dispatcher")));
@property (readonly) NSSet<id<NSDKMKtor_client_coreHttpClientEngineCapability>> *supportedCapabilities __attribute__((swift_name("supportedCapabilities")));
@end

__attribute__((swift_name("KotlinRuntimeException")))
@interface NSDKMKotlinRuntimeException : NSDKMKotlinException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("KotlinIllegalStateException")))
@interface NSDKMKotlinIllegalStateException : NSDKMKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("Kotlinx_serialization_coreSerializationStrategy")))
@protocol NSDKMKotlinx_serialization_coreSerializationStrategy
@required
- (void)serializeEncoder:(id<NSDKMKotlinx_serialization_coreEncoder>)encoder value:(id _Nullable)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<NSDKMKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end

__attribute__((swift_name("Kotlinx_serialization_coreDeserializationStrategy")))
@protocol NSDKMKotlinx_serialization_coreDeserializationStrategy
@required
- (id _Nullable)deserializeDecoder:(id<NSDKMKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
@property (readonly) id<NSDKMKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end

__attribute__((swift_name("Kotlinx_serialization_coreKSerializer")))
@protocol NSDKMKotlinx_serialization_coreKSerializer <NSDKMKotlinx_serialization_coreSerializationStrategy, NSDKMKotlinx_serialization_coreDeserializationStrategy>
@required
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
__attribute__((swift_name("KotlinCoroutineContext")))
@protocol NSDKMKotlinCoroutineContext
@required
- (id _Nullable)foldInitial:(id _Nullable)initial operation:(id _Nullable (^)(id _Nullable, id<NSDKMKotlinCoroutineContextElement>))operation __attribute__((swift_name("fold(initial:operation:)")));
- (id<NSDKMKotlinCoroutineContextElement> _Nullable)getKey:(id<NSDKMKotlinCoroutineContextKey>)key __attribute__((swift_name("get(key:)")));
- (id<NSDKMKotlinCoroutineContext>)minusKeyKey:(id<NSDKMKotlinCoroutineContextKey>)key __attribute__((swift_name("minusKey(key:)")));
- (id<NSDKMKotlinCoroutineContext>)plusContext:(id<NSDKMKotlinCoroutineContext>)context __attribute__((swift_name("plus(context:)")));
@end

__attribute__((swift_name("KotlinCoroutineContextElement")))
@protocol NSDKMKotlinCoroutineContextElement <NSDKMKotlinCoroutineContext>
@required
@property (readonly) id<NSDKMKotlinCoroutineContextKey> key __attribute__((swift_name("key")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
__attribute__((swift_name("KotlinAbstractCoroutineContextElement")))
@interface NSDKMKotlinAbstractCoroutineContextElement : NSDKMBase <NSDKMKotlinCoroutineContextElement>
@property (readonly) id<NSDKMKotlinCoroutineContextKey> key __attribute__((swift_name("key")));
- (instancetype)initWithKey:(id<NSDKMKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
__attribute__((swift_name("KotlinContinuationInterceptor")))
@protocol NSDKMKotlinContinuationInterceptor <NSDKMKotlinCoroutineContextElement>
@required
- (id<NSDKMKotlinContinuation>)interceptContinuationContinuation:(id<NSDKMKotlinContinuation>)continuation __attribute__((swift_name("interceptContinuation(continuation:)")));
- (void)releaseInterceptedContinuationContinuation:(id<NSDKMKotlinContinuation>)continuation __attribute__((swift_name("releaseInterceptedContinuation(continuation:)")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreCoroutineDispatcher")))
@interface NSDKMKotlinx_coroutines_coreCoroutineDispatcher : NSDKMKotlinAbstractCoroutineContextElement <NSDKMKotlinContinuationInterceptor>
@property (class, readonly, getter=companion) NSDKMKotlinx_coroutines_coreCoroutineDispatcherKey *companion __attribute__((swift_name("companion")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithKey:(id<NSDKMKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (void)dispatchContext:(id<NSDKMKotlinCoroutineContext>)context block:(id<NSDKMKotlinx_coroutines_coreRunnable>)block __attribute__((swift_name("dispatch(context:block:)")));
- (void)dispatchYieldContext:(id<NSDKMKotlinCoroutineContext>)context block:(id<NSDKMKotlinx_coroutines_coreRunnable>)block __attribute__((swift_name("dispatchYield(context:block:)")));
- (id<NSDKMKotlinContinuation>)interceptContinuationContinuation:(id<NSDKMKotlinContinuation>)continuation __attribute__((swift_name("interceptContinuation(continuation:)")));
- (BOOL)isDispatchNeededContext:(id<NSDKMKotlinCoroutineContext>)context __attribute__((swift_name("isDispatchNeeded(context:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
- (NSDKMKotlinx_coroutines_coreCoroutineDispatcher *)limitedParallelismParallelism:(int32_t)parallelism __attribute__((swift_name("limitedParallelism(parallelism:)")));
- (NSDKMKotlinx_coroutines_coreCoroutineDispatcher *)plusOther:(NSDKMKotlinx_coroutines_coreCoroutineDispatcher *)other __attribute__((swift_name("plus(other:)"))) __attribute__((unavailable("Operator '+' on two CoroutineDispatcher objects is meaningless. CoroutineDispatcher is a coroutine context element and `+` is a set-sum operator for coroutine contexts. The dispatcher to the right of `+` just replaces the dispatcher to the left.")));
- (void)releaseInterceptedContinuationContinuation:(id<NSDKMKotlinContinuation>)continuation __attribute__((swift_name("releaseInterceptedContinuation(continuation:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinDoubleArray")))
@interface NSDKMKotlinDoubleArray : NSDKMBase
@property (readonly) int32_t size __attribute__((swift_name("size")));
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(NSDKMDouble *(^)(NSDKMInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (double)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (NSDKMKotlinDoubleIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(double)value __attribute__((swift_name("set(index:value:)")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.4")
*/
__attribute__((swift_name("KotlinCancellationException")))
@interface NSDKMKotlinCancellationException : NSDKMKotlinIllegalStateException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreRunnable")))
@protocol NSDKMKotlinx_coroutines_coreRunnable
@required
- (void)run __attribute__((swift_name("run()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinUnit")))
@interface NSDKMKotlinUnit : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKotlinUnit *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)unit __attribute__((swift_name("init()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("KotlinCValuesRef")))
@interface NSDKMKotlinCValuesRef<T> : NSDKMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void *)getPointerScope:(NSDKMKotlinAutofreeScope *)scope __attribute__((swift_name("getPointer(scope:)")));
@end

__attribute__((swift_name("KotlinCValues")))
@interface NSDKMKotlinCValues<T> : NSDKMKotlinCValuesRef<T>
@property (readonly) int32_t align __attribute__((swift_name("align")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (void *)getPointerScope:(NSDKMKotlinAutofreeScope *)scope __attribute__((swift_name("getPointer(scope:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (void *)placePlacement:(void *)placement __attribute__((swift_name("place(placement:)")));
@end

__attribute__((swift_name("KotlinCValue")))
@interface NSDKMKotlinCValue<T> : NSDKMKotlinCValues<T>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end

__attribute__((swift_name("KotlinReadOnlyProperty")))
@protocol NSDKMKotlinReadOnlyProperty
@required
- (id _Nullable)getValueThisRef:(id _Nullable)thisRef property:(id<NSDKMKotlinKProperty>)property __attribute__((swift_name("getValue(thisRef:property:)")));
@end

__attribute__((swift_name("KotlinReadWriteProperty")))
@protocol NSDKMKotlinReadWriteProperty <NSDKMKotlinReadOnlyProperty>
@required
- (void)setValueThisRef:(id _Nullable)thisRef property:(id<NSDKMKotlinKProperty>)property value:(id _Nullable)value __attribute__((swift_name("setValue(thisRef:property:value:)")));
@end

__attribute__((swift_name("KotlinKAnnotatedElement")))
@protocol NSDKMKotlinKAnnotatedElement
@required
@end

__attribute__((swift_name("KotlinKCallable")))
@protocol NSDKMKotlinKCallable <NSDKMKotlinKAnnotatedElement>
@required
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) id<NSDKMKotlinKType> returnType __attribute__((swift_name("returnType")));
@end

__attribute__((swift_name("KotlinKProperty")))
@protocol NSDKMKotlinKProperty <NSDKMKotlinKCallable>
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpRequestData")))
@interface NSDKMKtor_client_coreHttpRequestData : NSDKMBase
@property (readonly) id<NSDKMKtor_utilsAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) NSDKMKtor_httpOutgoingContent *body __attribute__((swift_name("body")));
@property (readonly) id<NSDKMKotlinx_coroutines_coreJob> executionContext __attribute__((swift_name("executionContext")));
@property (readonly) id<NSDKMKtor_httpHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) NSDKMKtor_httpHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) NSDKMKtor_httpUrl *url __attribute__((swift_name("url")));
- (instancetype)initWithUrl:(NSDKMKtor_httpUrl *)url method:(NSDKMKtor_httpHttpMethod *)method headers:(id<NSDKMKtor_httpHeaders>)headers body:(NSDKMKtor_httpOutgoingContent *)body executionContext:(id<NSDKMKotlinx_coroutines_coreJob>)executionContext attributes:(id<NSDKMKtor_utilsAttributes>)attributes __attribute__((swift_name("init(url:method:headers:body:executionContext:attributes:)"))) __attribute__((objc_designated_initializer));
- (id _Nullable)getCapabilityOrNullKey:(id<NSDKMKtor_client_coreHttpClientEngineCapability>)key __attribute__((swift_name("getCapabilityOrNull(key:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("Ktor_httpOutgoingContent")))
@interface NSDKMKtor_httpOutgoingContent : NSDKMBase
@property (readonly) NSDKMLong * _Nullable contentLength __attribute__((swift_name("contentLength")));
@property (readonly) NSDKMKtor_httpContentType * _Nullable contentType __attribute__((swift_name("contentType")));
@property (readonly) id<NSDKMKtor_httpHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) NSDKMKtor_httpHttpStatusCode * _Nullable status __attribute__((swift_name("status")));
- (id _Nullable)getPropertyKey:(NSDKMKtor_utilsAttributeKey<id> *)key __attribute__((swift_name("getProperty(key:)")));
- (void)setPropertyKey:(NSDKMKtor_utilsAttributeKey<id> *)key value:(id _Nullable)value __attribute__((swift_name("setProperty(key:value:)")));
- (id<NSDKMKtor_httpHeaders> _Nullable)trailers __attribute__((swift_name("trailers()")));
@end

__attribute__((swift_name("Ktor_httpOutgoingContent.WriteChannelContent")))
@interface NSDKMKtor_httpOutgoingContentWriteChannelContent : NSDKMKtor_httpOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeToChannel:(id<NSDKMKtor_ioByteWriteChannel>)channel completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeTo(channel:completionHandler:)")));
@end

__attribute__((swift_name("Ktor_ioByteWriteChannel")))
@protocol NSDKMKtor_ioByteWriteChannel
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitFreeSpaceWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("awaitFreeSpace(completionHandler:)")));
- (BOOL)closeCause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("close(cause:)")));
- (void)flush __attribute__((swift_name("flush()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(NSDKMKtor_ioChunkBuffer *)src completionHandler:(void (^)(NSDKMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(NSDKMKotlinByteArray *)src offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(NSDKMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:offset:length:completionHandler:)")));
- (int32_t)writeAvailableMin:(int32_t)min block:(void (^)(NSDKMKtor_ioBuffer *))block __attribute__((swift_name("writeAvailable(min:block:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(void *)src offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(NSDKMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:offset:length:completionHandler_:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(void *)src offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(NSDKMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:offset:length:completionHandler__:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeByteB:(int8_t)b completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeByte(b:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeDoubleD:(double)d completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeDouble(d:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFloatF:(float)f completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFloat(f:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullyMemory:(NSDKMKtor_ioMemory *)memory startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(memory:startIndex:endIndex:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(NSDKMKtor_ioBuffer *)src completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(NSDKMKotlinByteArray *)src offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:offset:length:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(void *)src offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:offset:length:completionHandler_:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(void *)src offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:offset:length:completionHandler__:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeIntI:(int32_t)i completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeInt(i:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeLongL:(int64_t)l completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeLong(l:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writePacketPacket:(NSDKMKtor_ioByteReadPacket *)packet completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writePacket(packet:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeShortS:(int16_t)s completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeShort(s:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeSuspendSessionVisitor:(id<NSDKMKotlinSuspendFunction1>)visitor completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeSuspendSession(visitor:completionHandler:)"))) __attribute__((deprecated("Use write { } instead.")));
@property (readonly) BOOL autoFlush __attribute__((swift_name("autoFlush")));
@property (readonly) int32_t availableForWrite __attribute__((swift_name("availableForWrite")));
@property (readonly) NSDKMKotlinThrowable * _Nullable closedCause __attribute__((swift_name("closedCause")));
@property (readonly) BOOL isClosedForWrite __attribute__((swift_name("isClosedForWrite")));
@property (readonly) int64_t totalBytesWritten __attribute__((swift_name("totalBytesWritten")));
@end

__attribute__((swift_name("Ktor_httpOutgoingContent.ProtocolUpgrade")))
@interface NSDKMKtor_httpOutgoingContentProtocolUpgrade : NSDKMKtor_httpOutgoingContent
@property (readonly) NSDKMKtor_httpHttpStatusCode *status __attribute__((swift_name("status")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)upgradeInput:(id<NSDKMKtor_ioByteReadChannel>)input output:(id<NSDKMKtor_ioByteWriteChannel>)output engineContext:(id<NSDKMKotlinCoroutineContext>)engineContext userContext:(id<NSDKMKotlinCoroutineContext>)userContext completionHandler:(void (^)(id<NSDKMKotlinx_coroutines_coreJob> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("upgrade(input:output:engineContext:userContext:completionHandler:)")));
@end

__attribute__((swift_name("Ktor_ioByteReadChannel")))
@protocol NSDKMKtor_ioByteReadChannel
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitContentWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("awaitContent(completionHandler:)")));
- (BOOL)cancelCause:(NSDKMKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(cause:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)discardMax:(int64_t)max completionHandler:(void (^)(NSDKMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("discard(max:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)peekToDestination:(NSDKMKtor_ioMemory *)destination destinationOffset:(int64_t)destinationOffset offset:(int64_t)offset min:(int64_t)min max:(int64_t)max completionHandler:(void (^)(NSDKMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("peekTo(destination:destinationOffset:offset:min:max:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(NSDKMKtor_ioChunkBuffer *)dst completionHandler:(void (^)(NSDKMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(NSDKMKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(NSDKMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:offset:length:completionHandler:)")));
- (int32_t)readAvailableMin:(int32_t)min block:(void (^)(NSDKMKtor_ioBuffer *))block __attribute__((swift_name("readAvailable(min:block:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(void *)dst offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(NSDKMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:offset:length:completionHandler_:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(void *)dst offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(NSDKMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:offset:length:completionHandler__:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readBooleanWithCompletionHandler:(void (^)(NSDKMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readBoolean(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readByteWithCompletionHandler:(void (^)(NSDKMByte * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readByte(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readDoubleWithCompletionHandler:(void (^)(NSDKMDouble * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readDouble(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFloatWithCompletionHandler:(void (^)(NSDKMFloat * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFloat(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(NSDKMKtor_ioChunkBuffer *)dst n:(int32_t)n completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:n:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(NSDKMKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:offset:length:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(void *)dst offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:offset:length:completionHandler_:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(void *)dst offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:offset:length:completionHandler__:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readIntWithCompletionHandler:(void (^)(NSDKMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readInt(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readLongWithCompletionHandler:(void (^)(NSDKMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readLong(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readPacketSize:(int32_t)size completionHandler:(void (^)(NSDKMKtor_ioByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readPacket(size:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readRemainingLimit:(int64_t)limit completionHandler:(void (^)(NSDKMKtor_ioByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readRemaining(limit:completionHandler:)")));
- (void)readSessionConsumer:(void (^)(id<NSDKMKtor_ioReadSession>))consumer __attribute__((swift_name("readSession(consumer:)"))) __attribute__((deprecated("Use read { } instead.")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readShortWithCompletionHandler:(void (^)(NSDKMShort * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readShort(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readSuspendableSessionConsumer:(id<NSDKMKotlinSuspendFunction1>)consumer completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readSuspendableSession(consumer:completionHandler:)"))) __attribute__((deprecated("Use read { } instead.")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readUTF8LineLimit:(int32_t)limit completionHandler:(void (^)(NSString * _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8Line(limit:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readUTF8LineToOut:(id<NSDKMKotlinAppendable>)out limit:(int32_t)limit completionHandler:(void (^)(NSDKMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8LineTo(out:limit:completionHandler:)")));
@property (readonly) int32_t availableForRead __attribute__((swift_name("availableForRead")));
@property (readonly) NSDKMKotlinThrowable * _Nullable closedCause __attribute__((swift_name("closedCause")));
@property (readonly) BOOL isClosedForRead __attribute__((swift_name("isClosedForRead")));
@property (readonly) BOOL isClosedForWrite __attribute__((swift_name("isClosedForWrite")));
@property (readonly) int64_t totalBytesRead __attribute__((swift_name("totalBytesRead")));
@end

__attribute__((swift_name("Ktor_utilsPipeline")))
@interface NSDKMKtor_utilsPipeline<TSubject, TContext> : NSDKMBase
@property (readonly) id<NSDKMKtor_utilsAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@property (readonly, getter=isEmpty_) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) NSArray<NSDKMKtor_utilsPipelinePhase *> *items __attribute__((swift_name("items")));
- (instancetype)initWithPhase:(NSDKMKtor_utilsPipelinePhase *)phase interceptors:(NSArray<id<NSDKMKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhases:(NSDKMKotlinArray<NSDKMKtor_utilsPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer));
- (void)addPhasePhase:(NSDKMKtor_utilsPipelinePhase *)phase __attribute__((swift_name("addPhase(phase:)")));
- (void)afterIntercepted __attribute__((swift_name("afterIntercepted()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeContext:(TContext)context subject:(TSubject)subject completionHandler:(void (^)(TSubject _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(context:subject:completionHandler:)")));
- (void)insertPhaseAfterReference:(NSDKMKtor_utilsPipelinePhase *)reference phase:(NSDKMKtor_utilsPipelinePhase *)phase __attribute__((swift_name("insertPhaseAfter(reference:phase:)")));
- (void)insertPhaseBeforeReference:(NSDKMKtor_utilsPipelinePhase *)reference phase:(NSDKMKtor_utilsPipelinePhase *)phase __attribute__((swift_name("insertPhaseBefore(reference:phase:)")));
- (void)interceptPhase:(NSDKMKtor_utilsPipelinePhase *)phase block:(id<NSDKMKotlinSuspendFunction2>)block __attribute__((swift_name("intercept(phase:block:)")));
- (NSArray<id<NSDKMKotlinSuspendFunction2>> *)interceptorsForPhasePhase:(NSDKMKtor_utilsPipelinePhase *)phase __attribute__((swift_name("interceptorsForPhase(phase:)")));
- (void)mergeFrom:(NSDKMKtor_utilsPipeline<TSubject, TContext> *)from __attribute__((swift_name("merge(from:)")));
- (void)mergePhasesFrom:(NSDKMKtor_utilsPipeline<TSubject, TContext> *)from __attribute__((swift_name("mergePhases(from:)")));
- (void)resetFromFrom:(NSDKMKtor_utilsPipeline<TSubject, TContext> *)from __attribute__((swift_name("resetFrom(from:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioMemory")))
@interface NSDKMKtor_ioMemory : NSDKMBase
@property (class, readonly, getter=companion) NSDKMKtor_ioMemoryCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) void *pointer __attribute__((swift_name("pointer")));
@property (readonly) int64_t size __attribute__((swift_name("size")));
@property (readonly) int32_t size32 __attribute__((swift_name("size32")));
- (instancetype)initWithPointer:(void *)pointer size:(int64_t)size __attribute__((swift_name("init(pointer:size:)"))) __attribute__((objc_designated_initializer));
- (void)doCopyToDestination:(NSDKMKtor_ioMemory *)destination offset:(int32_t)offset length:(int32_t)length destinationOffset:(int32_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset:)")));
- (void)doCopyToDestination:(NSDKMKtor_ioMemory *)destination offset:(int64_t)offset length:(int64_t)length destinationOffset_:(int64_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset_:)")));
- (int8_t)loadAtIndex:(int32_t)index __attribute__((swift_name("loadAt(index:)")));
- (int8_t)loadAtIndex_:(int64_t)index __attribute__((swift_name("loadAt(index_:)")));
- (NSDKMKtor_ioMemory *)sliceOffset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("slice(offset:length:)")));
- (NSDKMKtor_ioMemory *)sliceOffset:(int64_t)offset length_:(int64_t)length __attribute__((swift_name("slice(offset:length_:)")));
- (void)storeAtIndex:(int32_t)index value:(int8_t)value __attribute__((swift_name("storeAt(index:value:)")));
- (void)storeAtIndex:(int64_t)index value_:(int8_t)value __attribute__((swift_name("storeAt(index:value_:)")));
@end

__attribute__((swift_name("Ktor_ioBuffer")))
@interface NSDKMKtor_ioBuffer : NSDKMBase
@property (class, readonly, getter=companion) NSDKMKtor_ioBufferCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@property (readonly) int32_t endGap __attribute__((swift_name("endGap")));
@property (readonly) int32_t limit __attribute__((swift_name("limit")));
@property (readonly) NSDKMKtor_ioMemory *memory __attribute__((swift_name("memory")));
@property (readonly) int32_t readPosition __attribute__((swift_name("readPosition")));
@property (readonly) int32_t readRemaining __attribute__((swift_name("readRemaining")));
@property (readonly) int32_t startGap __attribute__((swift_name("startGap")));
@property (readonly) int32_t writePosition __attribute__((swift_name("writePosition")));
@property (readonly) int32_t writeRemaining __attribute__((swift_name("writeRemaining")));
- (instancetype)initWithMemory:(NSDKMKtor_ioMemory *)memory __attribute__((swift_name("init(memory:)"))) __attribute__((objc_designated_initializer));
- (void)commitWrittenCount:(int32_t)count __attribute__((swift_name("commitWritten(count:)")));
- (void)discardExactCount:(int32_t)count __attribute__((swift_name("discardExact(count:)")));
- (NSDKMKtor_ioBuffer *)duplicate __attribute__((swift_name("duplicate()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)duplicateToCopy:(NSDKMKtor_ioBuffer *)copy __attribute__((swift_name("duplicateTo(copy:)")));
- (int8_t)readByte __attribute__((swift_name("readByte()")));
- (void)reserveEndGapEndGap:(int32_t)endGap __attribute__((swift_name("reserveEndGap(endGap:)")));
- (void)reserveStartGapStartGap:(int32_t)startGap __attribute__((swift_name("reserveStartGap(startGap:)")));
- (void)reset __attribute__((swift_name("reset()")));
- (void)resetForRead __attribute__((swift_name("resetForRead()")));
- (void)resetForWrite __attribute__((swift_name("resetForWrite()")));
- (void)resetForWriteLimit:(int32_t)limit __attribute__((swift_name("resetForWrite(limit:)")));
- (void)rewindCount:(int32_t)count __attribute__((swift_name("rewind(count:)")));
- (NSString *)description __attribute__((swift_name("description()")));
- (int32_t)tryPeekByte __attribute__((swift_name("tryPeekByte()")));
- (int32_t)tryReadByte __attribute__((swift_name("tryReadByte()")));
- (void)writeByteValue:(int8_t)value __attribute__((swift_name("writeByte(value:)")));
@end

__attribute__((swift_name("Ktor_ioChunkBuffer")))
@interface NSDKMKtor_ioChunkBuffer : NSDKMKtor_ioBuffer
@property (class, readonly, getter=companion) NSDKMKtor_ioChunkBufferCompanion *companion __attribute__((swift_name("companion")));
@property (getter=next_) NSDKMKtor_ioChunkBuffer * _Nullable next __attribute__((swift_name("next")));
@property (readonly) NSDKMKtor_ioChunkBuffer * _Nullable origin __attribute__((swift_name("origin")));
@property (readonly) int32_t referenceCount __attribute__((swift_name("referenceCount")));
- (instancetype)initWithMemory:(NSDKMKtor_ioMemory *)memory origin:(NSDKMKtor_ioChunkBuffer * _Nullable)origin parentPool:(id<NSDKMKtor_ioObjectPool> _Nullable)parentPool __attribute__((swift_name("init(memory:origin:parentPool:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMemory:(NSDKMKtor_ioMemory *)memory __attribute__((swift_name("init(memory:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSDKMKtor_ioChunkBuffer * _Nullable)cleanNext __attribute__((swift_name("cleanNext()")));
- (NSDKMKtor_ioChunkBuffer *)duplicate __attribute__((swift_name("duplicate()")));
- (void)releasePool:(id<NSDKMKtor_ioObjectPool>)pool __attribute__((swift_name("release(pool:)")));
- (void)reset __attribute__((swift_name("reset()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinByteArray")))
@interface NSDKMKotlinByteArray : NSDKMBase
@property (readonly) int32_t size __attribute__((swift_name("size")));
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(NSDKMByte *(^)(NSDKMInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (int8_t)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (NSDKMKotlinByteIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(int8_t)value __attribute__((swift_name("set(index:value:)")));
@end

__attribute__((swift_name("KotlinFunction")))
@protocol NSDKMKotlinFunction
@required
@end

__attribute__((swift_name("KotlinSuspendFunction1")))
@protocol NSDKMKotlinSuspendFunction1 <NSDKMKotlinFunction>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:completionHandler:)")));
@end

__attribute__((swift_name("KotlinAppendable")))
@protocol NSDKMKotlinAppendable
@required
- (id<NSDKMKotlinAppendable>)appendValue:(unichar)value __attribute__((swift_name("append(value:)")));
- (id<NSDKMKotlinAppendable>)appendValue_:(id _Nullable)value __attribute__((swift_name("append(value_:)")));
- (id<NSDKMKotlinAppendable>)appendValue:(id _Nullable)value startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex __attribute__((swift_name("append(value:startIndex:endIndex:)")));
@end

__attribute__((swift_name("Ktor_ioInput")))
@interface NSDKMKtor_ioInput : NSDKMBase <NSDKMKtor_ioCloseable>
@property (class, readonly, getter=companion) NSDKMKtor_ioInputCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL endOfInput __attribute__((swift_name("endOfInput")));
@property (readonly) id<NSDKMKtor_ioObjectPool> pool __attribute__((swift_name("pool")));
@property (readonly) int64_t remaining __attribute__((swift_name("remaining")));
- (instancetype)initWithHead:(NSDKMKtor_ioChunkBuffer *)head remaining:(int64_t)remaining pool:(id<NSDKMKtor_ioObjectPool>)pool __attribute__((swift_name("init(head:remaining:pool:)"))) __attribute__((objc_designated_initializer));
- (BOOL)canRead __attribute__((swift_name("canRead()")));
- (void)close __attribute__((swift_name("close()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)closeSource __attribute__((swift_name("closeSource()")));
- (int32_t)discardN:(int32_t)n __attribute__((swift_name("discard(n:)")));
- (int64_t)discardN_:(int64_t)n __attribute__((swift_name("discard(n_:)")));
- (void)discardExactN:(int32_t)n __attribute__((swift_name("discardExact(n:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSDKMKtor_ioChunkBuffer * _Nullable)fill __attribute__((swift_name("fill()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (int32_t)fillDestination:(NSDKMKtor_ioMemory *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("fill(destination:offset:length:)")));
- (BOOL)hasBytesN:(int32_t)n __attribute__((swift_name("hasBytes(n:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)markNoMoreChunksAvailable __attribute__((swift_name("markNoMoreChunksAvailable()")));
- (int64_t)peekToDestination:(NSDKMKtor_ioMemory *)destination destinationOffset:(int64_t)destinationOffset offset:(int64_t)offset min:(int64_t)min max:(int64_t)max __attribute__((swift_name("peekTo(destination:destinationOffset:offset:min:max:)")));
- (int32_t)peekToBuffer:(NSDKMKtor_ioChunkBuffer *)buffer __attribute__((swift_name("peekTo(buffer:)")));
- (int8_t)readByte __attribute__((swift_name("readByte()")));
- (NSString *)readTextMin:(int32_t)min max:(int32_t)max __attribute__((swift_name("readText(min:max:)")));
- (int32_t)readTextOut:(id<NSDKMKotlinAppendable>)out min:(int32_t)min max:(int32_t)max __attribute__((swift_name("readText(out:min:max:)")));
- (NSString *)readTextExactExactCharacters:(int32_t)exactCharacters __attribute__((swift_name("readTextExact(exactCharacters:)")));
- (void)readTextExactOut:(id<NSDKMKotlinAppendable>)out exactCharacters:(int32_t)exactCharacters __attribute__((swift_name("readTextExact(out:exactCharacters:)")));
- (void)release_ __attribute__((swift_name("release()")));
- (int32_t)tryPeek __attribute__((swift_name("tryPeek()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioByteReadPacket")))
@interface NSDKMKtor_ioByteReadPacket : NSDKMKtor_ioInput
@property (class, readonly, getter=companion) NSDKMKtor_ioByteReadPacketCompanion *companion __attribute__((swift_name("companion")));
- (instancetype)initWithHead:(NSDKMKtor_ioChunkBuffer *)head pool:(id<NSDKMKtor_ioObjectPool>)pool __attribute__((swift_name("init(head:pool:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithHead:(NSDKMKtor_ioChunkBuffer *)head remaining:(int64_t)remaining pool:(id<NSDKMKtor_ioObjectPool>)pool __attribute__((swift_name("init(head:remaining:pool:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)closeSource __attribute__((swift_name("closeSource()")));
- (NSDKMKtor_ioByteReadPacket *)doCopy __attribute__((swift_name("doCopy()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSDKMKtor_ioChunkBuffer * _Nullable)fill __attribute__((swift_name("fill()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (int32_t)fillDestination:(NSDKMKtor_ioMemory *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("fill(destination:offset:length:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreJob")))
@protocol NSDKMKotlinx_coroutines_coreJob <NSDKMKotlinCoroutineContextElement>
@required
- (id<NSDKMKotlinx_coroutines_coreChildHandle>)attachChildChild:(id<NSDKMKotlinx_coroutines_coreChildJob>)child __attribute__((swift_name("attachChild(child:)")));
- (void)cancelCause_:(NSDKMKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause_:)")));
- (NSDKMKotlinCancellationException *)getCancellationException __attribute__((swift_name("getCancellationException()")));
- (id<NSDKMKotlinx_coroutines_coreDisposableHandle>)invokeOnCompletionOnCancelling:(BOOL)onCancelling invokeImmediately:(BOOL)invokeImmediately handler:(void (^)(NSDKMKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(onCancelling:invokeImmediately:handler:)")));
- (id<NSDKMKotlinx_coroutines_coreDisposableHandle>)invokeOnCompletionHandler:(void (^)(NSDKMKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(handler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)joinWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("join(completionHandler:)")));
- (id<NSDKMKotlinx_coroutines_coreJob>)plusOther_:(id<NSDKMKotlinx_coroutines_coreJob>)other __attribute__((swift_name("plus(other_:)"))) __attribute__((unavailable("Operator '+' on two Job objects is meaningless. Job is a coroutine context element and `+` is a set-sum operator for coroutine contexts. The job to the right of `+` just replaces the job the left of `+`.")));
- (BOOL)start__ __attribute__((swift_name("start_()")));
@property (readonly) id<NSDKMKotlinSequence> children __attribute__((swift_name("children")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive")));
@property (readonly) BOOL isCancelled __attribute__((swift_name("isCancelled")));
@property (readonly) BOOL isCompleted __attribute__((swift_name("isCompleted")));
@property (readonly) id<NSDKMKotlinx_coroutines_coreSelectClause0> onJoin __attribute__((swift_name("onJoin")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
@property (readonly) id<NSDKMKotlinx_coroutines_coreJob> _Nullable parent __attribute__((swift_name("parent")));
@end

__attribute__((swift_name("KotlinSuspendFunction2")))
@protocol NSDKMKotlinSuspendFunction2 <NSDKMKotlinFunction>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:completionHandler:)")));
@end

__attribute__((swift_name("Ktor_client_coreHttpClientCall")))
@interface NSDKMKtor_client_coreHttpClientCall : NSDKMBase <NSDKMKotlinx_coroutines_coreCoroutineScope>
@property (class, readonly, getter=companion) NSDKMKtor_client_coreHttpClientCallCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL allowDoubleReceive __attribute__((swift_name("allowDoubleReceive")));
@property (readonly) id<NSDKMKtor_utilsAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) NSDKMKtor_client_coreHttpClient *client __attribute__((swift_name("client")));
@property (readonly) id<NSDKMKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property id<NSDKMKtor_client_coreHttpRequest> request __attribute__((swift_name("request")));
@property NSDKMKtor_client_coreHttpResponse *response __attribute__((swift_name("response")));
- (instancetype)initWithClient:(NSDKMKtor_client_coreHttpClient *)client requestData:(NSDKMKtor_client_coreHttpRequestData *)requestData responseData:(NSDKMKtor_client_coreHttpResponseData *)responseData __attribute__((swift_name("init(client:requestData:responseData:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithClient:(NSDKMKtor_client_coreHttpClient *)client __attribute__((swift_name("init(client:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyInfo:(NSDKMKtor_utilsTypeInfo *)info completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("body(info:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyNullableInfo:(NSDKMKtor_utilsTypeInfo *)info completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("bodyNullable(info:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)getResponseContentWithCompletionHandler:(void (^)(id<NSDKMKtor_ioByteReadChannel> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("getResponseContent(completionHandler:)")));
- (NSString *)description __attribute__((swift_name("description()")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsTypeInfo")))
@interface NSDKMKtor_utilsTypeInfo : NSDKMBase
@property (readonly) id<NSDKMKotlinKType> _Nullable kotlinType __attribute__((swift_name("kotlinType")));
@property (readonly) id<NSDKMKotlinKType> reifiedType __attribute__((swift_name("reifiedType")));
@property (readonly) id<NSDKMKotlinKClass> type __attribute__((swift_name("type")));
- (instancetype)initWithType:(id<NSDKMKotlinKClass>)type reifiedType:(id<NSDKMKotlinKType>)reifiedType kotlinType:(id<NSDKMKotlinKType> _Nullable)kotlinType __attribute__((swift_name("init(type:reifiedType:kotlinType:)"))) __attribute__((objc_designated_initializer));
- (NSDKMKtor_utilsTypeInfo *)doCopyType:(id<NSDKMKotlinKClass>)type reifiedType:(id<NSDKMKotlinKType>)reifiedType kotlinType:(id<NSDKMKotlinKType> _Nullable)kotlinType __attribute__((swift_name("doCopy(type:reifiedType:kotlinType:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("Ktor_httpOutgoingContent.NoContent")))
@interface NSDKMKtor_httpOutgoingContentNoContent : NSDKMKtor_httpOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end

__attribute__((swift_name("Ktor_httpOutgoingContent.ReadChannelContent")))
@interface NSDKMKtor_httpOutgoingContentReadChannelContent : NSDKMKtor_httpOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id<NSDKMKtor_ioByteReadChannel>)readFrom __attribute__((swift_name("readFrom()")));
- (id<NSDKMKtor_ioByteReadChannel>)readFromRange:(NSDKMKotlinLongRange *)range __attribute__((swift_name("readFrom(range:)")));
@end

__attribute__((swift_name("Ktor_httpOutgoingContent.ByteArrayContent")))
@interface NSDKMKtor_httpOutgoingContentByteArrayContent : NSDKMKtor_httpOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMKotlinByteArray *)bytes __attribute__((swift_name("bytes()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((swift_name("Kotlinx_serialization_coreSerialKind")))
@interface NSDKMKotlinx_serialization_coreSerialKind : NSDKMBase
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((swift_name("Kotlinx_serialization_corePolymorphicKind")))
@interface NSDKMKotlinx_serialization_corePolymorphicKind : NSDKMKotlinx_serialization_coreSerialKind
@end

__attribute__((swift_name("Kotlinx_serialization_corePrimitiveKind")))
@interface NSDKMKotlinx_serialization_corePrimitiveKind : NSDKMKotlinx_serialization_coreSerialKind
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_coreSerialKind.CONTEXTUAL")))
@interface NSDKMKotlinx_serialization_coreSerialKindCONTEXTUAL : NSDKMKotlinx_serialization_coreSerialKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_coreSerialKindCONTEXTUAL *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)cONTEXTUAL __attribute__((swift_name("init()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_coreSerialKind.ENUM")))
@interface NSDKMKotlinx_serialization_coreSerialKindENUM : NSDKMKotlinx_serialization_coreSerialKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_coreSerialKindENUM *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)eNUM __attribute__((swift_name("init()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((swift_name("Kotlinx_serialization_coreStructureKind")))
@interface NSDKMKotlinx_serialization_coreStructureKind : NSDKMKotlinx_serialization_coreSerialKind
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_corePolymorphicKind.OPEN")))
@interface NSDKMKotlinx_serialization_corePolymorphicKindOPEN : NSDKMKotlinx_serialization_corePolymorphicKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_corePolymorphicKindOPEN *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)oPEN __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_corePolymorphicKind.SEALED")))
@interface NSDKMKotlinx_serialization_corePolymorphicKindSEALED : NSDKMKotlinx_serialization_corePolymorphicKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_corePolymorphicKindSEALED *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)sEALED __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_corePrimitiveKind.BOOLEAN")))
@interface NSDKMKotlinx_serialization_corePrimitiveKindBOOLEAN : NSDKMKotlinx_serialization_corePrimitiveKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_corePrimitiveKindBOOLEAN *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)bOOLEAN __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_corePrimitiveKind.BYTE")))
@interface NSDKMKotlinx_serialization_corePrimitiveKindBYTE : NSDKMKotlinx_serialization_corePrimitiveKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_corePrimitiveKindBYTE *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)bYTE __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_corePrimitiveKind.CHAR")))
@interface NSDKMKotlinx_serialization_corePrimitiveKindCHAR : NSDKMKotlinx_serialization_corePrimitiveKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_corePrimitiveKindCHAR *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)cHAR __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_corePrimitiveKind.DOUBLE")))
@interface NSDKMKotlinx_serialization_corePrimitiveKindDOUBLE : NSDKMKotlinx_serialization_corePrimitiveKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_corePrimitiveKindDOUBLE *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dOUBLE __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_corePrimitiveKind.FLOAT")))
@interface NSDKMKotlinx_serialization_corePrimitiveKindFLOAT : NSDKMKotlinx_serialization_corePrimitiveKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_corePrimitiveKindFLOAT *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)fLOAT __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_corePrimitiveKind.INT")))
@interface NSDKMKotlinx_serialization_corePrimitiveKindINT : NSDKMKotlinx_serialization_corePrimitiveKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_corePrimitiveKindINT *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)iNT __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_corePrimitiveKind.LONG")))
@interface NSDKMKotlinx_serialization_corePrimitiveKindLONG : NSDKMKotlinx_serialization_corePrimitiveKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_corePrimitiveKindLONG *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)lONG __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_corePrimitiveKind.SHORT")))
@interface NSDKMKotlinx_serialization_corePrimitiveKindSHORT : NSDKMKotlinx_serialization_corePrimitiveKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_corePrimitiveKindSHORT *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)sHORT __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_corePrimitiveKind.STRING")))
@interface NSDKMKotlinx_serialization_corePrimitiveKindSTRING : NSDKMKotlinx_serialization_corePrimitiveKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_corePrimitiveKindSTRING *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)sTRING __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_coreStructureKind.CLASS")))
@interface NSDKMKotlinx_serialization_coreStructureKindCLASS : NSDKMKotlinx_serialization_coreStructureKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_coreStructureKindCLASS *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)cLASS __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_coreStructureKind.LIST")))
@interface NSDKMKotlinx_serialization_coreStructureKindLIST : NSDKMKotlinx_serialization_coreStructureKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_coreStructureKindLIST *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)lIST __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_coreStructureKind.MAP")))
@interface NSDKMKotlinx_serialization_coreStructureKindMAP : NSDKMKotlinx_serialization_coreStructureKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_coreStructureKindMAP *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)mAP __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_serialization_coreStructureKind.OBJECT")))
@interface NSDKMKotlinx_serialization_coreStructureKindOBJECT : NSDKMKotlinx_serialization_coreStructureKind
@property (class, readonly, getter=shared) NSDKMKotlinx_serialization_coreStructureKindOBJECT *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)oBJECT __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreSelectClause")))
@protocol NSDKMKotlinx_coroutines_coreSelectClause
@required
@property (readonly) id clauseObject __attribute__((swift_name("clauseObject")));
@property (readonly) NSDKMKotlinUnit *(^(^ _Nullable onCancellationConstructor)(id<NSDKMKotlinx_coroutines_coreSelectInstance>, id _Nullable, id _Nullable))(NSDKMKotlinThrowable *) __attribute__((swift_name("onCancellationConstructor")));
@property (readonly) id _Nullable (^processResFunc)(id, id _Nullable, id _Nullable) __attribute__((swift_name("processResFunc")));
@property (readonly) void (^regFunc)(id, id<NSDKMKotlinx_coroutines_coreSelectInstance>, id _Nullable) __attribute__((swift_name("regFunc")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreSelectClause1")))
@protocol NSDKMKotlinx_coroutines_coreSelectClause1 <NSDKMKotlinx_coroutines_coreSelectClause>
@required
@end

__attribute__((swift_name("Kotlinx_coroutines_coreSelectClause2")))
@protocol NSDKMKotlinx_coroutines_coreSelectClause2 <NSDKMKotlinx_coroutines_coreSelectClause>
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinIntProgression.Companion")))
@interface NSDKMKotlinIntProgressionCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKotlinIntProgressionCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMKotlinIntProgression *)fromClosedRangeRangeStart:(int32_t)rangeStart rangeEnd:(int32_t)rangeEnd step:(int32_t)step __attribute__((swift_name("fromClosedRange(rangeStart:rangeEnd:step:)")));
@end

__attribute__((swift_name("KotlinIntIterator")))
@interface NSDKMKotlinIntIterator : NSDKMBase <NSDKMKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMInt *)next __attribute__((swift_name("next()")));
- (int32_t)nextInt __attribute__((swift_name("nextInt()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinIntRange.Companion")))
@interface NSDKMKotlinIntRangeCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKotlinIntRangeCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKotlinIntRange *EMPTY __attribute__((swift_name("EMPTY")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("KotlinFloatIterator")))
@interface NSDKMKotlinFloatIterator : NSDKMBase <NSDKMKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMFloat *)next __attribute__((swift_name("next()")));
- (float)nextFloat __attribute__((swift_name("nextFloat()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLongProgression.Companion")))
@interface NSDKMKotlinLongProgressionCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKotlinLongProgressionCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMKotlinLongProgression *)fromClosedRangeRangeStart:(int64_t)rangeStart rangeEnd:(int64_t)rangeEnd step:(int64_t)step __attribute__((swift_name("fromClosedRange(rangeStart:rangeEnd:step:)")));
@end

__attribute__((swift_name("KotlinLongIterator")))
@interface NSDKMKotlinLongIterator : NSDKMBase <NSDKMKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMLong *)next __attribute__((swift_name("next()")));
- (int64_t)nextLong __attribute__((swift_name("nextLong()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLongRange.Companion")))
@interface NSDKMKotlinLongRangeCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKotlinLongRangeCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKotlinLongRange *EMPTY __attribute__((swift_name("EMPTY")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("Ktor_client_coreHttpClientEngineConfig")))
@interface NSDKMKtor_client_coreHttpClientEngineConfig : NSDKMBase
@property BOOL pipelining __attribute__((swift_name("pipelining")));
@property NSDKMKtor_client_coreProxyConfig * _Nullable proxy __attribute__((swift_name("proxy")));
@property int32_t threadsCount __attribute__((swift_name("threadsCount")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpClientConfig")))
@interface NSDKMKtor_client_coreHttpClientConfig<T> : NSDKMBase
@property BOOL developmentMode __attribute__((swift_name("developmentMode")));
@property BOOL expectSuccess __attribute__((swift_name("expectSuccess")));
@property BOOL followRedirects __attribute__((swift_name("followRedirects")));
@property BOOL useDefaultTransformers __attribute__((swift_name("useDefaultTransformers")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMKtor_client_coreHttpClientConfig<T> *)clone __attribute__((swift_name("clone()")));
- (void)engineBlock:(void (^)(T))block __attribute__((swift_name("engine(block:)")));
- (void)installClient:(NSDKMKtor_client_coreHttpClient *)client __attribute__((swift_name("install(client:)")));
- (void)installPlugin:(id<NSDKMKtor_client_coreHttpClientPlugin>)plugin configure:(void (^)(id))configure __attribute__((swift_name("install(plugin:configure:)")));
- (void)installKey:(NSString *)key block:(void (^)(NSDKMKtor_client_coreHttpClient *))block __attribute__((swift_name("install(key:block:)")));
- (void)plusAssignOther:(NSDKMKtor_client_coreHttpClientConfig<T> *)other __attribute__((swift_name("plusAssign(other:)")));
@end

__attribute__((swift_name("Ktor_client_coreHttpClientEngineCapability")))
@protocol NSDKMKtor_client_coreHttpClientEngineCapability
@required
@end

__attribute__((swift_name("Ktor_utilsAttributes")))
@protocol NSDKMKtor_utilsAttributes
@required
- (id)computeIfAbsentKey:(NSDKMKtor_utilsAttributeKey<id> *)key block:(id (^)(void))block __attribute__((swift_name("computeIfAbsent(key:block:)")));
- (BOOL)containsKey:(NSDKMKtor_utilsAttributeKey<id> *)key __attribute__((swift_name("contains(key:)")));
- (id)getKey_:(NSDKMKtor_utilsAttributeKey<id> *)key __attribute__((swift_name("get(key_:)")));
- (id _Nullable)getOrNullKey:(NSDKMKtor_utilsAttributeKey<id> *)key __attribute__((swift_name("getOrNull(key:)")));
- (void)putKey:(NSDKMKtor_utilsAttributeKey<id> *)key value:(id)value __attribute__((swift_name("put(key:value:)")));
- (void)removeKey:(NSDKMKtor_utilsAttributeKey<id> *)key __attribute__((swift_name("remove(key:)")));
- (id)takeKey:(NSDKMKtor_utilsAttributeKey<id> *)key __attribute__((swift_name("take(key:)")));
- (id _Nullable)takeOrNullKey:(NSDKMKtor_utilsAttributeKey<id> *)key __attribute__((swift_name("takeOrNull(key:)")));
@property (readonly) NSArray<NSDKMKtor_utilsAttributeKey<id> *> *allKeys __attribute__((swift_name("allKeys")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_eventsEvents")))
@interface NSDKMKtor_eventsEvents : NSDKMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)raiseDefinition:(NSDKMKtor_eventsEventDefinition<id> *)definition value:(id _Nullable)value __attribute__((swift_name("raise(definition:value:)")));
- (id<NSDKMKotlinx_coroutines_coreDisposableHandle>)subscribeDefinition:(NSDKMKtor_eventsEventDefinition<id> *)definition handler:(void (^)(id _Nullable))handler __attribute__((swift_name("subscribe(definition:handler:)")));
- (void)unsubscribeDefinition:(NSDKMKtor_eventsEventDefinition<id> *)definition handler:(void (^)(id _Nullable))handler __attribute__((swift_name("unsubscribe(definition:handler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpReceivePipeline")))
@interface NSDKMKtor_client_coreHttpReceivePipeline : NSDKMKtor_utilsPipeline<NSDKMKtor_client_coreHttpResponse *, NSDKMKotlinUnit *>
@property (class, readonly, getter=companion) NSDKMKtor_client_coreHttpReceivePipelinePhases *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(NSDKMKtor_utilsPipelinePhase *)phase interceptors:(NSArray<id<NSDKMKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(NSDKMKotlinArray<NSDKMKtor_utilsPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpRequestPipeline")))
@interface NSDKMKtor_client_coreHttpRequestPipeline : NSDKMKtor_utilsPipeline<id, NSDKMKtor_client_coreHttpRequestBuilder *>
@property (class, readonly, getter=companion) NSDKMKtor_client_coreHttpRequestPipelinePhases *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(NSDKMKtor_utilsPipelinePhase *)phase interceptors:(NSArray<id<NSDKMKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(NSDKMKotlinArray<NSDKMKtor_utilsPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpResponsePipeline")))
@interface NSDKMKtor_client_coreHttpResponsePipeline : NSDKMKtor_utilsPipeline<NSDKMKtor_client_coreHttpResponseContainer *, NSDKMKtor_client_coreHttpClientCall *>
@property (class, readonly, getter=companion) NSDKMKtor_client_coreHttpResponsePipelinePhases *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(NSDKMKtor_utilsPipelinePhase *)phase interceptors:(NSArray<id<NSDKMKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(NSDKMKotlinArray<NSDKMKtor_utilsPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpSendPipeline")))
@interface NSDKMKtor_client_coreHttpSendPipeline : NSDKMKtor_utilsPipeline<id, NSDKMKtor_client_coreHttpRequestBuilder *>
@property (class, readonly, getter=companion) NSDKMKtor_client_coreHttpSendPipelinePhases *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(NSDKMKtor_utilsPipelinePhase *)phase interceptors:(NSArray<id<NSDKMKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(NSDKMKotlinArray<NSDKMKtor_utilsPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpResponseData")))
@interface NSDKMKtor_client_coreHttpResponseData : NSDKMBase
@property (readonly) id body __attribute__((swift_name("body")));
@property (readonly) id<NSDKMKotlinCoroutineContext> callContext __attribute__((swift_name("callContext")));
@property (readonly) id<NSDKMKtor_httpHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) NSDKMKtor_utilsGMTDate *requestTime __attribute__((swift_name("requestTime")));
@property (readonly) NSDKMKtor_utilsGMTDate *responseTime __attribute__((swift_name("responseTime")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *statusCode __attribute__((swift_name("statusCode")));
@property (readonly) NSDKMKtor_httpHttpProtocolVersion *version __attribute__((swift_name("version")));
- (instancetype)initWithStatusCode:(NSDKMKtor_httpHttpStatusCode *)statusCode requestTime:(NSDKMKtor_utilsGMTDate *)requestTime headers:(id<NSDKMKtor_httpHeaders>)headers version:(NSDKMKtor_httpHttpProtocolVersion *)version body:(id)body callContext:(id<NSDKMKotlinCoroutineContext>)callContext __attribute__((swift_name("init(statusCode:requestTime:headers:version:body:callContext:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("Kotlinx_serialization_coreEncoder")))
@protocol NSDKMKotlinx_serialization_coreEncoder
@required
- (id<NSDKMKotlinx_serialization_coreCompositeEncoder>)beginCollectionDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor collectionSize:(int32_t)collectionSize __attribute__((swift_name("beginCollection(descriptor:collectionSize:)")));
- (id<NSDKMKotlinx_serialization_coreCompositeEncoder>)beginStructureDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (void)encodeBooleanValue:(BOOL)value __attribute__((swift_name("encodeBoolean(value:)")));
- (void)encodeByteValue:(int8_t)value __attribute__((swift_name("encodeByte(value:)")));
- (void)encodeCharValue:(unichar)value __attribute__((swift_name("encodeChar(value:)")));
- (void)encodeDoubleValue:(double)value __attribute__((swift_name("encodeDouble(value:)")));
- (void)encodeEnumEnumDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)enumDescriptor index:(int32_t)index __attribute__((swift_name("encodeEnum(enumDescriptor:index:)")));
- (void)encodeFloatValue:(float)value __attribute__((swift_name("encodeFloat(value:)")));
- (id<NSDKMKotlinx_serialization_coreEncoder>)encodeInlineDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor __attribute__((swift_name("encodeInline(descriptor:)")));
- (void)encodeIntValue:(int32_t)value __attribute__((swift_name("encodeInt(value:)")));
- (void)encodeLongValue:(int64_t)value __attribute__((swift_name("encodeLong(value:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (void)encodeNotNullMark __attribute__((swift_name("encodeNotNullMark()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (void)encodeNull __attribute__((swift_name("encodeNull()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (void)encodeNullableSerializableValueSerializer:(id<NSDKMKotlinx_serialization_coreSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeNullableSerializableValue(serializer:value:)")));
- (void)encodeSerializableValueSerializer:(id<NSDKMKotlinx_serialization_coreSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeSerializableValue(serializer:value:)")));
- (void)encodeShortValue:(int16_t)value __attribute__((swift_name("encodeShort(value:)")));
- (void)encodeStringValue:(NSString *)value __attribute__((swift_name("encodeString(value:)")));
@property (readonly) NSDKMKotlinx_serialization_coreSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end

__attribute__((swift_name("Kotlinx_serialization_coreSerialDescriptor")))
@protocol NSDKMKotlinx_serialization_coreSerialDescriptor
@required

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (NSArray<id<NSDKMKotlinAnnotation>> *)getElementAnnotationsIndex:(int32_t)index __attribute__((swift_name("getElementAnnotations(index:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (id<NSDKMKotlinx_serialization_coreSerialDescriptor>)getElementDescriptorIndex:(int32_t)index __attribute__((swift_name("getElementDescriptor(index:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (int32_t)getElementIndexName:(NSString *)name __attribute__((swift_name("getElementIndex(name:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (NSString *)getElementNameIndex:(int32_t)index __attribute__((swift_name("getElementName(index:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (BOOL)isElementOptionalIndex:(int32_t)index __attribute__((swift_name("isElementOptional(index:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property (readonly) NSArray<id<NSDKMKotlinAnnotation>> *annotations __attribute__((swift_name("annotations")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property (readonly) int32_t elementsCount __attribute__((swift_name("elementsCount")));
@property (readonly) BOOL isInline __attribute__((swift_name("isInline")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property (readonly) BOOL isNullable __attribute__((swift_name("isNullable")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property (readonly) NSDKMKotlinx_serialization_coreSerialKind *kind __attribute__((swift_name("kind")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property (readonly) NSString *serialName __attribute__((swift_name("serialName")));
@end

__attribute__((swift_name("Kotlinx_serialization_coreDecoder")))
@protocol NSDKMKotlinx_serialization_coreDecoder
@required
- (id<NSDKMKotlinx_serialization_coreCompositeDecoder>)beginStructureDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (BOOL)decodeBoolean __attribute__((swift_name("decodeBoolean()")));
- (int8_t)decodeByte __attribute__((swift_name("decodeByte()")));
- (unichar)decodeChar __attribute__((swift_name("decodeChar()")));
- (double)decodeDouble __attribute__((swift_name("decodeDouble()")));
- (int32_t)decodeEnumEnumDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)enumDescriptor __attribute__((swift_name("decodeEnum(enumDescriptor:)")));
- (float)decodeFloat __attribute__((swift_name("decodeFloat()")));
- (id<NSDKMKotlinx_serialization_coreDecoder>)decodeInlineDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor __attribute__((swift_name("decodeInline(descriptor:)")));
- (int32_t)decodeInt __attribute__((swift_name("decodeInt()")));
- (int64_t)decodeLong __attribute__((swift_name("decodeLong()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (BOOL)decodeNotNullMark __attribute__((swift_name("decodeNotNullMark()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (NSDKMKotlinNothing * _Nullable)decodeNull __attribute__((swift_name("decodeNull()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (id _Nullable)decodeNullableSerializableValueDeserializer:(id<NSDKMKotlinx_serialization_coreDeserializationStrategy>)deserializer __attribute__((swift_name("decodeNullableSerializableValue(deserializer:)")));
- (id _Nullable)decodeSerializableValueDeserializer:(id<NSDKMKotlinx_serialization_coreDeserializationStrategy>)deserializer __attribute__((swift_name("decodeSerializableValue(deserializer:)")));
- (int16_t)decodeShort __attribute__((swift_name("decodeShort()")));
- (NSString *)decodeString __attribute__((swift_name("decodeString()")));
@property (readonly) NSDKMKotlinx_serialization_coreSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end

__attribute__((swift_name("KotlinCoroutineContextKey")))
@protocol NSDKMKotlinCoroutineContextKey
@required
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
__attribute__((swift_name("KotlinContinuation")))
@protocol NSDKMKotlinContinuation
@required
- (void)resumeWithResult:(id _Nullable)result __attribute__((swift_name("resumeWith(result:)")));
@property (readonly) id<NSDKMKotlinCoroutineContext> context __attribute__((swift_name("context")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
 *   kotlin.ExperimentalStdlibApi
*/
__attribute__((swift_name("KotlinAbstractCoroutineContextKey")))
@interface NSDKMKotlinAbstractCoroutineContextKey<B, E> : NSDKMBase <NSDKMKotlinCoroutineContextKey>
- (instancetype)initWithBaseKey:(id<NSDKMKotlinCoroutineContextKey>)baseKey safeCast:(E _Nullable (^)(id<NSDKMKotlinCoroutineContextElement>))safeCast __attribute__((swift_name("init(baseKey:safeCast:)"))) __attribute__((objc_designated_initializer));
@end


/**
 * @note annotations
 *   kotlin.ExperimentalStdlibApi
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kotlinx_coroutines_coreCoroutineDispatcher.Key")))
@interface NSDKMKotlinx_coroutines_coreCoroutineDispatcherKey : NSDKMKotlinAbstractCoroutineContextKey<id<NSDKMKotlinContinuationInterceptor>, NSDKMKotlinx_coroutines_coreCoroutineDispatcher *>
@property (class, readonly, getter=shared) NSDKMKotlinx_coroutines_coreCoroutineDispatcherKey *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithBaseKey:(id<NSDKMKotlinCoroutineContextKey>)baseKey safeCast:(id<NSDKMKotlinCoroutineContextElement> _Nullable (^)(id<NSDKMKotlinCoroutineContextElement>))safeCast __attribute__((swift_name("init(baseKey:safeCast:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("KotlinDoubleIterator")))
@interface NSDKMKotlinDoubleIterator : NSDKMBase <NSDKMKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMDouble *)next __attribute__((swift_name("next()")));
- (double)nextDouble __attribute__((swift_name("nextDouble()")));
@end

__attribute__((swift_name("KotlinDeferScope")))
@interface NSDKMKotlinDeferScope : NSDKMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)deferBlock:(void (^)(void))block __attribute__((swift_name("defer(block:)")));
@end

__attribute__((swift_name("KotlinNativePlacement")))
@protocol NSDKMKotlinNativePlacement
@required
- (void *)doAllocSize:(int32_t)size align:(int32_t)align __attribute__((swift_name("doAlloc(size:align:)")));
- (void *)doAllocSize:(int64_t)size align_:(int32_t)align __attribute__((swift_name("doAlloc(size:align_:)")));
@end

__attribute__((swift_name("KotlinAutofreeScope")))
@interface NSDKMKotlinAutofreeScope : NSDKMKotlinDeferScope <NSDKMKotlinNativePlacement>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void *)doAllocSize:(int64_t)size align_:(int32_t)align __attribute__((swift_name("doAlloc(size:align_:)")));
@end

__attribute__((swift_name("KotlinKType")))
@protocol NSDKMKotlinKType
@required

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.1")
*/
@property (readonly) NSArray<NSDKMKotlinKTypeProjection *> *arguments __attribute__((swift_name("arguments")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.1")
*/
@property (readonly) id<NSDKMKotlinKClassifier> _Nullable classifier __attribute__((swift_name("classifier")));
@property (readonly) BOOL isMarkedNullable __attribute__((swift_name("isMarkedNullable")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpUrl")))
@interface NSDKMKtor_httpUrl : NSDKMBase
@property (class, readonly, getter=companion) NSDKMKtor_httpUrlCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSString *encodedFragment __attribute__((swift_name("encodedFragment")));
@property (readonly) NSString * _Nullable encodedPassword __attribute__((swift_name("encodedPassword")));
@property (readonly) NSString *encodedPath __attribute__((swift_name("encodedPath")));
@property (readonly) NSString *encodedPathAndQuery __attribute__((swift_name("encodedPathAndQuery")));
@property (readonly) NSString *encodedQuery __attribute__((swift_name("encodedQuery")));
@property (readonly) NSString * _Nullable encodedUser __attribute__((swift_name("encodedUser")));
@property (readonly) NSString *fragment __attribute__((swift_name("fragment")));
@property (readonly) NSString *host __attribute__((swift_name("host")));
@property (readonly) id<NSDKMKtor_httpParameters> parameters __attribute__((swift_name("parameters")));
@property (readonly) NSString * _Nullable password __attribute__((swift_name("password")));
@property (readonly) NSArray<NSString *> *pathSegments __attribute__((swift_name("pathSegments")));
@property (readonly) int32_t port __attribute__((swift_name("port")));
@property (readonly) NSDKMKtor_httpURLProtocol *protocol __attribute__((swift_name("protocol")));
@property (readonly) int32_t specifiedPort __attribute__((swift_name("specifiedPort")));
@property (readonly) BOOL trailingQuery __attribute__((swift_name("trailingQuery")));
@property (readonly) NSString * _Nullable user __attribute__((swift_name("user")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHttpMethod")))
@interface NSDKMKtor_httpHttpMethod : NSDKMBase
@property (class, readonly, getter=companion) NSDKMKtor_httpHttpMethodCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
- (instancetype)initWithValue:(NSString *)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
- (NSDKMKtor_httpHttpMethod *)doCopyValue:(NSString *)value __attribute__((swift_name("doCopy(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("Ktor_utilsStringValues")))
@protocol NSDKMKtor_utilsStringValues
@required
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<NSDKMKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (void)forEachBody:(void (^)(NSString *, NSArray<NSString *> *))body __attribute__((swift_name("forEach(body:)")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@end

__attribute__((swift_name("Ktor_httpHeaders")))
@protocol NSDKMKtor_httpHeaders <NSDKMKtor_utilsStringValues>
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsAttributeKey")))
@interface NSDKMKtor_utilsAttributeKey<T> : NSDKMBase
@property (readonly) NSString *name __attribute__((swift_name("name")));
- (instancetype)initWithName:(NSString *)name __attribute__((swift_name("init(name:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("Ktor_httpHeaderValueWithParameters")))
@interface NSDKMKtor_httpHeaderValueWithParameters : NSDKMBase
@property (class, readonly, getter=companion) NSDKMKtor_httpHeaderValueWithParametersCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSString *content __attribute__((swift_name("content")));
@property (readonly) NSArray<NSDKMKtor_httpHeaderValueParam *> *parameters __attribute__((swift_name("parameters")));
- (instancetype)initWithContent:(NSString *)content parameters:(NSArray<NSDKMKtor_httpHeaderValueParam *> *)parameters __attribute__((swift_name("init(content:parameters:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)parameterName:(NSString *)name __attribute__((swift_name("parameter(name:)")));
- (NSString *)description __attribute__((swift_name("description()")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpContentType")))
@interface NSDKMKtor_httpContentType : NSDKMKtor_httpHeaderValueWithParameters
@property (class, readonly, getter=companion) NSDKMKtor_httpContentTypeCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSString *contentSubtype __attribute__((swift_name("contentSubtype")));
@property (readonly) NSString *contentType __attribute__((swift_name("contentType")));
- (instancetype)initWithContentType:(NSString *)contentType contentSubtype:(NSString *)contentSubtype parameters:(NSArray<NSDKMKtor_httpHeaderValueParam *> *)parameters __attribute__((swift_name("init(contentType:contentSubtype:parameters:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithContent:(NSString *)content parameters:(NSArray<NSDKMKtor_httpHeaderValueParam *> *)parameters __attribute__((swift_name("init(content:parameters:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)matchPattern:(NSDKMKtor_httpContentType *)pattern __attribute__((swift_name("match(pattern:)")));
- (BOOL)matchPattern_:(NSString *)pattern __attribute__((swift_name("match(pattern_:)")));
- (NSDKMKtor_httpContentType *)withParameterName:(NSString *)name value:(NSString *)value __attribute__((swift_name("withParameter(name:value:)")));
- (NSDKMKtor_httpContentType *)withoutParameters __attribute__((swift_name("withoutParameters()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHttpStatusCode")))
@interface NSDKMKtor_httpHttpStatusCode : NSDKMBase
@property (class, readonly, getter=companion) NSDKMKtor_httpHttpStatusCodeCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSString *description_ __attribute__((swift_name("description_")));
@property (readonly) int32_t value __attribute__((swift_name("value")));
- (instancetype)initWithValue:(int32_t)value description:(NSString *)description __attribute__((swift_name("init(value:description:)"))) __attribute__((objc_designated_initializer));
- (NSDKMKtor_httpHttpStatusCode *)doCopyValue:(int32_t)value description:(NSString *)description __attribute__((swift_name("doCopy(value:description:)")));
- (NSDKMKtor_httpHttpStatusCode *)descriptionValue:(NSString *)value __attribute__((swift_name("description(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("Ktor_ioReadSession")))
@protocol NSDKMKtor_ioReadSession
@required
- (int32_t)discardN:(int32_t)n __attribute__((swift_name("discard(n:)")));
- (NSDKMKtor_ioChunkBuffer * _Nullable)requestAtLeast:(int32_t)atLeast __attribute__((swift_name("request(atLeast:)")));
@property (readonly) int32_t availableForRead __attribute__((swift_name("availableForRead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsPipelinePhase")))
@interface NSDKMKtor_utilsPipelinePhase : NSDKMBase
@property (readonly) NSString *name __attribute__((swift_name("name")));
- (instancetype)initWithName:(NSString *)name __attribute__((swift_name("init(name:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioMemory.Companion")))
@interface NSDKMKtor_ioMemoryCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_ioMemoryCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKtor_ioMemory *Empty __attribute__((swift_name("Empty")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioBuffer.Companion")))
@interface NSDKMKtor_ioBufferCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_ioBufferCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKtor_ioBuffer *Empty __attribute__((swift_name("Empty")));
@property (readonly) int32_t ReservedSize __attribute__((swift_name("ReservedSize")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("Ktor_ioObjectPool")))
@protocol NSDKMKtor_ioObjectPool <NSDKMKtor_ioCloseable>
@required
- (id)borrow __attribute__((swift_name("borrow()")));
- (void)dispose __attribute__((swift_name("dispose()")));
- (void)recycleInstance:(id)instance __attribute__((swift_name("recycle(instance:)")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioChunkBuffer.Companion")))
@interface NSDKMKtor_ioChunkBufferCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_ioChunkBufferCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKtor_ioChunkBuffer *Empty __attribute__((swift_name("Empty")));
@property (readonly) id<NSDKMKtor_ioObjectPool> EmptyPool __attribute__((swift_name("EmptyPool")));
@property (readonly) id<NSDKMKtor_ioObjectPool> Pool __attribute__((swift_name("Pool")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("KotlinByteIterator")))
@interface NSDKMKotlinByteIterator : NSDKMBase <NSDKMKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMByte *)next __attribute__((swift_name("next()")));
- (int8_t)nextByte __attribute__((swift_name("nextByte()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioInput.Companion")))
@interface NSDKMKtor_ioInputCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_ioInputCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioByteReadPacket.Companion")))
@interface NSDKMKtor_ioByteReadPacketCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_ioByteReadPacketCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKtor_ioByteReadPacket *Empty __attribute__((swift_name("Empty")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreDisposableHandle")))
@protocol NSDKMKotlinx_coroutines_coreDisposableHandle
@required
- (void)dispose __attribute__((swift_name("dispose()")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreChildHandle")))
@protocol NSDKMKotlinx_coroutines_coreChildHandle <NSDKMKotlinx_coroutines_coreDisposableHandle>
@required
- (BOOL)childCancelledCause:(NSDKMKotlinThrowable *)cause __attribute__((swift_name("childCancelled(cause:)")));
@property (readonly) id<NSDKMKotlinx_coroutines_coreJob> _Nullable parent __attribute__((swift_name("parent")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreChildJob")))
@protocol NSDKMKotlinx_coroutines_coreChildJob <NSDKMKotlinx_coroutines_coreJob>
@required
- (void)parentCancelledParentJob:(id<NSDKMKotlinx_coroutines_coreParentJob>)parentJob __attribute__((swift_name("parentCancelled(parentJob:)")));
@end

__attribute__((swift_name("KotlinSequence")))
@protocol NSDKMKotlinSequence
@required
- (id<NSDKMKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreSelectClause0")))
@protocol NSDKMKotlinx_coroutines_coreSelectClause0 <NSDKMKotlinx_coroutines_coreSelectClause>
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpClientCall.Companion")))
@interface NSDKMKtor_client_coreHttpClientCallCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_client_coreHttpClientCallCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKtor_utilsAttributeKey<id> *CustomResponse __attribute__((swift_name("CustomResponse"))) __attribute__((unavailable("This is going to be removed. Please file a ticket with clarification why and what for do you need it.")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("Ktor_httpHttpMessage")))
@protocol NSDKMKtor_httpHttpMessage
@required
@property (readonly) id<NSDKMKtor_httpHeaders> headers __attribute__((swift_name("headers")));
@end

__attribute__((swift_name("Ktor_client_coreHttpRequest")))
@protocol NSDKMKtor_client_coreHttpRequest <NSDKMKtor_httpHttpMessage, NSDKMKotlinx_coroutines_coreCoroutineScope>
@required
@property (readonly) id<NSDKMKtor_utilsAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) NSDKMKtor_client_coreHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) NSDKMKtor_httpOutgoingContent *content __attribute__((swift_name("content")));
@property (readonly) NSDKMKtor_httpHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) NSDKMKtor_httpUrl *url __attribute__((swift_name("url")));
@end

__attribute__((swift_name("Ktor_client_coreHttpResponse")))
@interface NSDKMKtor_client_coreHttpResponse : NSDKMBase <NSDKMKtor_httpHttpMessage, NSDKMKotlinx_coroutines_coreCoroutineScope>
@property (readonly) NSDKMKtor_client_coreHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) id<NSDKMKtor_ioByteReadChannel> content __attribute__((swift_name("content")));
@property (readonly) NSDKMKtor_utilsGMTDate *requestTime __attribute__((swift_name("requestTime")));
@property (readonly) NSDKMKtor_utilsGMTDate *responseTime __attribute__((swift_name("responseTime")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *status __attribute__((swift_name("status")));
@property (readonly) NSDKMKtor_httpHttpProtocolVersion *version __attribute__((swift_name("version")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("KotlinKDeclarationContainer")))
@protocol NSDKMKotlinKDeclarationContainer
@required
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.1")
*/
__attribute__((swift_name("KotlinKClassifier")))
@protocol NSDKMKotlinKClassifier
@required
@end

__attribute__((swift_name("KotlinKClass")))
@protocol NSDKMKotlinKClass <NSDKMKotlinKDeclarationContainer, NSDKMKotlinKAnnotatedElement, NSDKMKotlinKClassifier>
@required

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.1")
*/
- (BOOL)isInstanceValue:(id _Nullable)value __attribute__((swift_name("isInstance(value:)")));
@property (readonly) NSString * _Nullable qualifiedName __attribute__((swift_name("qualifiedName")));
@property (readonly) NSString * _Nullable simpleName __attribute__((swift_name("simpleName")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreSelectInstance")))
@protocol NSDKMKotlinx_coroutines_coreSelectInstance
@required
- (void)disposeOnCompletionDisposableHandle:(id<NSDKMKotlinx_coroutines_coreDisposableHandle>)disposableHandle __attribute__((swift_name("disposeOnCompletion(disposableHandle:)")));
- (void)selectInRegistrationPhaseInternalResult:(id _Nullable)internalResult __attribute__((swift_name("selectInRegistrationPhase(internalResult:)")));
- (BOOL)trySelectClauseObject:(id)clauseObject result:(id _Nullable)result __attribute__((swift_name("trySelect(clauseObject:result:)")));
@property (readonly) id<NSDKMKotlinCoroutineContext> context __attribute__((swift_name("context")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreProxyConfig")))
@interface NSDKMKtor_client_coreProxyConfig : NSDKMBase
@property (readonly) NSDKMKtor_httpUrl *url __attribute__((swift_name("url")));
- (instancetype)initWithUrl:(NSDKMKtor_httpUrl *)url __attribute__((swift_name("init(url:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("Ktor_client_coreHttpClientPlugin")))
@protocol NSDKMKtor_client_coreHttpClientPlugin
@required
- (void)installPlugin:(id)plugin scope:(NSDKMKtor_client_coreHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (id)prepareBlock:(void (^)(id))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) NSDKMKtor_utilsAttributeKey<id> *key __attribute__((swift_name("key")));
@end

__attribute__((swift_name("Ktor_eventsEventDefinition")))
@interface NSDKMKtor_eventsEventDefinition<T> : NSDKMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpReceivePipeline.Phases")))
@interface NSDKMKtor_client_coreHttpReceivePipelinePhases : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_client_coreHttpReceivePipelinePhases *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *After __attribute__((swift_name("After")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *Before __attribute__((swift_name("Before")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *State __attribute__((swift_name("State")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpRequestPipeline.Phases")))
@interface NSDKMKtor_client_coreHttpRequestPipelinePhases : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_client_coreHttpRequestPipelinePhases *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *Before __attribute__((swift_name("Before")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *Render __attribute__((swift_name("Render")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *Send __attribute__((swift_name("Send")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *State __attribute__((swift_name("State")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *Transform __attribute__((swift_name("Transform")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("Ktor_httpHttpMessageBuilder")))
@protocol NSDKMKtor_httpHttpMessageBuilder
@required
@property (readonly) NSDKMKtor_httpHeadersBuilder *headers __attribute__((swift_name("headers")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpRequestBuilder")))
@interface NSDKMKtor_client_coreHttpRequestBuilder : NSDKMBase <NSDKMKtor_httpHttpMessageBuilder>
@property (class, readonly, getter=companion) NSDKMKtor_client_coreHttpRequestBuilderCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) id<NSDKMKtor_utilsAttributes> attributes __attribute__((swift_name("attributes")));
@property id body __attribute__((swift_name("body")));
@property NSDKMKtor_utilsTypeInfo * _Nullable bodyType __attribute__((swift_name("bodyType")));
@property (readonly) id<NSDKMKotlinx_coroutines_coreJob> executionContext __attribute__((swift_name("executionContext")));
@property (readonly) NSDKMKtor_httpHeadersBuilder *headers __attribute__((swift_name("headers")));
@property NSDKMKtor_httpHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) NSDKMKtor_httpURLBuilder *url __attribute__((swift_name("url")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSDKMKtor_client_coreHttpRequestData *)build __attribute__((swift_name("build()")));
- (id _Nullable)getCapabilityOrNullKey:(id<NSDKMKtor_client_coreHttpClientEngineCapability>)key __attribute__((swift_name("getCapabilityOrNull(key:)")));
- (void)setAttributesBlock:(void (^)(id<NSDKMKtor_utilsAttributes>))block __attribute__((swift_name("setAttributes(block:)")));
- (void)setCapabilityKey:(id<NSDKMKtor_client_coreHttpClientEngineCapability>)key capability:(id)capability __attribute__((swift_name("setCapability(key:capability:)")));
- (NSDKMKtor_client_coreHttpRequestBuilder *)takeFromBuilder:(NSDKMKtor_client_coreHttpRequestBuilder *)builder __attribute__((swift_name("takeFrom(builder:)")));
- (NSDKMKtor_client_coreHttpRequestBuilder *)takeFromWithExecutionContextBuilder:(NSDKMKtor_client_coreHttpRequestBuilder *)builder __attribute__((swift_name("takeFromWithExecutionContext(builder:)")));
- (void)urlBlock:(void (^)(NSDKMKtor_httpURLBuilder *, NSDKMKtor_httpURLBuilder *))block __attribute__((swift_name("url(block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpResponsePipeline.Phases")))
@interface NSDKMKtor_client_coreHttpResponsePipelinePhases : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_client_coreHttpResponsePipelinePhases *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *After __attribute__((swift_name("After")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *Parse __attribute__((swift_name("Parse")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *Receive __attribute__((swift_name("Receive")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *State __attribute__((swift_name("State")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *Transform __attribute__((swift_name("Transform")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpResponseContainer")))
@interface NSDKMKtor_client_coreHttpResponseContainer : NSDKMBase
@property (readonly) NSDKMKtor_utilsTypeInfo *expectedType __attribute__((swift_name("expectedType")));
@property (readonly) id response __attribute__((swift_name("response")));
- (instancetype)initWithExpectedType:(NSDKMKtor_utilsTypeInfo *)expectedType response:(id)response __attribute__((swift_name("init(expectedType:response:)"))) __attribute__((objc_designated_initializer));
- (NSDKMKtor_client_coreHttpResponseContainer *)doCopyExpectedType:(NSDKMKtor_utilsTypeInfo *)expectedType response:(id)response __attribute__((swift_name("doCopy(expectedType:response:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpSendPipeline.Phases")))
@interface NSDKMKtor_client_coreHttpSendPipelinePhases : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_client_coreHttpSendPipelinePhases *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *Before __attribute__((swift_name("Before")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *Engine __attribute__((swift_name("Engine")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *Monitoring __attribute__((swift_name("Monitoring")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *Receive __attribute__((swift_name("Receive")));
@property (readonly) NSDKMKtor_utilsPipelinePhase *State __attribute__((swift_name("State")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsGMTDate")))
@interface NSDKMKtor_utilsGMTDate : NSDKMBase <NSDKMKotlinComparable>
@property (class, readonly, getter=companion) NSDKMKtor_utilsGMTDateCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) int32_t dayOfMonth __attribute__((swift_name("dayOfMonth")));
@property (readonly) NSDKMKtor_utilsWeekDay *dayOfWeek __attribute__((swift_name("dayOfWeek")));
@property (readonly) int32_t dayOfYear __attribute__((swift_name("dayOfYear")));
@property (readonly) int32_t hours __attribute__((swift_name("hours")));
@property (readonly) int32_t minutes __attribute__((swift_name("minutes")));
@property (readonly) NSDKMKtor_utilsMonth *month __attribute__((swift_name("month")));
@property (readonly) int32_t seconds __attribute__((swift_name("seconds")));
@property (readonly) int64_t timestamp __attribute__((swift_name("timestamp")));
@property (readonly) int32_t year __attribute__((swift_name("year")));
- (int32_t)compareToOther:(NSDKMKtor_utilsGMTDate *)other __attribute__((swift_name("compareTo(other:)")));
- (NSDKMKtor_utilsGMTDate *)doCopySeconds:(int32_t)seconds minutes:(int32_t)minutes hours:(int32_t)hours dayOfWeek:(NSDKMKtor_utilsWeekDay *)dayOfWeek dayOfMonth:(int32_t)dayOfMonth dayOfYear:(int32_t)dayOfYear month:(NSDKMKtor_utilsMonth *)month year:(int32_t)year timestamp:(int64_t)timestamp __attribute__((swift_name("doCopy(seconds:minutes:hours:dayOfWeek:dayOfMonth:dayOfYear:month:year:timestamp:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHttpProtocolVersion")))
@interface NSDKMKtor_httpHttpProtocolVersion : NSDKMBase
@property (class, readonly, getter=companion) NSDKMKtor_httpHttpProtocolVersionCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) int32_t major __attribute__((swift_name("major")));
@property (readonly) int32_t minor __attribute__((swift_name("minor")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
- (instancetype)initWithName:(NSString *)name major:(int32_t)major minor:(int32_t)minor __attribute__((swift_name("init(name:major:minor:)"))) __attribute__((objc_designated_initializer));
- (NSDKMKtor_httpHttpProtocolVersion *)doCopyName:(NSString *)name major:(int32_t)major minor:(int32_t)minor __attribute__((swift_name("doCopy(name:major:minor:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("Kotlinx_serialization_coreCompositeEncoder")))
@protocol NSDKMKotlinx_serialization_coreCompositeEncoder
@required
- (void)encodeBooleanElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(BOOL)value __attribute__((swift_name("encodeBooleanElement(descriptor:index:value:)")));
- (void)encodeByteElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(int8_t)value __attribute__((swift_name("encodeByteElement(descriptor:index:value:)")));
- (void)encodeCharElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(unichar)value __attribute__((swift_name("encodeCharElement(descriptor:index:value:)")));
- (void)encodeDoubleElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(double)value __attribute__((swift_name("encodeDoubleElement(descriptor:index:value:)")));
- (void)encodeFloatElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(float)value __attribute__((swift_name("encodeFloatElement(descriptor:index:value:)")));
- (id<NSDKMKotlinx_serialization_coreEncoder>)encodeInlineElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("encodeInlineElement(descriptor:index:)")));
- (void)encodeIntElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(int32_t)value __attribute__((swift_name("encodeIntElement(descriptor:index:value:)")));
- (void)encodeLongElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(int64_t)value __attribute__((swift_name("encodeLongElement(descriptor:index:value:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (void)encodeNullableSerializableElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<NSDKMKotlinx_serialization_coreSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeNullableSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeSerializableElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<NSDKMKotlinx_serialization_coreSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeShortElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(int16_t)value __attribute__((swift_name("encodeShortElement(descriptor:index:value:)")));
- (void)encodeStringElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(NSString *)value __attribute__((swift_name("encodeStringElement(descriptor:index:value:)")));
- (void)endStructureDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (BOOL)shouldEncodeElementDefaultDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("shouldEncodeElementDefault(descriptor:index:)")));
@property (readonly) NSDKMKotlinx_serialization_coreSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end

__attribute__((swift_name("Kotlinx_serialization_coreSerializersModule")))
@interface NSDKMKotlinx_serialization_coreSerializersModule : NSDKMBase

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (void)dumpToCollector:(id<NSDKMKotlinx_serialization_coreSerializersModuleCollector>)collector __attribute__((swift_name("dumpTo(collector:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (id<NSDKMKotlinx_serialization_coreKSerializer> _Nullable)getContextualKClass:(id<NSDKMKotlinKClass>)kClass typeArgumentsSerializers:(NSArray<id<NSDKMKotlinx_serialization_coreKSerializer>> *)typeArgumentsSerializers __attribute__((swift_name("getContextual(kClass:typeArgumentsSerializers:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (id<NSDKMKotlinx_serialization_coreSerializationStrategy> _Nullable)getPolymorphicBaseClass:(id<NSDKMKotlinKClass>)baseClass value:(id)value __attribute__((swift_name("getPolymorphic(baseClass:value:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (id<NSDKMKotlinx_serialization_coreDeserializationStrategy> _Nullable)getPolymorphicBaseClass:(id<NSDKMKotlinKClass>)baseClass serializedClassName:(NSString * _Nullable)serializedClassName __attribute__((swift_name("getPolymorphic(baseClass:serializedClassName:)")));
@end

__attribute__((swift_name("KotlinAnnotation")))
@protocol NSDKMKotlinAnnotation
@required
@end

__attribute__((swift_name("Kotlinx_serialization_coreCompositeDecoder")))
@protocol NSDKMKotlinx_serialization_coreCompositeDecoder
@required
- (BOOL)decodeBooleanElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeBooleanElement(descriptor:index:)")));
- (int8_t)decodeByteElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeByteElement(descriptor:index:)")));
- (unichar)decodeCharElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeCharElement(descriptor:index:)")));
- (int32_t)decodeCollectionSizeDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor __attribute__((swift_name("decodeCollectionSize(descriptor:)")));
- (double)decodeDoubleElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeDoubleElement(descriptor:index:)")));
- (int32_t)decodeElementIndexDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor __attribute__((swift_name("decodeElementIndex(descriptor:)")));
- (float)decodeFloatElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeFloatElement(descriptor:index:)")));
- (id<NSDKMKotlinx_serialization_coreDecoder>)decodeInlineElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeInlineElement(descriptor:index:)")));
- (int32_t)decodeIntElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeIntElement(descriptor:index:)")));
- (int64_t)decodeLongElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeLongElement(descriptor:index:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (id _Nullable)decodeNullableSerializableElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<NSDKMKotlinx_serialization_coreDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeNullableSerializableElement(descriptor:index:deserializer:previousValue:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (BOOL)decodeSequentially __attribute__((swift_name("decodeSequentially()")));
- (id _Nullable)decodeSerializableElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<NSDKMKotlinx_serialization_coreDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeSerializableElement(descriptor:index:deserializer:previousValue:)")));
- (int16_t)decodeShortElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeShortElement(descriptor:index:)")));
- (NSString *)decodeStringElementDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeStringElement(descriptor:index:)")));
- (void)endStructureDescriptor:(id<NSDKMKotlinx_serialization_coreSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));
@property (readonly) NSDKMKotlinx_serialization_coreSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinNothing")))
@interface NSDKMKotlinNothing : NSDKMBase
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.1")
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinKTypeProjection")))
@interface NSDKMKotlinKTypeProjection : NSDKMBase
@property (class, readonly, getter=companion) NSDKMKotlinKTypeProjectionCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) id<NSDKMKotlinKType> _Nullable type __attribute__((swift_name("type")));
@property (readonly) NSDKMKotlinKVariance * _Nullable variance __attribute__((swift_name("variance")));
- (instancetype)initWithVariance:(NSDKMKotlinKVariance * _Nullable)variance type:(id<NSDKMKotlinKType> _Nullable)type __attribute__((swift_name("init(variance:type:)"))) __attribute__((objc_designated_initializer));
- (NSDKMKotlinKTypeProjection *)doCopyVariance:(NSDKMKotlinKVariance * _Nullable)variance type:(id<NSDKMKotlinKType> _Nullable)type __attribute__((swift_name("doCopy(variance:type:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpUrl.Companion")))
@interface NSDKMKtor_httpUrlCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_httpUrlCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("Ktor_httpParameters")))
@protocol NSDKMKtor_httpParameters <NSDKMKtor_utilsStringValues>
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpURLProtocol")))
@interface NSDKMKtor_httpURLProtocol : NSDKMBase
@property (class, readonly, getter=companion) NSDKMKtor_httpURLProtocolCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) int32_t defaultPort __attribute__((swift_name("defaultPort")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
- (instancetype)initWithName:(NSString *)name defaultPort:(int32_t)defaultPort __attribute__((swift_name("init(name:defaultPort:)"))) __attribute__((objc_designated_initializer));
- (NSDKMKtor_httpURLProtocol *)doCopyName:(NSString *)name defaultPort:(int32_t)defaultPort __attribute__((swift_name("doCopy(name:defaultPort:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHttpMethod.Companion")))
@interface NSDKMKtor_httpHttpMethodCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_httpHttpMethodCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSArray<NSDKMKtor_httpHttpMethod *> *DefaultMethods __attribute__((swift_name("DefaultMethods")));
@property (readonly) NSDKMKtor_httpHttpMethod *Delete __attribute__((swift_name("Delete")));
@property (readonly) NSDKMKtor_httpHttpMethod *Get __attribute__((swift_name("Get")));
@property (readonly) NSDKMKtor_httpHttpMethod *Head __attribute__((swift_name("Head")));
@property (readonly) NSDKMKtor_httpHttpMethod *Options __attribute__((swift_name("Options")));
@property (readonly) NSDKMKtor_httpHttpMethod *Patch __attribute__((swift_name("Patch")));
@property (readonly) NSDKMKtor_httpHttpMethod *Post __attribute__((swift_name("Post")));
@property (readonly) NSDKMKtor_httpHttpMethod *Put __attribute__((swift_name("Put")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMKtor_httpHttpMethod *)parseMethod:(NSString *)method __attribute__((swift_name("parse(method:)")));
@end

__attribute__((swift_name("KotlinMapEntry")))
@protocol NSDKMKotlinMapEntry
@required
@property (readonly) id _Nullable key __attribute__((swift_name("key")));
@property (readonly) id _Nullable value_ __attribute__((swift_name("value_")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHeaderValueParam")))
@interface NSDKMKtor_httpHeaderValueParam : NSDKMBase
@property (readonly) BOOL escapeValue __attribute__((swift_name("escapeValue")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
- (instancetype)initWithName:(NSString *)name value:(NSString *)value __attribute__((swift_name("init(name:value:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithName:(NSString *)name value:(NSString *)value escapeValue:(BOOL)escapeValue __attribute__((swift_name("init(name:value:escapeValue:)"))) __attribute__((objc_designated_initializer));
- (NSDKMKtor_httpHeaderValueParam *)doCopyName:(NSString *)name value:(NSString *)value escapeValue:(BOOL)escapeValue __attribute__((swift_name("doCopy(name:value:escapeValue:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHeaderValueWithParameters.Companion")))
@interface NSDKMKtor_httpHeaderValueWithParametersCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_httpHeaderValueWithParametersCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id _Nullable)parseValue:(NSString *)value init:(id _Nullable (^)(NSString *, NSArray<NSDKMKtor_httpHeaderValueParam *> *))init __attribute__((swift_name("parse(value:init:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpContentType.Companion")))
@interface NSDKMKtor_httpContentTypeCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_httpContentTypeCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKtor_httpContentType *Any __attribute__((swift_name("Any")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMKtor_httpContentType *)parseValue:(NSString *)value __attribute__((swift_name("parse(value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHttpStatusCode.Companion")))
@interface NSDKMKtor_httpHttpStatusCodeCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_httpHttpStatusCodeCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *Accepted __attribute__((swift_name("Accepted")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *BadGateway __attribute__((swift_name("BadGateway")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *BadRequest __attribute__((swift_name("BadRequest")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *Conflict __attribute__((swift_name("Conflict")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *Continue __attribute__((swift_name("Continue")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *Created __attribute__((swift_name("Created")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *ExpectationFailed __attribute__((swift_name("ExpectationFailed")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *FailedDependency __attribute__((swift_name("FailedDependency")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *Forbidden __attribute__((swift_name("Forbidden")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *Found __attribute__((swift_name("Found")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *GatewayTimeout __attribute__((swift_name("GatewayTimeout")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *Gone __attribute__((swift_name("Gone")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *InsufficientStorage __attribute__((swift_name("InsufficientStorage")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *InternalServerError __attribute__((swift_name("InternalServerError")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *LengthRequired __attribute__((swift_name("LengthRequired")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *Locked __attribute__((swift_name("Locked")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *MethodNotAllowed __attribute__((swift_name("MethodNotAllowed")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *MovedPermanently __attribute__((swift_name("MovedPermanently")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *MultiStatus __attribute__((swift_name("MultiStatus")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *MultipleChoices __attribute__((swift_name("MultipleChoices")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *NoContent __attribute__((swift_name("NoContent")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *NonAuthoritativeInformation __attribute__((swift_name("NonAuthoritativeInformation")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *NotAcceptable __attribute__((swift_name("NotAcceptable")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *NotFound __attribute__((swift_name("NotFound")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *NotImplemented __attribute__((swift_name("NotImplemented")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *NotModified __attribute__((swift_name("NotModified")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *OK __attribute__((swift_name("OK")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *PartialContent __attribute__((swift_name("PartialContent")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *PayloadTooLarge __attribute__((swift_name("PayloadTooLarge")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *PaymentRequired __attribute__((swift_name("PaymentRequired")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *PermanentRedirect __attribute__((swift_name("PermanentRedirect")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *PreconditionFailed __attribute__((swift_name("PreconditionFailed")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *Processing __attribute__((swift_name("Processing")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *ProxyAuthenticationRequired __attribute__((swift_name("ProxyAuthenticationRequired")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *RequestHeaderFieldTooLarge __attribute__((swift_name("RequestHeaderFieldTooLarge")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *RequestTimeout __attribute__((swift_name("RequestTimeout")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *RequestURITooLong __attribute__((swift_name("RequestURITooLong")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *RequestedRangeNotSatisfiable __attribute__((swift_name("RequestedRangeNotSatisfiable")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *ResetContent __attribute__((swift_name("ResetContent")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *SeeOther __attribute__((swift_name("SeeOther")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *ServiceUnavailable __attribute__((swift_name("ServiceUnavailable")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *SwitchProxy __attribute__((swift_name("SwitchProxy")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *SwitchingProtocols __attribute__((swift_name("SwitchingProtocols")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *TemporaryRedirect __attribute__((swift_name("TemporaryRedirect")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *TooManyRequests __attribute__((swift_name("TooManyRequests")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *Unauthorized __attribute__((swift_name("Unauthorized")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *UnprocessableEntity __attribute__((swift_name("UnprocessableEntity")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *UnsupportedMediaType __attribute__((swift_name("UnsupportedMediaType")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *UpgradeRequired __attribute__((swift_name("UpgradeRequired")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *UseProxy __attribute__((swift_name("UseProxy")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *VariantAlsoNegotiates __attribute__((swift_name("VariantAlsoNegotiates")));
@property (readonly) NSDKMKtor_httpHttpStatusCode *VersionNotSupported __attribute__((swift_name("VersionNotSupported")));
@property (readonly) NSArray<NSDKMKtor_httpHttpStatusCode *> *allStatusCodes __attribute__((swift_name("allStatusCodes")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMKtor_httpHttpStatusCode *)fromValueValue:(int32_t)value __attribute__((swift_name("fromValue(value:)")));
@end

__attribute__((swift_name("Kotlinx_coroutines_coreParentJob")))
@protocol NSDKMKotlinx_coroutines_coreParentJob <NSDKMKotlinx_coroutines_coreJob>
@required
- (NSDKMKotlinCancellationException *)getChildJobCancellationCause __attribute__((swift_name("getChildJobCancellationCause()")));
@end

__attribute__((swift_name("Ktor_utilsStringValuesBuilder")))
@protocol NSDKMKtor_utilsStringValuesBuilder
@required
- (void)appendName:(NSString *)name value:(NSString *)value __attribute__((swift_name("append(name:value:)")));
- (void)appendAllStringValues:(id<NSDKMKtor_utilsStringValues>)stringValues __attribute__((swift_name("appendAll(stringValues:)")));
- (void)appendAllName:(NSString *)name values:(id)values __attribute__((swift_name("appendAll(name:values:)")));
- (void)appendMissingStringValues:(id<NSDKMKtor_utilsStringValues>)stringValues __attribute__((swift_name("appendMissing(stringValues:)")));
- (void)appendMissingName:(NSString *)name values:(id)values __attribute__((swift_name("appendMissing(name:values:)")));
- (id<NSDKMKtor_utilsStringValues>)build __attribute__((swift_name("build()")));
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<NSDKMKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
- (void)removeName:(NSString *)name __attribute__((swift_name("remove(name:)")));
- (BOOL)removeName:(NSString *)name value:(NSString *)value __attribute__((swift_name("remove(name:value:)")));
- (void)removeKeysWithNoEntries __attribute__((swift_name("removeKeysWithNoEntries()")));
- (void)setName:(NSString *)name value:(NSString *)value __attribute__((swift_name("set(name:value:)")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@end

__attribute__((swift_name("Ktor_utilsStringValuesBuilderImpl")))
@interface NSDKMKtor_utilsStringValuesBuilderImpl : NSDKMBase <NSDKMKtor_utilsStringValuesBuilder>
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@property (readonly) NSDKMMutableDictionary<NSString *, NSMutableArray<NSString *> *> *values __attribute__((swift_name("values")));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName size:(int32_t)size __attribute__((swift_name("init(caseInsensitiveName:size:)"))) __attribute__((objc_designated_initializer));
- (void)appendName:(NSString *)name value:(NSString *)value __attribute__((swift_name("append(name:value:)")));
- (void)appendAllStringValues:(id<NSDKMKtor_utilsStringValues>)stringValues __attribute__((swift_name("appendAll(stringValues:)")));
- (void)appendAllName:(NSString *)name values:(id)values __attribute__((swift_name("appendAll(name:values:)")));
- (void)appendMissingStringValues:(id<NSDKMKtor_utilsStringValues>)stringValues __attribute__((swift_name("appendMissing(stringValues:)")));
- (void)appendMissingName:(NSString *)name values:(id)values __attribute__((swift_name("appendMissing(name:values:)")));
- (id<NSDKMKtor_utilsStringValues>)build __attribute__((swift_name("build()")));
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<NSDKMKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
- (void)removeName:(NSString *)name __attribute__((swift_name("remove(name:)")));
- (BOOL)removeName:(NSString *)name value:(NSString *)value __attribute__((swift_name("remove(name:value:)")));
- (void)removeKeysWithNoEntries __attribute__((swift_name("removeKeysWithNoEntries()")));
- (void)setName:(NSString *)name value:(NSString *)value __attribute__((swift_name("set(name:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)validateNameName:(NSString *)name __attribute__((swift_name("validateName(name:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)validateValueValue:(NSString *)value __attribute__((swift_name("validateValue(value:)")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHeadersBuilder")))
@interface NSDKMKtor_httpHeadersBuilder : NSDKMKtor_utilsStringValuesBuilderImpl
- (instancetype)initWithSize:(int32_t)size __attribute__((swift_name("init(size:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName size:(int32_t)size __attribute__((swift_name("init(caseInsensitiveName:size:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (id<NSDKMKtor_httpHeaders>)build __attribute__((swift_name("build()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)validateNameName:(NSString *)name __attribute__((swift_name("validateName(name:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)validateValueValue:(NSString *)value __attribute__((swift_name("validateValue(value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_client_coreHttpRequestBuilder.Companion")))
@interface NSDKMKtor_client_coreHttpRequestBuilderCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_client_coreHttpRequestBuilderCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpURLBuilder")))
@interface NSDKMKtor_httpURLBuilder : NSDKMBase
@property (class, readonly, getter=companion) NSDKMKtor_httpURLBuilderCompanion *companion __attribute__((swift_name("companion")));
@property NSString *encodedFragment __attribute__((swift_name("encodedFragment")));
@property id<NSDKMKtor_httpParametersBuilder> encodedParameters __attribute__((swift_name("encodedParameters")));
@property NSString * _Nullable encodedPassword __attribute__((swift_name("encodedPassword")));
@property NSArray<NSString *> *encodedPathSegments __attribute__((swift_name("encodedPathSegments")));
@property NSString * _Nullable encodedUser __attribute__((swift_name("encodedUser")));
@property NSString *fragment __attribute__((swift_name("fragment")));
@property NSString *host __attribute__((swift_name("host")));
@property (readonly) id<NSDKMKtor_httpParametersBuilder> parameters __attribute__((swift_name("parameters")));
@property NSString * _Nullable password __attribute__((swift_name("password")));
@property NSArray<NSString *> *pathSegments __attribute__((swift_name("pathSegments")));
@property int32_t port __attribute__((swift_name("port")));
@property NSDKMKtor_httpURLProtocol *protocol __attribute__((swift_name("protocol")));
@property BOOL trailingQuery __attribute__((swift_name("trailingQuery")));
@property NSString * _Nullable user __attribute__((swift_name("user")));
- (instancetype)initWithProtocol:(NSDKMKtor_httpURLProtocol *)protocol host:(NSString *)host port:(int32_t)port user:(NSString * _Nullable)user password:(NSString * _Nullable)password pathSegments:(NSArray<NSString *> *)pathSegments parameters:(id<NSDKMKtor_httpParameters>)parameters fragment:(NSString *)fragment trailingQuery:(BOOL)trailingQuery __attribute__((swift_name("init(protocol:host:port:user:password:pathSegments:parameters:fragment:trailingQuery:)"))) __attribute__((objc_designated_initializer));
- (NSDKMKtor_httpUrl *)build __attribute__((swift_name("build()")));
- (NSString *)buildString __attribute__((swift_name("buildString()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsGMTDate.Companion")))
@interface NSDKMKtor_utilsGMTDateCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_utilsGMTDateCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKtor_utilsGMTDate *START __attribute__((swift_name("START")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsWeekDay")))
@interface NSDKMKtor_utilsWeekDay : NSDKMKotlinEnum<NSDKMKtor_utilsWeekDay *>
@property (class, readonly, getter=companion) NSDKMKtor_utilsWeekDayCompanion *companion __attribute__((swift_name("companion")));
@property (class, readonly) NSDKMKtor_utilsWeekDay *monday __attribute__((swift_name("monday")));
@property (class, readonly) NSDKMKtor_utilsWeekDay *tuesday __attribute__((swift_name("tuesday")));
@property (class, readonly) NSDKMKtor_utilsWeekDay *wednesday __attribute__((swift_name("wednesday")));
@property (class, readonly) NSDKMKtor_utilsWeekDay *thursday __attribute__((swift_name("thursday")));
@property (class, readonly) NSDKMKtor_utilsWeekDay *friday __attribute__((swift_name("friday")));
@property (class, readonly) NSDKMKtor_utilsWeekDay *saturday __attribute__((swift_name("saturday")));
@property (class, readonly) NSDKMKtor_utilsWeekDay *sunday __attribute__((swift_name("sunday")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMKtor_utilsWeekDay *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsMonth")))
@interface NSDKMKtor_utilsMonth : NSDKMKotlinEnum<NSDKMKtor_utilsMonth *>
@property (class, readonly, getter=companion) NSDKMKtor_utilsMonthCompanion *companion __attribute__((swift_name("companion")));
@property (class, readonly) NSDKMKtor_utilsMonth *january __attribute__((swift_name("january")));
@property (class, readonly) NSDKMKtor_utilsMonth *february __attribute__((swift_name("february")));
@property (class, readonly) NSDKMKtor_utilsMonth *march __attribute__((swift_name("march")));
@property (class, readonly) NSDKMKtor_utilsMonth *april __attribute__((swift_name("april")));
@property (class, readonly) NSDKMKtor_utilsMonth *may __attribute__((swift_name("may")));
@property (class, readonly) NSDKMKtor_utilsMonth *june __attribute__((swift_name("june")));
@property (class, readonly) NSDKMKtor_utilsMonth *july __attribute__((swift_name("july")));
@property (class, readonly) NSDKMKtor_utilsMonth *august __attribute__((swift_name("august")));
@property (class, readonly) NSDKMKtor_utilsMonth *september __attribute__((swift_name("september")));
@property (class, readonly) NSDKMKtor_utilsMonth *october __attribute__((swift_name("october")));
@property (class, readonly) NSDKMKtor_utilsMonth *november __attribute__((swift_name("november")));
@property (class, readonly) NSDKMKtor_utilsMonth *december __attribute__((swift_name("december")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMKtor_utilsMonth *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHttpProtocolVersion.Companion")))
@interface NSDKMKtor_httpHttpProtocolVersionCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_httpHttpProtocolVersionCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKtor_httpHttpProtocolVersion *HTTP_1_0 __attribute__((swift_name("HTTP_1_0")));
@property (readonly) NSDKMKtor_httpHttpProtocolVersion *HTTP_1_1 __attribute__((swift_name("HTTP_1_1")));
@property (readonly) NSDKMKtor_httpHttpProtocolVersion *HTTP_2_0 __attribute__((swift_name("HTTP_2_0")));
@property (readonly) NSDKMKtor_httpHttpProtocolVersion *QUIC __attribute__((swift_name("QUIC")));
@property (readonly) NSDKMKtor_httpHttpProtocolVersion *SPDY_3 __attribute__((swift_name("SPDY_3")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMKtor_httpHttpProtocolVersion *)fromValueName:(NSString *)name major:(int32_t)major minor:(int32_t)minor __attribute__((swift_name("fromValue(name:major:minor:)")));
- (NSDKMKtor_httpHttpProtocolVersion *)parseValue:(id)value __attribute__((swift_name("parse(value:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((swift_name("Kotlinx_serialization_coreSerializersModuleCollector")))
@protocol NSDKMKotlinx_serialization_coreSerializersModuleCollector
@required
- (void)contextualKClass:(id<NSDKMKotlinKClass>)kClass provider:(id<NSDKMKotlinx_serialization_coreKSerializer> (^)(NSArray<id<NSDKMKotlinx_serialization_coreKSerializer>> *))provider __attribute__((swift_name("contextual(kClass:provider:)")));
- (void)contextualKClass:(id<NSDKMKotlinKClass>)kClass serializer:(id<NSDKMKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("contextual(kClass:serializer:)")));
- (void)polymorphicBaseClass:(id<NSDKMKotlinKClass>)baseClass actualClass:(id<NSDKMKotlinKClass>)actualClass actualSerializer:(id<NSDKMKotlinx_serialization_coreKSerializer>)actualSerializer __attribute__((swift_name("polymorphic(baseClass:actualClass:actualSerializer:)")));
- (void)polymorphicDefaultBaseClass:(id<NSDKMKotlinKClass>)baseClass defaultDeserializerProvider:(id<NSDKMKotlinx_serialization_coreDeserializationStrategy> _Nullable (^)(NSString * _Nullable))defaultDeserializerProvider __attribute__((swift_name("polymorphicDefault(baseClass:defaultDeserializerProvider:)"))) __attribute__((deprecated("Deprecated in favor of function with more precise name: polymorphicDefaultDeserializer")));
- (void)polymorphicDefaultDeserializerBaseClass:(id<NSDKMKotlinKClass>)baseClass defaultDeserializerProvider:(id<NSDKMKotlinx_serialization_coreDeserializationStrategy> _Nullable (^)(NSString * _Nullable))defaultDeserializerProvider __attribute__((swift_name("polymorphicDefaultDeserializer(baseClass:defaultDeserializerProvider:)")));
- (void)polymorphicDefaultSerializerBaseClass:(id<NSDKMKotlinKClass>)baseClass defaultSerializerProvider:(id<NSDKMKotlinx_serialization_coreSerializationStrategy> _Nullable (^)(id))defaultSerializerProvider __attribute__((swift_name("polymorphicDefaultSerializer(baseClass:defaultSerializerProvider:)")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.1")
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinKVariance")))
@interface NSDKMKotlinKVariance : NSDKMKotlinEnum<NSDKMKotlinKVariance *>
@property (class, readonly) NSDKMKotlinKVariance *invariant __attribute__((swift_name("invariant")));
@property (class, readonly) NSDKMKotlinKVariance *in __attribute__((swift_name("in")));
@property (class, readonly) NSDKMKotlinKVariance *out __attribute__((swift_name("out")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (NSDKMKotlinArray<NSDKMKotlinKVariance *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinKTypeProjection.Companion")))
@interface NSDKMKotlinKTypeProjectionCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKotlinKTypeProjectionCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKotlinKTypeProjection *STAR __attribute__((swift_name("STAR")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));

/**
 * @note annotations
 *   kotlin.jvm.JvmStatic
*/
- (NSDKMKotlinKTypeProjection *)contravariantType:(id<NSDKMKotlinKType>)type __attribute__((swift_name("contravariant(type:)")));

/**
 * @note annotations
 *   kotlin.jvm.JvmStatic
*/
- (NSDKMKotlinKTypeProjection *)covariantType:(id<NSDKMKotlinKType>)type __attribute__((swift_name("covariant(type:)")));

/**
 * @note annotations
 *   kotlin.jvm.JvmStatic
*/
- (NSDKMKotlinKTypeProjection *)invariantType:(id<NSDKMKotlinKType>)type __attribute__((swift_name("invariant(type:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpURLProtocol.Companion")))
@interface NSDKMKtor_httpURLProtocolCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_httpURLProtocolCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSDKMKtor_httpURLProtocol *HTTP __attribute__((swift_name("HTTP")));
@property (readonly) NSDKMKtor_httpURLProtocol *HTTPS __attribute__((swift_name("HTTPS")));
@property (readonly) NSDKMKtor_httpURLProtocol *SOCKS __attribute__((swift_name("SOCKS")));
@property (readonly) NSDKMKtor_httpURLProtocol *WS __attribute__((swift_name("WS")));
@property (readonly) NSDKMKtor_httpURLProtocol *WSS __attribute__((swift_name("WSS")));
@property (readonly) NSDictionary<NSString *, NSDKMKtor_httpURLProtocol *> *byName __attribute__((swift_name("byName")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMKtor_httpURLProtocol *)createOrDefaultName:(NSString *)name __attribute__((swift_name("createOrDefault(name:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpURLBuilder.Companion")))
@interface NSDKMKtor_httpURLBuilderCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_httpURLBuilderCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end

__attribute__((swift_name("Ktor_httpParametersBuilder")))
@protocol NSDKMKtor_httpParametersBuilder <NSDKMKtor_utilsStringValuesBuilder>
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsWeekDay.Companion")))
@interface NSDKMKtor_utilsWeekDayCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_utilsWeekDayCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMKtor_utilsWeekDay *)fromOrdinal:(int32_t)ordinal __attribute__((swift_name("from(ordinal:)")));
- (NSDKMKtor_utilsWeekDay *)fromValue:(NSString *)value __attribute__((swift_name("from(value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsMonth.Companion")))
@interface NSDKMKtor_utilsMonthCompanion : NSDKMBase
@property (class, readonly, getter=shared) NSDKMKtor_utilsMonthCompanion *shared __attribute__((swift_name("shared")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (NSDKMKtor_utilsMonth *)fromOrdinal:(int32_t)ordinal __attribute__((swift_name("from(ordinal:)")));
- (NSDKMKtor_utilsMonth *)fromValue:(NSString *)value __attribute__((swift_name("from(value:)")));
@end

#pragma pop_macro("_Nullable_result")
#pragma clang diagnostic pop
NS_ASSUME_NONNULL_END
