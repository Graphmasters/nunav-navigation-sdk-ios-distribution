// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -module-name NunavSDKMultiplatform
import Foundation
@_exported import NunavSDKMultiplatform
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = NunavSDKMultiplatform.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = NunavSDKMultiplatform.SkieKotlinSharedFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  final public func makeAsyncIterator() -> NunavSDKMultiplatform.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.SkieSwiftSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>._ObjectiveCType?) -> NunavSDKMultiplatform.SkieSwiftSharedFlow<T>
  @objc deinit
}
#endif
extension NunavSDKMultiplatform.Ktor_client_coreHttpClientCall {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func body(info: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_reflect_TypeInfo) async throws -> Any
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readFully(dst: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_core_internal_ChunkBuffer, n: Swift.Int32) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readFully(dst: NunavSDKMultiplatform.__Skie.class__stdlib__kotlin_ByteArray, offset: Swift.Int32, length: Swift.Int32) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readFully(dst: Swift.UnsafeMutableRawPointer, offset: Swift.Int32, length: Swift.Int32) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readFully(dst: Swift.UnsafeMutableRawPointer, offset: Swift.Int64, length: Swift.Int64) async throws
  #endif
}
@frozen public enum TurnCommand : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknown
  case straight
  case left
  case slightleft
  case sharpleft
  case right
  case slightright
  case sharpright
  case uturn
  case roundaboutstraight
  case roundaboutexit
  case roundaboutentry
  case rampexit
  case rampright
  case rampleft
  case rampstraight
  case roundaboutexit1
  case roundaboutexit2
  case roundaboutexit3
  case roundaboutexit4
  case roundaboutexit5
  case roundaboutexit6
  case roundaboutexit7
  case roundaboutexit8
  case roundaboutexit9
  case roundaboutexit10
  case destination
  case gateThrough
  case parkingExit
  case rampUp
  case rampDown
  case none
  public var id: Swift.Int32 {
    get
  }
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static var companion: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnCommand_Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnCommand, result: inout NunavSDKMultiplatform.TurnCommand?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnCommand, result: inout NunavSDKMultiplatform.TurnCommand?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnCommand?) -> NunavSDKMultiplatform.TurnCommand
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnCommand
  public typealias Companion = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnCommand_Companion
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnCommand
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.TurnCommand]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.TurnCommand] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@frozen public enum MeasurementSystem : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case metric
  case imperial
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_MeasurementSystem, result: inout NunavSDKMultiplatform.MeasurementSystem?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_MeasurementSystem, result: inout NunavSDKMultiplatform.MeasurementSystem?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_MeasurementSystem?) -> NunavSDKMultiplatform.MeasurementSystem
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_MeasurementSystem
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_MeasurementSystem
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.MeasurementSystem]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.MeasurementSystem] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeInt(i: Swift.Int32) async throws
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = NunavSDKMultiplatform.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = NunavSDKMultiplatform.SkieKotlinOptionalFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> NunavSDKMultiplatform.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.SkieSwiftOptionalFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftOptionalFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftOptionalFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalFlow<T>._ObjectiveCType?) -> NunavSDKMultiplatform.SkieSwiftOptionalFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = NunavSDKMultiplatform.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  final public func makeAsyncIterator() -> NunavSDKMultiplatform.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType?) -> NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T>
  @objc deinit
}
#endif
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_coreSerializersModule {
  @frozen public enum Enum {
    case `else`
    public static func == (a: NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_coreSerializersModule.Enum, b: NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_coreSerializersModule.Enum) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_coreSerializersModule.Enum where SEALED : NunavSDKMultiplatform.Kotlinx_serialization_coreSerializersModule
@frozen public enum RoadClass : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknown
  case motorway
  case motorwayLink
  case trunk
  case trunkLink
  case primary
  case primaryLink
  case secondary
  case secondaryLink
  case tertiary
  case tertiaryLink
  case livingStreet
  case residential
  case unclassified
  case service
  case road
  case construction
  case escape
  case track
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_RoadClass_Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_RoadClass, result: inout NunavSDKMultiplatform.RoadClass?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_RoadClass, result: inout NunavSDKMultiplatform.RoadClass?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_RoadClass?) -> NunavSDKMultiplatform.RoadClass
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_RoadClass
  public typealias Companion = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_RoadClass_Companion
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_RoadClass
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.RoadClass]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.RoadClass] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.Ktor_utilsWeekDay {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay
}
extension NunavSDKMultiplatform.__Ktor_utilsWeekDay {
  public func toSwiftEnum() -> NunavSDKMultiplatform.Ktor_utilsWeekDay
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = NunavSDKMultiplatform.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T) async throws
  #endif
  final public func tryEmit(value: T) -> Swift.Bool
  final public var subscriptionCount: NunavSDKMultiplatform.SkieSwiftStateFlow<NunavSDKMultiplatform.KotlinInt> {
    get
  }
  final public func resetReplayCache()
  final public func makeAsyncIterator() -> NunavSDKMultiplatform.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>._ObjectiveCType?) -> NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = NunavSDKMultiplatform.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = NunavSDKMultiplatform.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T?) async throws
  #endif
  final public func tryEmit(value: T?) -> Swift.Bool
  final public var subscriptionCount: NunavSDKMultiplatform.SkieSwiftStateFlow<NunavSDKMultiplatform.KotlinInt> {
    get
  }
  final public func resetReplayCache()
  final public func makeAsyncIterator() -> NunavSDKMultiplatform.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType?) -> NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>
  @objc deinit
}
#endif
public enum __Skie {
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_locale_LanguageProvider = NunavSDKMultiplatform.LanguageProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_BaseCameraComponent = NunavSDKMultiplatform.BaseCameraComponent
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_BaseCameraComponent_Companion = NunavSDKMultiplatform.BaseCameraComponent.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_CameraComponent = NunavSDKMultiplatform.CameraComponent
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_CameraUpdate = NunavSDKMultiplatform.CameraUpdate
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_Freezable = NunavSDKMultiplatform.Freezable
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_CameraUpdate_Padding = NunavSDKMultiplatform.CameraUpdate.Padding
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_CameraUpdateProvider = NunavSDKMultiplatform.CameraUpdateProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_DetachAwareCameraUpdateProviderDelegate = NunavSDKMultiplatform.DetachAwareCameraUpdateProviderDelegate
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_DetachedCameraUpdateProvider = NunavSDKMultiplatform.DetachedCameraUpdateProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_NavigationCameraHandler = NunavSDKMultiplatform.NavigationCameraHandler
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_NavigationCameraHandler_CameraTrackingListener = NunavSDKMultiplatform.NavigationCameraHandlerCameraTrackingListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_NavigationCameraHandler_CameraUpdateListener = NunavSDKMultiplatform.NavigationCameraHandlerCameraUpdateListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_NavigationCameraUpdateProvider = NunavSDKMultiplatform.NavigationCameraUpdateProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_NavigationCameraUpdateProvider_Companion = NunavSDKMultiplatform.NavigationCameraUpdateProvider.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_SchedulingCameraHandler = NunavSDKMultiplatform.SchedulingCameraHandler
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_heading_HeadingProvider = NunavSDKMultiplatform.HeadingProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_heading_PredictionHeadingProvider = NunavSDKMultiplatform.PredictionHeadingProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_zoom_GenericNavigationZoomProvider = NunavSDKMultiplatform.GenericNavigationZoomProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_zoom_ZoomProvider = NunavSDKMultiplatform.ZoomProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_zoom_GenericNavigationZoomProvider_Companion = NunavSDKMultiplatform.GenericNavigationZoomProvider.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_zoom_GenericNavigationZoomProvider_ZoomStep = NunavSDKMultiplatform.GenericNavigationZoomProvider.ZoomStep
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_zoom_RoutingEventAwareZoomProvider = NunavSDKMultiplatform.RoutingEventAwareZoomProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_zoom_RoutingEventAwareZoomProvider_Companion = NunavSDKMultiplatform.RoutingEventAwareZoomProvider.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_zoom_RoutingEventAwareZoomProvider_ZoomRange = NunavSDKMultiplatform.RoutingEventAwareZoomProvider.ZoomRange
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_location_CameraLocationProvider = NunavSDKMultiplatform.CameraLocationProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_location_PredictionCameraLocationProvider = NunavSDKMultiplatform.PredictionCameraLocationProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_tilt_StatefulManeuverAwareTiltProvider = NunavSDKMultiplatform.StatefulManeuverAwareTiltProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_tilt_TiltProvider = NunavSDKMultiplatform.TiltProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_tilt_StatefulManeuverAwareTiltProvider_Companion = NunavSDKMultiplatform.StatefulManeuverAwareTiltProvider.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_camera_padding_PaddingProvider = NunavSDKMultiplatform.PaddingProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_PredictedLocationProvider = NunavSDKMultiplatform.PredictedLocationProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_location_LocationProvider = NunavSDKMultiplatform.LocationProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_PredictedLocationProvider_Companion = NunavSDKMultiplatform.PredictedLocationProvider.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_RouteUtils = NunavSDKMultiplatform.RouteUtils
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_AbsoluteSpeedRouteFeatureCreator = NunavSDKMultiplatform.AbsoluteSpeedRouteFeatureCreator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_RouteFeatureCreator = NunavSDKMultiplatform.RouteFeatureCreator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_ColorUtils = NunavSDKMultiplatform.ColorUtils
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_ColorUtils_Color = NunavSDKMultiplatform.ColorUtils.Color
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_ColoringRouteFeatureCreator = NunavSDKMultiplatform.ColoringRouteFeatureCreator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_RelativeSpeedRouteFeatureCreator = NunavSDKMultiplatform.RelativeSpeedRouteFeatureCreator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_RelativeSpeedRouteFeatureCreator_Category = NunavSDKMultiplatform.RelativeSpeedRouteFeatureCreator.__Category
  public typealias swift____RelativeSpeedRouteFeatureCreator__Category = NunavSDKMultiplatform.__RelativeSpeedRouteFeatureCreator__Category
  public typealias class__stdlib__kotlin_Enum = NunavSDKMultiplatform.KotlinEnum
  public typealias class__stdlib__kotlin_Comparable = NunavSDKMultiplatform.KotlinComparable
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_RelativeSpeedRouteFeatureCreator_ColorProvider = NunavSDKMultiplatform.RelativeSpeedRouteFeatureCreatorColorProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_RelativeSpeedRouteFeatureCreator_ColorProvider_DefaultColorProvider = NunavSDKMultiplatform.RelativeSpeedRouteFeatureCreatorColorProviderDefaultColorProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_RelativeSpeedRouteFeatureCreator_Partition = NunavSDKMultiplatform.RelativeSpeedRouteFeatureCreator.Partition
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_RouteFeatureCreator_Companion = NunavSDKMultiplatform.RouteFeatureCreatorCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_RouteFeatureCreator_RouteFeature = NunavSDKMultiplatform.RouteFeatureCreatorRouteFeature
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_maneuver_ManeuverIconProvider = NunavSDKMultiplatform.ManeuverIconProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_maneuver_ManeuverIconProvider_ManeuverIcon = NunavSDKMultiplatform.ManeuverIconProvider.__ManeuverIcon
  public typealias swift____ManeuverIconProvider__ManeuverIcon = NunavSDKMultiplatform.__ManeuverIconProvider__ManeuverIcon
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_maneuver_ManeuverImageProvider = NunavSDKMultiplatform.ManeuverImageProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_maneuver_ManeuverMapIconCreator = NunavSDKMultiplatform.ManeuverMapIconCreator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_maneuver_ManeuverMapIconCreator_Companion = NunavSDKMultiplatform.ManeuverMapIconCreator.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_maneuver_ManeuverMapIconCreator_ManeuverMapIcon = NunavSDKMultiplatform.ManeuverMapIconCreator.ManeuverMapIcon
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIcon = NunavSDKMultiplatform.__LaneIcon
  public typealias swift__LaneIcon = NunavSDKMultiplatform.LaneIcon
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIconComposition = NunavSDKMultiplatform.LaneIconComposition
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIconCompositionProvider = NunavSDKMultiplatform.LaneIconCompositionProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_detach_DetachConstants = NunavSDKMultiplatform.DetachConstants
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_detach_OffRouteDetachStateProvider = NunavSDKMultiplatform.OffRouteDetachStateProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_detach_RouteDetachStateProvider = NunavSDKMultiplatform.RouteDetachStateProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_formatter_CompactDurationConverter = NunavSDKMultiplatform.CompactDurationConverter
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_formatter_DurationConverter = NunavSDKMultiplatform.DurationConverter
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_formatter_DetailedDistanceConverter = NunavSDKMultiplatform.DetailedDistanceConverter
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_formatter_DistanceConverter = NunavSDKMultiplatform.DistanceConverter
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_formatter_DistanceConverter_Companion = NunavSDKMultiplatform.DistanceConverterCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_formatter_DistanceConverter_Result = NunavSDKMultiplatform.DistanceConverterResult
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_formatter_DurationConverter_Companion = NunavSDKMultiplatform.DurationConverterCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_formatter_DurationConverter_Result = NunavSDKMultiplatform.DurationConverterResult
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_formatter_FormatUtils = NunavSDKMultiplatform.FormatUtils
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_formatter_RoundedDistanceConverter = NunavSDKMultiplatform.RoundedDistanceConverter
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_utils_LabelParser = NunavSDKMultiplatform.LabelParser
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_utils_PlainViewImageRenderer = NunavSDKMultiplatform.PlainViewImageRenderer
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_utils_ViewImageRenderer = NunavSDKMultiplatform.ViewImageRenderer
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_utils_TurnInfoUtils = NunavSDKMultiplatform.TurnInfoUtils
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_BaseLaneVoiceInstructionStringGenerator = NunavSDKMultiplatform.BaseLaneVoiceInstructionStringGenerator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_VoiceInstructionStringGenerator = NunavSDKMultiplatform.VoiceInstructionStringGenerator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_BaseLaneVoiceInstructionStringGenerator_LaneSection = NunavSDKMultiplatform.BaseLaneVoiceInstructionStringGenerator.__LaneSection
  public typealias swift____BaseLaneVoiceInstructionStringGenerator__LaneSection = NunavSDKMultiplatform.__BaseLaneVoiceInstructionStringGenerator__LaneSection
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_NavigationVoiceInstructionHandler = NunavSDKMultiplatform.NavigationVoiceInstructionHandler
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_VoiceInstructionHandler = NunavSDKMultiplatform.VoiceInstructionHandler
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_state_OnNavigationStateUpdatedListener = NunavSDKMultiplatform.OnNavigationStateUpdatedListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_TurnAwareAudioBalanceProvider = NunavSDKMultiplatform.TurnAwareAudioBalanceProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_VoiceInstructionContext = NunavSDKMultiplatform.VoiceInstructionContext
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_VoiceInstructionDispatcher = NunavSDKMultiplatform.VoiceInstructionDispatcher
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_VoiceInstructionHandler_Interceptor = NunavSDKMultiplatform.VoiceInstructionHandlerInterceptor
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_VoiceInstructionHandler_Interceptor_Result = NunavSDKMultiplatform.VoiceInstructionHandlerInterceptorResult
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_context_DurationBasedVoiceInstructionStageProvider = NunavSDKMultiplatform.DurationBasedVoiceInstructionStageProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_context_VoiceInstructionStageProvider = NunavSDKMultiplatform.VoiceInstructionStageProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_context_DurationBasedVoiceInstructionStageProvider_Companion = NunavSDKMultiplatform.DurationBasedVoiceInstructionStageProvider.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_context_NavigationVoiceInstructionContextProvider = NunavSDKMultiplatform.NavigationVoiceInstructionContextProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_context_VoiceInstructionContextProvider = NunavSDKMultiplatform.VoiceInstructionContextProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_GenericSpeakableConditionCreator = NunavSDKMultiplatform.GenericSpeakableConditionCreator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_SpeakableConditionCreator = NunavSDKMultiplatform.SpeakableConditionCreator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_LocaleVoiceInstructionStringGenerator = NunavSDKMultiplatform.LocaleVoiceInstructionStringGenerator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_SlawicSpeakableConditionCreator = NunavSDKMultiplatform.SlawicSpeakableConditionCreator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_SpeakableDirectionProvider = NunavSDKMultiplatform.SpeakableDirectionProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_detailed_de_GermanLaneVoiceCommandStringGenerator = NunavSDKMultiplatform.GermanLaneVoiceCommandStringGenerator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_detailed_de_GermanSpeakableConditionCreator = NunavSDKMultiplatform.GermanSpeakableConditionCreator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_detailed_de_GermanSpeakableDirectionProvider = NunavSDKMultiplatform.GermanSpeakableDirectionProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_detailed_de_GermanSpeakableDirectionProvider_Companion = NunavSDKMultiplatform.GermanSpeakableDirectionProvider.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_detailed_de_GermanSpeakableDirectionProvider_PrefixConfig = NunavSDKMultiplatform.GermanSpeakableDirectionProvider.PrefixConfig
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_detailed_de_GermanTurnVoiceInstructionStringGenerator = NunavSDKMultiplatform.GermanTurnVoiceInstructionStringGenerator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_detailed_en_EnglishLaneVoiceCommandStringGenerator = NunavSDKMultiplatform.EnglishLaneVoiceCommandStringGenerator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_detailed_en_EnglishSpeakableConditionCreator = NunavSDKMultiplatform.EnglishSpeakableConditionCreator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_detailed_en_EnglishSpeakableDirectionProvider = NunavSDKMultiplatform.EnglishSpeakableDirectionProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_detailed_en_EnglishTurnVoiceInstructionStringGenerator = NunavSDKMultiplatform.EnglishTurnVoiceInstructionStringGenerator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_nb_NorwegianLanguagePack = NunavSDKMultiplatform.NorwegianLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_cs_CzechLanguagePack = NunavSDKMultiplatform.CzechLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_et_EstonianLanguagePack = NunavSDKMultiplatform.EstonianLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_es_SpanishLanguagePack = NunavSDKMultiplatform.SpanishLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_hu_HungarianLanguagePack = NunavSDKMultiplatform.HungarianLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_fr_FrenchLanguagePack = NunavSDKMultiplatform.FrenchLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_it_ItalianLanguagePack = NunavSDKMultiplatform.ItalianLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_bg_BulgarianLanguagePack = NunavSDKMultiplatform.BulgarianLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_pt_PortugueseLanguagePack = NunavSDKMultiplatform.PortugueseLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_fi_FinnishLanguagePack = NunavSDKMultiplatform.FinnishLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_ru_RussianLanguagePack = NunavSDKMultiplatform.RussianLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_sv_SwedishLanguagePack = NunavSDKMultiplatform.SwedishLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_tr_TurkishLanguagePack = NunavSDKMultiplatform.TurkishLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_nl_DutchLanguagePack = NunavSDKMultiplatform.DutchLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_da_DanishLanguagePack = NunavSDKMultiplatform.DanishLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_ro_RomanianLanguagePack = NunavSDKMultiplatform.RomanianLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_strings_localization_simple_pl_PolishLanguagePack = NunavSDKMultiplatform.PolishLanguagePack
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_core_locale_FoundationLanguageProvider = NunavSDKMultiplatform.FoundationLanguageProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__IosNavigationSdk = NunavSDKMultiplatform.IosNavigationSdk
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_BaseNavigationSdk = NunavSDKMultiplatform.BaseNavigationSdk
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_NavigationSdk = NunavSDKMultiplatform.NavigationSdk
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_BaseNavigationSdk_Companion = NunavSDKMultiplatform.BaseNavigationSdk.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_InternetConnectionValidator = NunavSDKMultiplatform.InternetConnectionValidator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_IosInternetConnectionValidator = NunavSDKMultiplatform.IosInternetConnectionValidator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_IosInternetConnectionValidator_Companion = NunavSDKMultiplatform.IosInternetConnectionValidator.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_comparisson_DeltaIncludingRouteProvider = NunavSDKMultiplatform.DeltaIncludingRouteProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_RouteProvider = NunavSDKMultiplatform.RouteProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_comparisson_RouteComparisonProvider = NunavSDKMultiplatform.RouteComparisonProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_comparisson_RouteComparisonResult = NunavSDKMultiplatform.RouteComparisonResult
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_comparisson_RouteDeltaGenerator = NunavSDKMultiplatform.RouteDeltaGenerator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_network_Credentials = NunavSDKMultiplatform.Credentials
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_network_Credentials_ApiKey = NunavSDKMultiplatform.CredentialsApiKey
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_network_Credentials_Basic = NunavSDKMultiplatform.CredentialsBasic
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_network_HttpClientFactory = NunavSDKMultiplatform.HttpClientFactory
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_network_IOException = NunavSDKMultiplatform.IOException
  public typealias class__stdlib__kotlin_Exception = NunavSDKMultiplatform.KotlinException
  public typealias class__stdlib__kotlin_Throwable = NunavSDKMultiplatform.KotlinThrowable
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_network_TooManyRequestsException = NunavSDKMultiplatform.TooManyRequestsException
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_network_UnauthorizedException = NunavSDKMultiplatform.UnauthorizedException
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_speed_AccelerationEffectedSpeedTracker = NunavSDKMultiplatform.AccelerationEffectedSpeedTracker
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_speed_SpeedTracker = NunavSDKMultiplatform.SpeedTracker
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_location_LocationUpdateListener = NunavSDKMultiplatform.LocationUpdateListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_speed_AccelerationEffectedSpeedTracker_Companion = NunavSDKMultiplatform.AccelerationEffectedSpeedTracker.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_speed_AccelerationEffectedSpeedTracker_DecelerationModifier = NunavSDKMultiplatform.AccelerationEffectedSpeedTrackerDecelerationModifier
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_speed_AccelerationEffectedSpeedTracker_SpeedBasedDecelerationModifier = NunavSDKMultiplatform.AccelerationEffectedSpeedTracker.SpeedBasedDecelerationModifier
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_speed_CalculatingSpeedTracker = NunavSDKMultiplatform.CalculatingSpeedTracker
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_speed_CalculatingSpeedTracker_Companion = NunavSDKMultiplatform.CalculatingSpeedTracker.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_speed_SimpleSpeedTracker = NunavSDKMultiplatform.SimpleSpeedTracker
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_location_LocationRepository = NunavSDKMultiplatform.LocationRepository
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_location_filter_FilterWrapper = NunavSDKMultiplatform.FilterWrapper
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_location_filter_kalman_JKalmanFilter = NunavSDKMultiplatform.JKalmanFilter
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_location_filter_kalman_JKalmanFilter_Companion = NunavSDKMultiplatform.JKalmanFilter.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_location_filter_kalman_JKalmanMatrix = NunavSDKMultiplatform.JKalmanMatrix
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_location_filter_kalman_JKalmanMatrixApache = NunavSDKMultiplatform.JKalmanMatrixApache
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_location_filter_kalman_JKalmanSteps = NunavSDKMultiplatform.JKalmanSteps
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_location_filter_kalman_JKalmanSteps_Companion = NunavSDKMultiplatform.JKalmanSteps.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_location_filter_kalman_KalmanPair = NunavSDKMultiplatform.KalmanPair
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_statistics_DeviceStatisticsProvider = NunavSDKMultiplatform.DeviceStatisticsProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_statistics_StatisticsProvider = NunavSDKMultiplatform.StatisticsProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_statistics_DeviceStatisticsProvider_Companion = NunavSDKMultiplatform.DeviceStatisticsProvider.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_statistics_DeviceStatisticsProvider_DeviceState = NunavSDKMultiplatform.DeviceStatisticsProvider.DeviceState
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_statistics_DeviceStatisticsProvider_DeviceStateProvider = NunavSDKMultiplatform.DeviceStatisticsProviderDeviceStateProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_statistics_DeviceStatisticsProvider_DeviceStatistics = NunavSDKMultiplatform.DeviceStatisticsProvider.DeviceStatistics
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_statistics_DeviceStatisticsProvider_ThermalState = NunavSDKMultiplatform.DeviceStatisticsProvider.__ThermalState
  public typealias swift____DeviceStatisticsProvider__ThermalState = NunavSDKMultiplatform.__DeviceStatisticsProvider__ThermalState
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_statistics_NavigationStatisticsProvider = NunavSDKMultiplatform.NavigationStatisticsProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_events_NavigationEventHandler_OnInitialRouteReceivedListener = NunavSDKMultiplatform.NavigationEventHandlerOnInitialRouteReceivedListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_projection_OnRouteProjector = NunavSDKMultiplatform.OnRouteProjector
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_projection_OnRouteProjector_OnRouteProjectorListener = NunavSDKMultiplatform.OnRouteProjectorOnRouteProjectorListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_projection_OnRouteProjector_ProjectedLocation = NunavSDKMultiplatform.OnRouteProjectorProjectedLocation
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_location_Location = NunavSDKMultiplatform.Location
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_projection_finder_DistanceAlignmentProjectionFinder = NunavSDKMultiplatform.DistanceAlignmentProjectionFinder
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_projection_finder_ProjectionFinder = NunavSDKMultiplatform.ProjectionFinder
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_projection_finder_DistanceAlignmentProjectionFinder_Companion = NunavSDKMultiplatform.DistanceAlignmentProjectionFinder.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_projection_finder_DistanceAlignmentProjectionFinder_ProjectionResult = NunavSDKMultiplatform.DistanceAlignmentProjectionFinder.ProjectionResult
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_projection_finder_DistanceAlignmentProjectionFinder_ProjectionResultListener = NunavSDKMultiplatform.DistanceAlignmentProjectionFinderProjectionResultListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_projection_finder_PlainDistanceProjectionFinder = NunavSDKMultiplatform.PlainDistanceProjectionFinder
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_projection_finder_ProjectionFinder_Options = NunavSDKMultiplatform.ProjectionFinderOptions
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_prediction_OnRoutePredictor = NunavSDKMultiplatform.OnRoutePredictor
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_prediction_OnRoutePredictor_OnRoutePredictionListener = NunavSDKMultiplatform.OnRoutePredictorOnRoutePredictionListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_prediction_OnRoutePredictor_Options = NunavSDKMultiplatform.OnRoutePredictorOptions
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_prediction_OnRoutePredictor_PredictedLocation = NunavSDKMultiplatform.OnRoutePredictorPredictedLocation
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_prediction_SpeedBasedOnRoutePredictor = NunavSDKMultiplatform.SpeedBasedOnRoutePredictor
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_prediction_SpeedBasedOnRoutePredictor_Companion = NunavSDKMultiplatform.SpeedBasedOnRoutePredictor.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_shifting_OnRouteShifter = NunavSDKMultiplatform.OnRouteShifter
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_shifting_OnRouteShifter_ShiftParameters = NunavSDKMultiplatform.OnRouteShifterShiftParameters
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_shifting_OnRouteShifter_ShiftedLocation = NunavSDKMultiplatform.OnRouteShifterShiftedLocation
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_state_DefaultNavigationStateRepository = NunavSDKMultiplatform.DefaultNavigationStateRepository
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_state_NavigationStateRepository = NunavSDKMultiplatform.NavigationStateRepository
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_state_DefaultNavigationStateRepository_Companion = NunavSDKMultiplatform.DefaultNavigationStateRepository.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_state_NavigationState = NunavSDKMultiplatform.NavigationState
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_state_OnNavigationStateInitializedListener = NunavSDKMultiplatform.OnNavigationStateInitializedListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_session_KtorSessionClient = NunavSDKMultiplatform.KtorSessionClient
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_session_SessionClient = NunavSDKMultiplatform.SessionClient
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_session_SessionClient_Callback = NunavSDKMultiplatform.SessionClientCallback
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_session_SessionIdGenerator = NunavSDKMultiplatform.SessionIdGenerator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_session_SessionParamProvider = NunavSDKMultiplatform.SessionParamProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_session_SessionRepository = NunavSDKMultiplatform.SessionRepository
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_session_SimpleSessionRepository = NunavSDKMultiplatform.SimpleSessionRepository
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_session_UUIDSessionIdGenerator = NunavSDKMultiplatform.UUIDSessionIdGenerator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_events_NavigationEventHandler = NunavSDKMultiplatform.NavigationEventHandler
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_events_NavigationEventHandler_OnDestinationChangedListener = NunavSDKMultiplatform.NavigationEventHandlerOnDestinationChangedListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_events_NavigationEventHandler_OnDestinationReachedListener = NunavSDKMultiplatform.NavigationEventHandlerOnDestinationReachedListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_events_NavigationEventHandler_OnLeavingDestinationListener = NunavSDKMultiplatform.NavigationEventHandlerOnLeavingDestinationListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_events_NavigationEventHandler_OnNavigationStartedListener = NunavSDKMultiplatform.NavigationEventHandlerOnNavigationStartedListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_events_NavigationEventHandler_OnNavigationStoppedListener = NunavSDKMultiplatform.NavigationEventHandlerOnNavigationStoppedListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_events_NavigationEventHandler_OnOffRouteListener = NunavSDKMultiplatform.NavigationEventHandlerOnOffRouteListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_events_NavigationEventHandler_OnRouteRequestFailedListener = NunavSDKMultiplatform.NavigationEventHandlerOnRouteRequestFailedListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_events_NavigationEventHandler_OnRouteUpdateListener = NunavSDKMultiplatform.NavigationEventHandlerOnRouteUpdateListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_events_NavigationEventHandler_OnTrackingSpeedReachedListener = NunavSDKMultiplatform.NavigationEventHandlerOnTrackingSpeedReachedListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_events_NavigationResult = NunavSDKMultiplatform.NavigationResult
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_events_SimpleNavigationEventHandler = NunavSDKMultiplatform.SimpleNavigationEventHandler
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_routable_DefaultDestinationRepository = NunavSDKMultiplatform.DefaultDestinationRepository
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_routable_DestinationRepository = NunavSDKMultiplatform.DestinationRepository
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_routable_OnCurrentDestinationChangedListener = NunavSDKMultiplatform.OnCurrentDestinationChangedListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_routable_OnDestinationsChangedListener = NunavSDKMultiplatform.OnDestinationsChangedListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_engine_NavigationEngine = NunavSDKMultiplatform.NavigationEngine
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_engine_SchedulingNavigationEngine = NunavSDKMultiplatform.SchedulingNavigationEngine
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_RouteRepository_RouteUpdatedListener = NunavSDKMultiplatform.RouteRepositoryRouteUpdatedListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_progress_RouteProgressTracker_OnRouteProgressUpdatedListener = NunavSDKMultiplatform.RouteProgressTrackerOnRouteProgressUpdatedListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_OnRouteTracker_OnRouteStateListener = NunavSDKMultiplatform.OnRouteTrackerOnRouteStateListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_engine_update_DistanceBasedUpdateRateProvider = NunavSDKMultiplatform.DistanceBasedUpdateRateProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_engine_update_UpdateRateProvider = NunavSDKMultiplatform.UpdateRateProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_engine_update_StaticUpdateRateProvider = NunavSDKMultiplatform.StaticUpdateRateProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_progress_PredictionBasedRouteProgressTracker = NunavSDKMultiplatform.PredictionBasedRouteProgressTracker
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_progress_RouteProgressTracker = NunavSDKMultiplatform.RouteProgressTracker
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_progress_ProgressHelper = NunavSDKMultiplatform.ProgressHelper
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_progress_RouteProgressStateUpdater = NunavSDKMultiplatform.RouteProgressStateUpdater
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_progress_RouteProgressTracker_NotYetInitializedException = NunavSDKMultiplatform.RouteProgressTrackerNotYetInitializedException
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_progress_RouteProgressTracker_RouteProgress = NunavSDKMultiplatform.RouteProgressTrackerRouteProgress
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_progress_StatelessRouteProgressStateUpdater = NunavSDKMultiplatform.StatelessRouteProgressStateUpdater
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_destination_InterceptingValidator = NunavSDKMultiplatform.InterceptingValidator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_destination_Validator = NunavSDKMultiplatform.Validator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_destination_InterceptingValidator_Interceptor = NunavSDKMultiplatform.InterceptingValidatorInterceptor
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_destination_reaching_DistanceBasedReachingDestinationValidator = NunavSDKMultiplatform.DistanceBasedReachingDestinationValidator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_destination_leaving_DistanceBasedLeavingDestinationValidator = NunavSDKMultiplatform.DistanceBasedLeavingDestinationValidator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_destination_leaving_DistanceBasedLeavingDestinationValidator_Companion = NunavSDKMultiplatform.DistanceBasedLeavingDestinationValidator.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_CombiningOffRouteRequestValidator = NunavSDKMultiplatform.CombiningOffRouteRequestValidator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_SchedulingRouteRepository_OffRouteRequestValidator = NunavSDKMultiplatform.SchedulingRouteRepositoryOffRouteRequestValidator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_DistanceOffRouteRequestValidator = NunavSDKMultiplatform.DistanceOffRouteRequestValidator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_DurationOffRouteRequestValidator = NunavSDKMultiplatform.DurationOffRouteRequestValidator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_NoLocationAvailableException = NunavSDKMultiplatform.NoLocationAvailableException
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_RouteRepository = NunavSDKMultiplatform.RouteRepository
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_RouteRequestJob = NunavSDKMultiplatform.RouteRequestJob
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_RouteRequestJob_Listener = NunavSDKMultiplatform.RouteRequestJobListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_SchedulingRouteRepository = NunavSDKMultiplatform.SchedulingRouteRepository
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_FallbackRouteProvider = NunavSDKMultiplatform.FallbackRouteProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_KtorRouteProvider = NunavSDKMultiplatform.KtorRouteProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_KtorRouteProvider_GetRouteBody = NunavSDKMultiplatform.KtorRouteProvider.GetRouteBody
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_KtorRouteProvider_GetRouteBody_Companion = NunavSDKMultiplatform.KtorRouteProvider.GetRouteBodyCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_KtorRouteProvider_ProbeDto = NunavSDKMultiplatform.KtorRouteProvider.ProbeDto
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_KtorRouteProvider_ProbeDto_Companion = NunavSDKMultiplatform.KtorRouteProvider.ProbeDtoCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_RouteProvider_RouteNotFoundException = NunavSDKMultiplatform.RouteProviderRouteNotFoundException
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_RouteProvider_RouteRequest = NunavSDKMultiplatform.RouteProviderRouteRequest
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_RouteProvider_RouteRequest_Destination = NunavSDKMultiplatform.RouteProviderRouteRequest.Destination
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_RouteProvider_Type = NunavSDKMultiplatform.__RouteProviderType
  public typealias swift__RouteProviderType = NunavSDKMultiplatform.RouteProviderType
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_RoutingConfig = NunavSDKMultiplatform.RoutingConfig
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_RoutingParamProvider = NunavSDKMultiplatform.RoutingParamProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_trail_LocationTrailProvider = NunavSDKMultiplatform.LocationTrailProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_FullRouteDtoConverter = NunavSDKMultiplatform.FullRouteDtoConverter
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDtoConverter = NunavSDKMultiplatform.RouteDtoConverter
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_FullRouteDtoConverter_Companion = NunavSDKMultiplatform.FullRouteDtoConverter.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_MergingRouteDtoConverter = NunavSDKMultiplatform.MergingRouteDtoConverter
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDataDto = NunavSDKMultiplatform.RouteDataDto
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDataDto_Companion = NunavSDKMultiplatform.RouteDataDto.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto = NunavSDKMultiplatform.RouteDto
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_Companion = NunavSDKMultiplatform.RouteDto.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_DestinationInfo = NunavSDKMultiplatform.RouteDto.DestinationInfo
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_DestinationInfo_Companion = NunavSDKMultiplatform.RouteDto.DestinationInfoCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_Enforcement = NunavSDKMultiplatform.RouteDto.Enforcement
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_Enforcement_Companion = NunavSDKMultiplatform.RouteDto.EnforcementCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_GeoPoint = NunavSDKMultiplatform.RouteDto.GeoPoint
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_GeoPoint_Companion = NunavSDKMultiplatform.RouteDto.GeoPointCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_RouteLeg = NunavSDKMultiplatform.RouteDto.RouteLeg
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_RouteLeg_Companion = NunavSDKMultiplatform.RouteDto.RouteLegCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_RouteLeg_FuelStation = NunavSDKMultiplatform.RouteDto.RouteLegFuelStation
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_RouteLeg_FuelStation_Companion = NunavSDKMultiplatform.RouteDto.RouteLegFuelStationCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_RouteLeg_ParkingArea = NunavSDKMultiplatform.RouteDto.RouteLegParkingArea
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_RouteLeg_ParkingArea_Companion = NunavSDKMultiplatform.RouteDto.RouteLegParkingAreaCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_RouteLeg_Step = NunavSDKMultiplatform.RouteDto.RouteLegStep
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_RouteLeg_Step_Companion = NunavSDKMultiplatform.RouteDto.RouteLegStepCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_RouteLeg_Step_Lane = NunavSDKMultiplatform.RouteDto.RouteLegStepLane
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_RouteLeg_Step_Lane_Companion = NunavSDKMultiplatform.RouteDto.RouteLegStepLaneCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_RouteLeg_Step_TurnInfo = NunavSDKMultiplatform.RouteDto.RouteLegStepTurnInfo
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDto_RouteLeg_Step_TurnInfo_Companion = NunavSDKMultiplatform.RouteDto.RouteLegStepTurnInfoCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_dto_RouteDtoConverter_RouteConversionExceptions = NunavSDKMultiplatform.RouteDtoConverterRouteConversionExceptions
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_merging_CompleteRouteMerger = NunavSDKMultiplatform.CompleteRouteMerger
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_merging_RouteMerger = NunavSDKMultiplatform.RouteMerger
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_utils_RouteUtils = NunavSDKMultiplatform.RouteUtils_
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_ChanceBasedOnRouteTracker = NunavSDKMultiplatform.ChanceBasedOnRouteTracker
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_OnRouteTracker = NunavSDKMultiplatform.OnRouteTracker
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_ChanceBasedOnRouteTracker_Companion = NunavSDKMultiplatform.ChanceBasedOnRouteTracker.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_ChanceCalculator = NunavSDKMultiplatform.ChanceCalculator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_ChanceCalculator_Companion = NunavSDKMultiplatform.ChanceCalculatorCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_OnRouteTracker_State = NunavSDKMultiplatform.__OnRouteTrackerState
  public typealias swift__OnRouteTrackerState = NunavSDKMultiplatform.OnRouteTrackerState
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_WeightedChanceCalculator = NunavSDKMultiplatform.WeightedChanceCalculator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_calculators_DistanceBasedChanceCalculator = NunavSDKMultiplatform.DistanceBasedChanceCalculator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_calculators_HeadingBasedChanceCalculator = NunavSDKMultiplatform.HeadingBasedChanceCalculator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_calculators_HeadingBasedChanceCalculator_Companion = NunavSDKMultiplatform.HeadingBasedChanceCalculator.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_calculators_LevelBasedChanceCalculator = NunavSDKMultiplatform.LevelBasedChanceCalculator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_calculators_TurnCommandAlignmentChanceCalculator = NunavSDKMultiplatform.TurnCommandAlignmentChanceCalculator
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_calculators_TurnCommandAlignmentChanceCalculator_Companion = NunavSDKMultiplatform.TurnCommandAlignmentChanceCalculator.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_HeadingDependentRoutable = NunavSDKMultiplatform.HeadingDependentRoutable
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Routable = NunavSDKMultiplatform.Routable
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_LaneInfo = NunavSDKMultiplatform.LaneInfo
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_LaneInfo_Lane = NunavSDKMultiplatform.LaneInfo.Lane
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_LaneInfo_Lane_LaneTurn = NunavSDKMultiplatform.LaneInfo.__LaneLaneTurn
  public typealias swift____LaneInfo__LaneLaneTurn = NunavSDKMultiplatform.__LaneInfo__LaneLaneTurn
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_ManagedRoutable = NunavSDKMultiplatform.ManagedRoutable
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Maneuver = NunavSDKMultiplatform.Maneuver
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_ParkingLocationRoutable = NunavSDKMultiplatform.ParkingLocationRoutable
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_RoadClass = NunavSDKMultiplatform.__RoadClass
  public typealias swift__RoadClass = NunavSDKMultiplatform.RoadClass
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_RoadClass_Companion = NunavSDKMultiplatform.__RoadClass.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_RoutableFactory = NunavSDKMultiplatform.RoutableFactory
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route = NunavSDKMultiplatform.Route
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_DestinationInfo = NunavSDKMultiplatform.Route.DestinationInfo
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Enforcement = NunavSDKMultiplatform.Route.Enforcement
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Enforcement_Type = NunavSDKMultiplatform.Route.__EnforcementType
  public typealias swift____Route__EnforcementType = NunavSDKMultiplatform.__Route__EnforcementType
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_FuelStation = NunavSDKMultiplatform.Route.FuelStation
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_FuelStation_Type = NunavSDKMultiplatform.Route.__FuelStationType
  public typealias swift____Route__FuelStationType = NunavSDKMultiplatform.__Route__FuelStationType
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_ParkingArea = NunavSDKMultiplatform.Route.ParkingArea
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_ParkingArea_Type = NunavSDKMultiplatform.Route.__ParkingAreaType
  public typealias swift____Route__ParkingAreaType = NunavSDKMultiplatform.__Route__ParkingAreaType
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_RouteDelta = NunavSDKMultiplatform.Route.RouteDelta
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Segment = NunavSDKMultiplatform.Route.Segment
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Step = NunavSDKMultiplatform.Route.Step
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Waypoint = NunavSDKMultiplatform.Route.Waypoint
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Waypoint_GpsQuality = NunavSDKMultiplatform.Route.__WaypointGpsQuality
  public typealias swift____Route__WaypointGpsQuality = NunavSDKMultiplatform.__Route__WaypointGpsQuality
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_RouteData = NunavSDKMultiplatform.RouteData
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnCommand = NunavSDKMultiplatform.__TurnCommand
  public typealias swift__TurnCommand = NunavSDKMultiplatform.TurnCommand
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnCommand_Companion = NunavSDKMultiplatform.__TurnCommand.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnInfo = NunavSDKMultiplatform.TurnInfo
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnInfo_StreetSide = NunavSDKMultiplatform.TurnInfo.__StreetSide
  public typealias swift____TurnInfo__StreetSide = NunavSDKMultiplatform.__TurnInfo__StreetSide
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_analytics_NavigationLifeCycleAnalyticsLogger = NunavSDKMultiplatform.NavigationLifeCycleAnalyticsLogger
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_vehicle_GenericVehicleConfig = NunavSDKMultiplatform.GenericVehicleConfig
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_vehicle_VehicleConfig = NunavSDKMultiplatform.VehicleConfig
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_vehicle_Templates = NunavSDKMultiplatform.Templates
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_vehicle_TruckConfig = NunavSDKMultiplatform.TruckConfig
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_vehicle_VehicleConfig_Dimensions = NunavSDKMultiplatform.VehicleConfigDimensions
  public typealias class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_vehicle_VehicleConfig_Properties = NunavSDKMultiplatform.VehicleConfigProperties
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_AppInfo = NunavSDKMultiplatform.AppInfo
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_CoroutineExecutor = NunavSDKMultiplatform.CoroutineExecutor
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_Executor = NunavSDKMultiplatform.Executor
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_DeviceInfo = NunavSDKMultiplatform.DeviceInfo
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_Executor_Future = NunavSDKMultiplatform.ExecutorFuture
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_FoundationTimeProvider = NunavSDKMultiplatform.FoundationTimeProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_time_TimeProvider = NunavSDKMultiplatform.TimeProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_OperationQueueExecutor = NunavSDKMultiplatform.OperationQueueExecutor
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_Serializable = NunavSDKMultiplatform.Serializable
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_location_CLLocationConverter = NunavSDKMultiplatform.CLLocationConverter
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_location_CLLocationProvider = NunavSDKMultiplatform.CLLocationProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_location_IteratingLocationProvider = NunavSDKMultiplatform.IteratingLocationProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_location_Location_Companion = NunavSDKMultiplatform.Location.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_location_LocationProvider_LocationUpdateListener = NunavSDKMultiplatform.LocationProviderLocationUpdateListener
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_logging_GMLog = NunavSDKMultiplatform.GMLog
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_logging_Logger = NunavSDKMultiplatform.Logger
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_logging_PrintLogger = NunavSDKMultiplatform.PrintLogger
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_Duration = NunavSDKMultiplatform.Duration
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_Duration_Companion = NunavSDKMultiplatform.Duration.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_Length = NunavSDKMultiplatform.Length
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_Length_Companion = NunavSDKMultiplatform.Length.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_LocaleMeasurementSystemProvider = NunavSDKMultiplatform.LocaleMeasurementSystemProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_MeasurementSystemProvider = NunavSDKMultiplatform.MeasurementSystemProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_MeasurementSystem = NunavSDKMultiplatform.__MeasurementSystem
  public typealias swift__MeasurementSystem = NunavSDKMultiplatform.MeasurementSystem
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_Speed = NunavSDKMultiplatform.Speed
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_Speed_Companion = NunavSDKMultiplatform.Speed.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_Timestamp = NunavSDKMultiplatform.Timestamp
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_Timestamp_Companion = NunavSDKMultiplatform.Timestamp.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_analytics_AnalyticsHandler = NunavSDKMultiplatform.AnalyticsHandler
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_analytics_GMAnalytics = NunavSDKMultiplatform.GMAnalytics
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_concurrency_CoroutineDispatchers = NunavSDKMultiplatform.CoroutineDispatchers
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_concurrency_MainThread = NunavSDKMultiplatform.MainThread
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_optim_AbstractOptimizationProblem = NunavSDKMultiplatform.AbstractOptimizationProblem
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_optim_OptimizationProblem = NunavSDKMultiplatform.OptimizationProblem
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_optim_AbstractOptimizationProblem_Companion = NunavSDKMultiplatform.AbstractOptimizationProblemCompanion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_AbstractEvaluation = NunavSDKMultiplatform.AbstractEvaluation
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_LeastSquaresProblem_Evaluation = NunavSDKMultiplatform.LeastSquaresProblemEvaluation
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_DenseWeightedEvaluation = NunavSDKMultiplatform.DenseWeightedEvaluation
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_LeastSquaresAdapter = NunavSDKMultiplatform.LeastSquaresAdapter
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_LeastSquaresProblem = NunavSDKMultiplatform.LeastSquaresProblem
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_LeastSquaresFactory = NunavSDKMultiplatform.LeastSquaresFactory
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_LeastSquaresFactory_Companion = NunavSDKMultiplatform.LeastSquaresFactory.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_LeastSquaresOptimizer = NunavSDKMultiplatform.LeastSquaresOptimizer
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_LeastSquaresOptimizer_Optimum = NunavSDKMultiplatform.LeastSquaresOptimizerOptimum
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_LevenbergMarquardtOptimizer = NunavSDKMultiplatform.LevenbergMarquardtOptimizer
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_LevenbergMarquardtOptimizer_Companion = NunavSDKMultiplatform.LevenbergMarquardtOptimizer.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_LocalLeastSquaresProblem = NunavSDKMultiplatform.LocalLeastSquaresProblem
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_MultivariateJacobianFunction = NunavSDKMultiplatform.MultivariateJacobianFunction
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_OptimumImpl = NunavSDKMultiplatform.OptimumImpl
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_Precision = NunavSDKMultiplatform.Precision
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_leastsquares_Precision_Companion = NunavSDKMultiplatform.Precision.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_utils_Incrementor = NunavSDKMultiplatform.Incrementor
  public typealias class__stdlib__kotlin_collections_Iterator = NunavSDKMultiplatform.KotlinIterator
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_utils_Incrementor_Companion = NunavSDKMultiplatform.Incrementor.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_utils_Incrementor_MaxCountExceededCallback = NunavSDKMultiplatform.IncrementorMaxCountExceededCallback
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_utils_MatrixUtils = NunavSDKMultiplatform.MatrixUtils
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_utils_MatrixUtils_Companion = NunavSDKMultiplatform.MatrixUtils.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_utils_Pair = NunavSDKMultiplatform.Pair
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_AbstractRealMatrix = NunavSDKMultiplatform.AbstractRealMatrix
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_RealMatrix = NunavSDKMultiplatform.RealMatrix
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_AnyMatrix = NunavSDKMultiplatform.AnyMatrix
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_AbstractRealMatrix_Companion = NunavSDKMultiplatform.AbstractRealMatrix.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_Array2DRowRealMatrix = NunavSDKMultiplatform.Array2DRowRealMatrix
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_ArrayRealVector = NunavSDKMultiplatform.ArrayRealVector
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_RealVector = NunavSDKMultiplatform.RealVector
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_BlockRealMatrix = NunavSDKMultiplatform.BlockRealMatrix
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_BlockRealMatrix_Companion = NunavSDKMultiplatform.BlockRealMatrix.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_DecompositionSolver = NunavSDKMultiplatform.DecompositionSolver
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_DefaultRealMatrixPreservingVisitor = NunavSDKMultiplatform.DefaultRealMatrixPreservingVisitor
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_RealMatrixPreservingVisitor = NunavSDKMultiplatform.RealMatrixPreservingVisitor
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_DiagonalMatrix = NunavSDKMultiplatform.DiagonalMatrix
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_LUDecomposition = NunavSDKMultiplatform.LUDecomposition
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_LUDecomposition_Companion = NunavSDKMultiplatform.LUDecomposition.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_QRDecomposition = NunavSDKMultiplatform.QRDecomposition
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_math_linear_QRDecomposition_Solver = NunavSDKMultiplatform.QRDecomposition.Solver
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_geodesy_Cartesian = NunavSDKMultiplatform.Cartesian
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_geodesy_Geodesy = NunavSDKMultiplatform.Geodesy
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_geodesy_Geodesy_Segment = NunavSDKMultiplatform.Geodesy.Segment
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_geodesy_GeodeticCalculator = NunavSDKMultiplatform.GeodeticCalculator
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_model_LatLng = NunavSDKMultiplatform.LatLng
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_model_LatLng_Companion = NunavSDKMultiplatform.LatLng.Companion
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_uuid_UUID = NunavSDKMultiplatform.UUID
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_time_AdjustableBaselineTimeProvider = NunavSDKMultiplatform.AdjustableBaselineTimeProvider
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_time_DateTimeFormatter = NunavSDKMultiplatform.DateTimeFormatter
  public typealias class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_time_Time = NunavSDKMultiplatform.Time
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieColdFlowIterator = NunavSDKMultiplatform.SkieColdFlowIterator
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinFlow = NunavSDKMultiplatform.SkieKotlinFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftFlow = NunavSDKMultiplatform.SkieSwiftFlow
  #endif
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_flow_Flow = NunavSDKMultiplatform.Kotlinx_coroutines_coreFlow
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinMutableSharedFlow = NunavSDKMultiplatform.SkieKotlinMutableSharedFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftMutableSharedFlow = NunavSDKMultiplatform.SkieSwiftMutableSharedFlow
  #endif
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_flow_MutableSharedFlow = NunavSDKMultiplatform.Kotlinx_coroutines_coreMutableSharedFlow
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_flow_SharedFlow = NunavSDKMultiplatform.Kotlinx_coroutines_coreSharedFlow
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_flow_FlowCollector = NunavSDKMultiplatform.Kotlinx_coroutines_coreFlowCollector
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinMutableStateFlow = NunavSDKMultiplatform.SkieKotlinMutableStateFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftMutableStateFlow = NunavSDKMultiplatform.SkieSwiftMutableStateFlow
  #endif
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_flow_MutableStateFlow = NunavSDKMultiplatform.Kotlinx_coroutines_coreMutableStateFlow
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_flow_StateFlow = NunavSDKMultiplatform.Kotlinx_coroutines_coreStateFlow
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinOptionalFlow = NunavSDKMultiplatform.SkieKotlinOptionalFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftOptionalFlow = NunavSDKMultiplatform.SkieSwiftOptionalFlow
  #endif
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinOptionalMutableSharedFlow = NunavSDKMultiplatform.SkieKotlinOptionalMutableSharedFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftOptionalMutableSharedFlow = NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow
  #endif
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinOptionalMutableStateFlow = NunavSDKMultiplatform.SkieKotlinOptionalMutableStateFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftOptionalMutableStateFlow = NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow
  #endif
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinOptionalSharedFlow = NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftOptionalSharedFlow = NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow
  #endif
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinOptionalStateFlow = NunavSDKMultiplatform.SkieKotlinOptionalStateFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftOptionalStateFlow = NunavSDKMultiplatform.SkieSwiftOptionalStateFlow
  #endif
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinSharedFlow = NunavSDKMultiplatform.SkieKotlinSharedFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftSharedFlow = NunavSDKMultiplatform.SkieSwiftSharedFlow
  #endif
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinStateFlow = NunavSDKMultiplatform.SkieKotlinStateFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftStateFlow = NunavSDKMultiplatform.SkieSwiftStateFlow
  #endif
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_CancellationHandler = NunavSDKMultiplatform.Skie_CancellationHandler
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_DispatcherDelegate = NunavSDKMultiplatform.Skie_DispatcherDelegate
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendHandler = NunavSDKMultiplatform.Skie_SuspendHandler
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendResult = NunavSDKMultiplatform.Skie_SuspendResult
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendResult_Canceled = NunavSDKMultiplatform.Skie_SuspendResult.Canceled
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendResult_Error = NunavSDKMultiplatform.Skie_SuspendResult.Error
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendResult_Success = NunavSDKMultiplatform.Skie_SuspendResult.Success
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIconProvider = NunavSDKMultiplatform.LaneIconProvider
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIconProvider_LaneIcon = NunavSDKMultiplatform.LaneIconProvider.__LaneIcon
  public typealias swift____LaneIconProvider__LaneIcon = NunavSDKMultiplatform.__LaneIconProvider__LaneIcon
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_DayTimeTimestampConverter = NunavSDKMultiplatform.DayTimeTimestampConverter
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_TimestampConverter = NunavSDKMultiplatform.TimestampConverter
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_DayTimeTimestampConverter_Companion = NunavSDKMultiplatform.DayTimeTimestampConverter.Companion
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_HourDurationConverter = NunavSDKMultiplatform.HourDurationConverter
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_SdkDurationConverter = NunavSDKMultiplatform.SdkDurationConverter
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_HourDurationConverter_Companion = NunavSDKMultiplatform.HourDurationConverter.Companion
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_SdkDistanceConverter = NunavSDKMultiplatform.SdkDistanceConverter
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_SdkDurationConverter_Result = NunavSDKMultiplatform.SdkDurationConverterResult
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_SdkDurationConverter_Unit = NunavSDKMultiplatform.__SdkDurationConverterUnit
  public typealias swift__SdkDurationConverterUnit = NunavSDKMultiplatform.SdkDurationConverterUnit
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_TimestampConverter_Result = NunavSDKMultiplatform.TimestampConverterResult
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_TimestampUtils = NunavSDKMultiplatform.TimestampUtils
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_ViewModel = NunavSDKMultiplatform.ViewModel
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_navigation_NavigationUIState = NunavSDKMultiplatform.NavigationUIState
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_navigation_NavigationUIState_NavigationError = NunavSDKMultiplatform.NavigationUIState.NavigationError
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_navigation_NavigationUIState_NavigationError_Type = NunavSDKMultiplatform.NavigationUIState.__NavigationErrorType
  public typealias swift____NavigationUIState__NavigationErrorType = NunavSDKMultiplatform.__NavigationUIState__NavigationErrorType
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_navigation_NavigationViewModel = NunavSDKMultiplatform.NavigationViewModel
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_routeProgress_ui_formatting_FormattedRouteProgressUIState = NunavSDKMultiplatform.FormattedRouteProgressUIState
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_routeProgress_ui_formatting_RouteProgressUIStateFormatter = NunavSDKMultiplatform.RouteProgressUIStateFormatter
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_routeProgress_ui_viewmodel_RouteProgressViewModel = NunavSDKMultiplatform.RouteProgressViewModel
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_routeProgress_ui_state_RouteProgressUIState = NunavSDKMultiplatform.RouteProgressUIState
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_routeProgress_ui_state_RouteProgressUIState_FollowingRoute = NunavSDKMultiplatform.RouteProgressUIStateFollowingRoute
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_routeProgress_ui_state_RouteProgressUIState_Loading = NunavSDKMultiplatform.RouteProgressUIStateLoading
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_routeProgress_ui_state_RouteProgressUIStateConverter = NunavSDKMultiplatform.RouteProgressUIStateConverter
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_viewmodel_ManeuverViewModel = NunavSDKMultiplatform.ManeuverViewModel
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_state_ManeuverUIState = NunavSDKMultiplatform.ManeuverUIState
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_state_ManeuverUIState_FollowingRoute = NunavSDKMultiplatform.ManeuverUIStateFollowingRoute
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_state_ManeuverUIState_Loading = NunavSDKMultiplatform.ManeuverUIStateLoading
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_state_ManeuverUIState_PrimaryManeuverInfo = NunavSDKMultiplatform.ManeuverUIStatePrimaryManeuverInfo
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_state_ManeuverUIState_SecondaryManeuverInfo = NunavSDKMultiplatform.ManeuverUIStateSecondaryManeuverInfo
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_state_ManeuverUIState_SecondaryManeuverInfo_FollowingManeuver = NunavSDKMultiplatform.ManeuverUIStateSecondaryManeuverInfoFollowingManeuver
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_state_ManeuverUIState_SecondaryManeuverInfo_LaneInfo = NunavSDKMultiplatform.ManeuverUIStateSecondaryManeuverInfoLaneInfo
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_state_ManeuverUIStateConverter = NunavSDKMultiplatform.ManeuverUIStateConverter
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_formatting_FormattedManeuverUIState = NunavSDKMultiplatform.FormattedManeuverUIState
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_formatting_ManeuverUIStateFormatter = NunavSDKMultiplatform.ManeuverUIStateFormatter
  public typealias class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_core_units_HourCycle = NunavSDKMultiplatform.__HourCycle
  public typealias swift__HourCycle = NunavSDKMultiplatform.HourCycle
  public typealias class__stdlib__kotlin_properties_Delegates = NunavSDKMultiplatform.KotlinDelegates
  public typealias class__stdlib__kotlin_Array = NunavSDKMultiplatform.KotlinArray
  public typealias class__stdlib__kotlin_ranges_IntRange = NunavSDKMultiplatform.KotlinIntRange
  public typealias class__stdlib__kotlin_ranges_IntProgression = NunavSDKMultiplatform.KotlinIntProgression
  public typealias class__stdlib__kotlin_collections_Iterable = NunavSDKMultiplatform.KotlinIterable
  public typealias class__stdlib__kotlin_ranges_ClosedRange = NunavSDKMultiplatform.KotlinClosedRange
  public typealias class__stdlib__kotlin_ranges_OpenEndRange = NunavSDKMultiplatform.KotlinOpenEndRange
  public typealias class__stdlib__kotlin_FloatArray = NunavSDKMultiplatform.KotlinFloatArray
  public typealias class__stdlib__kotlin_Enum_Companion = NunavSDKMultiplatform.KotlinEnumCompanion
  public typealias class__stdlib__kotlin_ranges_LongRange = NunavSDKMultiplatform.KotlinLongRange
  public typealias class__stdlib__kotlin_ranges_LongProgression = NunavSDKMultiplatform.KotlinLongProgression
  public typealias class__stdlib__kotlin_coroutines_cancellation_CancellationException = NunavSDKMultiplatform.KotlinCancellationException
  public typealias class__stdlib__kotlin_IllegalStateException = NunavSDKMultiplatform.KotlinIllegalStateException
  public typealias class__stdlib__kotlin_RuntimeException = NunavSDKMultiplatform.KotlinRuntimeException
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_HttpClient = NunavSDKMultiplatform.Ktor_client_coreHttpClient
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_CoroutineScope = NunavSDKMultiplatform.Kotlinx_coroutines_coreCoroutineScope
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_Closeable = NunavSDKMultiplatform.Ktor_ioCloseable
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_engine_HttpClientEngine = NunavSDKMultiplatform.Ktor_client_coreHttpClientEngine
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_KSerializer = NunavSDKMultiplatform.Kotlinx_serialization_coreKSerializer
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_SerializationStrategy = NunavSDKMultiplatform.Kotlinx_serialization_coreSerializationStrategy
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_DeserializationStrategy = NunavSDKMultiplatform.Kotlinx_serialization_coreDeserializationStrategy
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_CoroutineDispatcher = NunavSDKMultiplatform.Kotlinx_coroutines_coreCoroutineDispatcher
  public typealias class__stdlib__kotlin_coroutines_AbstractCoroutineContextElement = NunavSDKMultiplatform.KotlinAbstractCoroutineContextElement
  public typealias class__stdlib__kotlin_coroutines_CoroutineContext_Element = NunavSDKMultiplatform.KotlinCoroutineContextElement
  public typealias class__stdlib__kotlin_coroutines_CoroutineContext = NunavSDKMultiplatform.KotlinCoroutineContext
  public typealias class__stdlib__kotlin_coroutines_ContinuationInterceptor = NunavSDKMultiplatform.KotlinContinuationInterceptor
  public typealias class__stdlib__kotlin_DoubleArray = NunavSDKMultiplatform.KotlinDoubleArray
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_Runnable = NunavSDKMultiplatform.Kotlinx_coroutines_coreRunnable
  public typealias class__stdlib__kotlin_Unit = NunavSDKMultiplatform.KotlinUnit
  public typealias class__stdlib__kotlinx_cinterop_CValue = NunavSDKMultiplatform.KotlinCValue
  public typealias class__stdlib__kotlinx_cinterop_CValues = NunavSDKMultiplatform.KotlinCValues
  public typealias class__stdlib__kotlinx_cinterop_CValuesRef = NunavSDKMultiplatform.KotlinCValuesRef
  public typealias class__stdlib__kotlin_properties_ReadWriteProperty = NunavSDKMultiplatform.KotlinReadWriteProperty
  public typealias class__stdlib__kotlin_properties_ReadOnlyProperty = NunavSDKMultiplatform.KotlinReadOnlyProperty
  public typealias class__stdlib__kotlin_reflect_KProperty = NunavSDKMultiplatform.KotlinKProperty
  public typealias class__stdlib__kotlin_reflect_KCallable = NunavSDKMultiplatform.KotlinKCallable
  public typealias class__stdlib__kotlin_reflect_KAnnotatedElement = NunavSDKMultiplatform.KotlinKAnnotatedElement
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpRequestData = NunavSDKMultiplatform.Ktor_client_coreHttpRequestData
  public typealias class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_WriteChannelContent = NunavSDKMultiplatform.Ktor_httpOutgoingContent.WriteChannelContent
  public typealias class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent = NunavSDKMultiplatform.Ktor_httpOutgoingContent
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_ByteWriteChannel = NunavSDKMultiplatform.Ktor_ioByteWriteChannel
  public typealias class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_ProtocolUpgrade = NunavSDKMultiplatform.Ktor_httpOutgoingContent.ProtocolUpgrade
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_ByteReadChannel = NunavSDKMultiplatform.Ktor_ioByteReadChannel
  public typealias class__io_ktor_ktor_utils__io_ktor_util_pipeline_Pipeline = NunavSDKMultiplatform.Ktor_utilsPipeline
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_bits_Memory = NunavSDKMultiplatform.Ktor_ioMemory
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_internal_ChunkBuffer = NunavSDKMultiplatform.Ktor_ioChunkBuffer
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_Buffer = NunavSDKMultiplatform.Ktor_ioBuffer
  public typealias class__stdlib__kotlin_ByteArray = NunavSDKMultiplatform.KotlinByteArray
  public typealias class__stdlib__kotlin_coroutines_SuspendFunction1 = NunavSDKMultiplatform.KotlinSuspendFunction1
  public typealias class__stdlib__kotlin_Function = NunavSDKMultiplatform.KotlinFunction
  public typealias class__stdlib__kotlin_text_Appendable = NunavSDKMultiplatform.KotlinAppendable
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_ByteReadPacket = NunavSDKMultiplatform.Ktor_ioByteReadPacket
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_Input = NunavSDKMultiplatform.Ktor_ioInput
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_Job = NunavSDKMultiplatform.Kotlinx_coroutines_coreJob
  public typealias class__stdlib__kotlin_coroutines_SuspendFunction2 = NunavSDKMultiplatform.KotlinSuspendFunction2
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_call_HttpClientCall = NunavSDKMultiplatform.Ktor_client_coreHttpClientCall
  public typealias class__io_ktor_ktor_utils__io_ktor_util_reflect_TypeInfo = NunavSDKMultiplatform.Ktor_utilsTypeInfo
  public typealias class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_NoContent = NunavSDKMultiplatform.Ktor_httpOutgoingContent.NoContent
  public typealias class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_ReadChannelContent = NunavSDKMultiplatform.Ktor_httpOutgoingContent.ReadChannelContent
  public typealias class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_ByteArrayContent = NunavSDKMultiplatform.Ktor_httpOutgoingContent.ByteArrayContent
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PolymorphicKind = NunavSDKMultiplatform.Kotlinx_serialization_corePolymorphicKind
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_SerialKind = NunavSDKMultiplatform.Kotlinx_serialization_coreSerialKind
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind = NunavSDKMultiplatform.Kotlinx_serialization_corePrimitiveKind
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_SerialKind_CONTEXTUAL = NunavSDKMultiplatform.Kotlinx_serialization_coreSerialKind.CONTEXTUAL
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_SerialKind_ENUM = NunavSDKMultiplatform.Kotlinx_serialization_coreSerialKind.ENUM
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind = NunavSDKMultiplatform.Kotlinx_serialization_coreStructureKind
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PolymorphicKind_OPEN = NunavSDKMultiplatform.Kotlinx_serialization_corePolymorphicKind.OPEN
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PolymorphicKind_SEALED = NunavSDKMultiplatform.Kotlinx_serialization_corePolymorphicKind.SEALED
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_BOOLEAN = NunavSDKMultiplatform.Kotlinx_serialization_corePrimitiveKind.BOOLEAN
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_BYTE = NunavSDKMultiplatform.Kotlinx_serialization_corePrimitiveKind.BYTE
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_CHAR = NunavSDKMultiplatform.Kotlinx_serialization_corePrimitiveKind.CHAR
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_DOUBLE = NunavSDKMultiplatform.Kotlinx_serialization_corePrimitiveKind.DOUBLE
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_FLOAT = NunavSDKMultiplatform.Kotlinx_serialization_corePrimitiveKind.FLOAT
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_INT = NunavSDKMultiplatform.Kotlinx_serialization_corePrimitiveKind.INT
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_LONG = NunavSDKMultiplatform.Kotlinx_serialization_corePrimitiveKind.LONG
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_SHORT = NunavSDKMultiplatform.Kotlinx_serialization_corePrimitiveKind.SHORT
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_STRING = NunavSDKMultiplatform.Kotlinx_serialization_corePrimitiveKind.STRING
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_CLASS = NunavSDKMultiplatform.Kotlinx_serialization_coreStructureKind.CLASS
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_LIST = NunavSDKMultiplatform.Kotlinx_serialization_coreStructureKind.LIST
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_MAP = NunavSDKMultiplatform.Kotlinx_serialization_coreStructureKind.MAP
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_OBJECT = NunavSDKMultiplatform.Kotlinx_serialization_coreStructureKind.OBJECT
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_selects_SelectClause1 = NunavSDKMultiplatform.Kotlinx_coroutines_coreSelectClause1
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_selects_SelectClause = NunavSDKMultiplatform.Kotlinx_coroutines_coreSelectClause
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_selects_SelectClause2 = NunavSDKMultiplatform.Kotlinx_coroutines_coreSelectClause2
  public typealias class__stdlib__kotlin_ranges_IntProgression_Companion = NunavSDKMultiplatform.KotlinIntProgression.Companion
  public typealias class__stdlib__kotlin_collections_IntIterator = NunavSDKMultiplatform.KotlinIntIterator
  public typealias class__stdlib__kotlin_ranges_IntRange_Companion = NunavSDKMultiplatform.KotlinIntRange.Companion
  public typealias class__stdlib__kotlin_collections_FloatIterator = NunavSDKMultiplatform.KotlinFloatIterator
  public typealias class__stdlib__kotlin_ranges_LongProgression_Companion = NunavSDKMultiplatform.KotlinLongProgression.Companion
  public typealias class__stdlib__kotlin_collections_LongIterator = NunavSDKMultiplatform.KotlinLongIterator
  public typealias class__stdlib__kotlin_ranges_LongRange_Companion = NunavSDKMultiplatform.KotlinLongRange.Companion
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_engine_HttpClientEngineConfig = NunavSDKMultiplatform.Ktor_client_coreHttpClientEngineConfig
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_HttpClientConfig = NunavSDKMultiplatform.Ktor_client_coreHttpClientConfig
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_engine_HttpClientEngineCapability = NunavSDKMultiplatform.Ktor_client_coreHttpClientEngineCapability
  public typealias class__io_ktor_ktor_utils__io_ktor_util_Attributes = NunavSDKMultiplatform.Ktor_utilsAttributes
  public typealias class__io_ktor_ktor_events__io_ktor_events_Events = NunavSDKMultiplatform.Ktor_eventsEvents
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_statement_HttpReceivePipeline = NunavSDKMultiplatform.Ktor_client_coreHttpReceivePipeline
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpRequestPipeline = NunavSDKMultiplatform.Ktor_client_coreHttpRequestPipeline
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_statement_HttpResponsePipeline = NunavSDKMultiplatform.Ktor_client_coreHttpResponsePipeline
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpSendPipeline = NunavSDKMultiplatform.Ktor_client_coreHttpSendPipeline
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpResponseData = NunavSDKMultiplatform.Ktor_client_coreHttpResponseData
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_encoding_Encoder = NunavSDKMultiplatform.Kotlinx_serialization_coreEncoder
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_SerialDescriptor = NunavSDKMultiplatform.Kotlinx_serialization_coreSerialDescriptor
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_encoding_Decoder = NunavSDKMultiplatform.Kotlinx_serialization_coreDecoder
  public typealias class__stdlib__kotlin_coroutines_CoroutineContext_Key = NunavSDKMultiplatform.KotlinCoroutineContextKey
  public typealias class__stdlib__kotlin_coroutines_Continuation = NunavSDKMultiplatform.KotlinContinuation
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_CoroutineDispatcher_Key = NunavSDKMultiplatform.Kotlinx_coroutines_coreCoroutineDispatcher.Key
  public typealias class__stdlib__kotlin_coroutines_AbstractCoroutineContextKey = NunavSDKMultiplatform.KotlinAbstractCoroutineContextKey
  public typealias class__stdlib__kotlin_collections_DoubleIterator = NunavSDKMultiplatform.KotlinDoubleIterator
  public typealias class__stdlib__kotlinx_cinterop_AutofreeScope = NunavSDKMultiplatform.KotlinAutofreeScope
  public typealias class__stdlib__kotlinx_cinterop_DeferScope = NunavSDKMultiplatform.KotlinDeferScope
  public typealias class__stdlib__kotlinx_cinterop_NativePlacement = NunavSDKMultiplatform.KotlinNativePlacement
  public typealias class__stdlib__kotlin_reflect_KType = NunavSDKMultiplatform.KotlinKType
  public typealias class__io_ktor_ktor_http__io_ktor_http_Url = NunavSDKMultiplatform.Ktor_httpUrl
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpMethod = NunavSDKMultiplatform.Ktor_httpHttpMethod
  public typealias class__io_ktor_ktor_http__io_ktor_http_Headers = NunavSDKMultiplatform.Ktor_httpHeaders
  public typealias class__io_ktor_ktor_utils__io_ktor_util_StringValues = NunavSDKMultiplatform.Ktor_utilsStringValues
  public typealias class__io_ktor_ktor_utils__io_ktor_util_AttributeKey = NunavSDKMultiplatform.Ktor_utilsAttributeKey
  public typealias class__io_ktor_ktor_http__io_ktor_http_ContentType = NunavSDKMultiplatform.Ktor_httpContentType
  public typealias class__io_ktor_ktor_http__io_ktor_http_HeaderValueWithParameters = NunavSDKMultiplatform.Ktor_httpHeaderValueWithParameters
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpStatusCode = NunavSDKMultiplatform.Ktor_httpHttpStatusCode
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_ReadSession = NunavSDKMultiplatform.Ktor_ioReadSession
  public typealias class__io_ktor_ktor_utils__io_ktor_util_pipeline_PipelinePhase = NunavSDKMultiplatform.Ktor_utilsPipelinePhase
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_bits_Memory_Companion = NunavSDKMultiplatform.Ktor_ioMemory.Companion
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_Buffer_Companion = NunavSDKMultiplatform.Ktor_ioBuffer.Companion
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_pool_ObjectPool = NunavSDKMultiplatform.Ktor_ioObjectPool
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_internal_ChunkBuffer_Companion = NunavSDKMultiplatform.Ktor_ioChunkBuffer.Companion
  public typealias class__stdlib__kotlin_collections_ByteIterator = NunavSDKMultiplatform.KotlinByteIterator
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_Input_Companion = NunavSDKMultiplatform.Ktor_ioInput.Companion
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_ByteReadPacket_Companion = NunavSDKMultiplatform.Ktor_ioByteReadPacket.Companion
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_ChildHandle = NunavSDKMultiplatform.Kotlinx_coroutines_coreChildHandle
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_DisposableHandle = NunavSDKMultiplatform.Kotlinx_coroutines_coreDisposableHandle
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_ChildJob = NunavSDKMultiplatform.Kotlinx_coroutines_coreChildJob
  public typealias class__stdlib__kotlin_sequences_Sequence = NunavSDKMultiplatform.KotlinSequence
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_selects_SelectClause0 = NunavSDKMultiplatform.Kotlinx_coroutines_coreSelectClause0
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_call_HttpClientCall_Companion = NunavSDKMultiplatform.Ktor_client_coreHttpClientCall.Companion
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpRequest = NunavSDKMultiplatform.Ktor_client_coreHttpRequest
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpMessage = NunavSDKMultiplatform.Ktor_httpHttpMessage
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_statement_HttpResponse = NunavSDKMultiplatform.Ktor_client_coreHttpResponse
  public typealias class__stdlib__kotlin_reflect_KClass = NunavSDKMultiplatform.KotlinKClass
  public typealias class__stdlib__kotlin_reflect_KDeclarationContainer = NunavSDKMultiplatform.KotlinKDeclarationContainer
  public typealias class__stdlib__kotlin_reflect_KClassifier = NunavSDKMultiplatform.KotlinKClassifier
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_selects_SelectInstance = NunavSDKMultiplatform.Kotlinx_coroutines_coreSelectInstance
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_engine_ProxyConfig = NunavSDKMultiplatform.Ktor_client_coreProxyConfig
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_plugins_HttpClientPlugin = NunavSDKMultiplatform.Ktor_client_coreHttpClientPlugin
  public typealias class__io_ktor_ktor_events__io_ktor_events_EventDefinition = NunavSDKMultiplatform.Ktor_eventsEventDefinition
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_statement_HttpReceivePipeline_Phases = NunavSDKMultiplatform.Ktor_client_coreHttpReceivePipeline.Phases
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpRequestPipeline_Phases = NunavSDKMultiplatform.Ktor_client_coreHttpRequestPipeline.Phases
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpRequestBuilder = NunavSDKMultiplatform.Ktor_client_coreHttpRequestBuilder
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpMessageBuilder = NunavSDKMultiplatform.Ktor_httpHttpMessageBuilder
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_statement_HttpResponsePipeline_Phases = NunavSDKMultiplatform.Ktor_client_coreHttpResponsePipeline.Phases
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_statement_HttpResponseContainer = NunavSDKMultiplatform.Ktor_client_coreHttpResponseContainer
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpSendPipeline_Phases = NunavSDKMultiplatform.Ktor_client_coreHttpSendPipeline.Phases
  public typealias class__io_ktor_ktor_utils__io_ktor_util_date_GMTDate = NunavSDKMultiplatform.Ktor_utilsGMTDate
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpProtocolVersion = NunavSDKMultiplatform.Ktor_httpHttpProtocolVersion
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_encoding_CompositeEncoder = NunavSDKMultiplatform.Kotlinx_serialization_coreCompositeEncoder
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_modules_SerializersModule = NunavSDKMultiplatform.Kotlinx_serialization_coreSerializersModule
  public typealias class__stdlib__kotlin_Annotation = NunavSDKMultiplatform.KotlinAnnotation
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_encoding_CompositeDecoder = NunavSDKMultiplatform.Kotlinx_serialization_coreCompositeDecoder
  public typealias class__stdlib__kotlin_Nothing = NunavSDKMultiplatform.KotlinNothing
  public typealias class__stdlib__kotlin_reflect_KTypeProjection = NunavSDKMultiplatform.KotlinKTypeProjection
  public typealias class__io_ktor_ktor_http__io_ktor_http_Url_Companion = NunavSDKMultiplatform.Ktor_httpUrl.Companion
  public typealias class__io_ktor_ktor_http__io_ktor_http_Parameters = NunavSDKMultiplatform.Ktor_httpParameters
  public typealias class__io_ktor_ktor_http__io_ktor_http_URLProtocol = NunavSDKMultiplatform.Ktor_httpURLProtocol
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpMethod_Companion = NunavSDKMultiplatform.Ktor_httpHttpMethod.Companion
  public typealias class__stdlib__kotlin_collections_Map_Entry = NunavSDKMultiplatform.KotlinMapEntry
  public typealias class__io_ktor_ktor_http__io_ktor_http_HeaderValueParam = NunavSDKMultiplatform.Ktor_httpHeaderValueParam
  public typealias class__io_ktor_ktor_http__io_ktor_http_HeaderValueWithParameters_Companion = NunavSDKMultiplatform.Ktor_httpHeaderValueWithParameters.Companion
  public typealias class__io_ktor_ktor_http__io_ktor_http_ContentType_Companion = NunavSDKMultiplatform.Ktor_httpContentType.Companion
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpStatusCode_Companion = NunavSDKMultiplatform.Ktor_httpHttpStatusCode.Companion
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_ParentJob = NunavSDKMultiplatform.Kotlinx_coroutines_coreParentJob
  public typealias class__io_ktor_ktor_http__io_ktor_http_HeadersBuilder = NunavSDKMultiplatform.Ktor_httpHeadersBuilder
  public typealias class__io_ktor_ktor_utils__io_ktor_util_StringValuesBuilderImpl = NunavSDKMultiplatform.Ktor_utilsStringValuesBuilderImpl
  public typealias class__io_ktor_ktor_utils__io_ktor_util_StringValuesBuilder = NunavSDKMultiplatform.Ktor_utilsStringValuesBuilder
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpRequestBuilder_Companion = NunavSDKMultiplatform.Ktor_client_coreHttpRequestBuilder.Companion
  public typealias class__io_ktor_ktor_http__io_ktor_http_URLBuilder = NunavSDKMultiplatform.Ktor_httpURLBuilder
  public typealias class__io_ktor_ktor_utils__io_ktor_util_date_GMTDate_Companion = NunavSDKMultiplatform.Ktor_utilsGMTDate.Companion
  public typealias class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay = NunavSDKMultiplatform.__Ktor_utilsWeekDay
  public typealias swift__Ktor_utilsWeekDay = NunavSDKMultiplatform.Ktor_utilsWeekDay
  public typealias class__io_ktor_ktor_utils__io_ktor_util_date_Month = NunavSDKMultiplatform.__Ktor_utilsMonth
  public typealias swift__Ktor_utilsMonth = NunavSDKMultiplatform.Ktor_utilsMonth
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpProtocolVersion_Companion = NunavSDKMultiplatform.Ktor_httpHttpProtocolVersion.Companion
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_modules_SerializersModuleCollector = NunavSDKMultiplatform.Kotlinx_serialization_coreSerializersModuleCollector
  public typealias class__stdlib__kotlin_reflect_KVariance = NunavSDKMultiplatform.__KotlinKVariance
  public typealias swift__KotlinKVariance = NunavSDKMultiplatform.KotlinKVariance
  public typealias class__stdlib__kotlin_reflect_KTypeProjection_Companion = NunavSDKMultiplatform.KotlinKTypeProjection.Companion
  public typealias class__io_ktor_ktor_http__io_ktor_http_URLProtocol_Companion = NunavSDKMultiplatform.Ktor_httpURLProtocol.Companion
  public typealias class__io_ktor_ktor_http__io_ktor_http_URLBuilder_Companion = NunavSDKMultiplatform.Ktor_httpURLBuilder.Companion
  public typealias class__io_ktor_ktor_http__io_ktor_http_ParametersBuilder = NunavSDKMultiplatform.Ktor_httpParametersBuilder
  public typealias class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay_Companion = NunavSDKMultiplatform.__Ktor_utilsWeekDay.Companion
  public typealias class__io_ktor_ktor_utils__io_ktor_util_date_Month_Companion = NunavSDKMultiplatform.__Ktor_utilsMonth.Companion
  public typealias file__NunavSDKMultiplatform____SkieSuspendWrappersKt = NunavSDKMultiplatform.__SkieSuspendWrappersKt
  public typealias file__NunavSDKMultiplatform__SkieTypeExportsKt = NunavSDKMultiplatform.SkieTypeExportsKt
  public typealias file__net_graphmasters_multiplatform_multiplatform_navigation__NavigationSdkNativeKt = NunavSDKMultiplatform.NavigationSdkNativeKt
  public typealias file__net_graphmasters_multiplatform_multiplatform_navigation__VehicleConfigKt = NunavSDKMultiplatform.VehicleConfigKt
  public typealias file__net_graphmasters_multiplatform_multiplatform_core__LocationKt = NunavSDKMultiplatform.LocationKt
  public typealias file__net_graphmasters_multiplatform_multiplatform_core__DurationKt = NunavSDKMultiplatform.DurationKt
  public typealias file__net_graphmasters_multiplatform_multiplatform_core__LengthKt = NunavSDKMultiplatform.LengthKt
  public typealias file__net_graphmasters_multiplatform_multiplatform_core__SpeedKt = NunavSDKMultiplatform.SpeedKt
  public typealias file__net_graphmasters_multiplatform_multiplatform_core__NormalizedKt = NunavSDKMultiplatform.NormalizedKt
  public typealias file__net_graphmasters_multiplatform_multiplatform_core__DateKt = NunavSDKMultiplatform.DateKt
  public typealias file__net_graphmasters_multiplatform_multiplatform_core__TimeProviderKt = NunavSDKMultiplatform.TimeProviderKt
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readShort() async throws -> NunavSDKMultiplatform.KotlinShort
  #endif
}
extension NunavSDKMultiplatform.__Route__FuelStationType {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_FuelStation_Type
}
extension NunavSDKMultiplatform.Route.__FuelStationType {
  public func toSwiftEnum() -> NunavSDKMultiplatform.__Route__FuelStationType
}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectInstance {
  @frozen public enum Enum {
    case `else`
    public static func == (a: NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectInstance.Enum, b: NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectInstance.Enum) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectInstance.Enum where SEALED : NunavSDKMultiplatform.Kotlinx_coroutines_coreSelectInstance
extension NunavSDKMultiplatform.KotlinSuspendFunction2 {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func invoke(p1: Any?, p2: Any?) async throws -> Any?
  #endif
}
@frozen public enum __ManeuverIconProvider__ManeuverIcon : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknown
  case arriveStraight
  case continueLeft
  case continueSharpLeft
  case continueSharpRight
  case continueSlightLeft
  case continueSlightRight
  case continueStraight
  case continueRight
  case departStraight
  case endOfRoadLeft
  case endOfRoadRight
  case forkSlightLeft
  case forkSlightRight
  case rampLevelDown
  case rampLevelUp
  case roundaboutLeft
  case roundaboutRight
  case roundaboutSharpLeft
  case roundaboutSharpRight
  case roundaboutSlightLeft
  case roundaboutSlightRight
  case roundaboutStraight
  case roundaboutRht
  case uturnRht
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_maneuver_ManeuverIconProvider_ManeuverIcon, result: inout NunavSDKMultiplatform.__ManeuverIconProvider__ManeuverIcon?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_maneuver_ManeuverIconProvider_ManeuverIcon, result: inout NunavSDKMultiplatform.__ManeuverIconProvider__ManeuverIcon?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_maneuver_ManeuverIconProvider_ManeuverIcon?) -> NunavSDKMultiplatform.__ManeuverIconProvider__ManeuverIcon
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_maneuver_ManeuverIconProvider_ManeuverIcon
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_maneuver_ManeuverIconProvider_ManeuverIcon
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.__ManeuverIconProvider__ManeuverIcon]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.__ManeuverIconProvider__ManeuverIcon] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.ManeuverIconProvider {
  public typealias ManeuverIcon = NunavSDKMultiplatform.__ManeuverIconProvider__ManeuverIcon
}
extension NunavSDKMultiplatform.SdkDurationConverterUnit {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_SdkDurationConverter_Unit
}
extension NunavSDKMultiplatform.__SdkDurationConverterUnit {
  public func toSwiftEnum() -> NunavSDKMultiplatform.SdkDurationConverterUnit
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = NunavSDKMultiplatform.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  final public var value: T? {
    get
  }
  final public func makeAsyncIterator() -> NunavSDKMultiplatform.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>._ObjectiveCType?) -> NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>
  @objc deinit
}
#endif
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readFloat() async throws -> NunavSDKMultiplatform.KotlinFloat
  #endif
}
extension NunavSDKMultiplatform.Ktor_httpOutgoingContent.ProtocolUpgrade {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upgrade(input: any NunavSDKMultiplatform.Ktor_ioByteReadChannel, output: any NunavSDKMultiplatform.Ktor_ioByteWriteChannel, engineContext: any NunavSDKMultiplatform.KotlinCoroutineContext, userContext: any NunavSDKMultiplatform.KotlinCoroutineContext) async throws -> any NunavSDKMultiplatform.Kotlinx_coroutines_coreJob
  #endif
}
extension NunavSDKMultiplatform.__SwiftGen.Credentials {
  @frozen public enum Enum {
    case apiKey(NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_network_Credentials_ApiKey)
    case basic(NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_network_Credentials_Basic)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.Credentials.Enum where SEALED : NunavSDKMultiplatform.Credentials
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readLong() async throws -> NunavSDKMultiplatform.KotlinLong
  #endif
}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_corePolymorphicKind {
  @frozen public enum Enum {
    case oPEN(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PolymorphicKind_OPEN)
    case sEALED(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PolymorphicKind_SEALED)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_corePolymorphicKind.Enum where SEALED : NunavSDKMultiplatform.Kotlinx_serialization_corePolymorphicKind
extension NunavSDKMultiplatform.__SwiftGen.Skie_SuspendResult {
  @frozen public enum Enum {
    case canceled(NunavSDKMultiplatform.__Skie.class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendResult_Canceled)
    case error(NunavSDKMultiplatform.__Skie.class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendResult_Error)
    case success(NunavSDKMultiplatform.__Skie.class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendResult_Success)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.Skie_SuspendResult.Enum where SEALED : NunavSDKMultiplatform.Skie_SuspendResult
@frozen public enum LaneIcon : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case left
  case slightLeft
  case sharpLeft
  case right
  case slightRight
  case sharpRight
  case through
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIcon, result: inout NunavSDKMultiplatform.LaneIcon?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIcon, result: inout NunavSDKMultiplatform.LaneIcon?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIcon?) -> NunavSDKMultiplatform.LaneIcon
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIcon
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIcon
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.LaneIcon]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.LaneIcon] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.RouteProvider {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func requestRoute(routeRequest: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_RouteProvider_RouteRequest) async throws -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route
  #endif
}
extension NunavSDKMultiplatform.TurnCommand {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnCommand
}
extension NunavSDKMultiplatform.__TurnCommand {
  public func toSwiftEnum() -> NunavSDKMultiplatform.TurnCommand
}
extension NunavSDKMultiplatform.__LaneIconProvider__LaneIcon {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIconProvider_LaneIcon
}
extension NunavSDKMultiplatform.LaneIconProvider.__LaneIcon {
  public func toSwiftEnum() -> NunavSDKMultiplatform.__LaneIconProvider__LaneIcon
}
extension NunavSDKMultiplatform.__SkieSuspendWrappersKt {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public static func execute<TSubject, TContext>(_ dispatchReceiver: NunavSDKMultiplatform.Ktor_utilsPipeline<TSubject, TContext>, context: TContext, subject: TSubject) async throws -> TSubject where TSubject : AnyObject, TContext : AnyObject
  #endif
}
@frozen public enum __NavigationUIState__NavigationErrorType : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case noRouteFound
  case unauthorized
  case unknown
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_navigation_NavigationUIState_NavigationError_Type, result: inout NunavSDKMultiplatform.__NavigationUIState__NavigationErrorType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_navigation_NavigationUIState_NavigationError_Type, result: inout NunavSDKMultiplatform.__NavigationUIState__NavigationErrorType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_navigation_NavigationUIState_NavigationError_Type?) -> NunavSDKMultiplatform.__NavigationUIState__NavigationErrorType
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_navigation_NavigationUIState_NavigationError_Type
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_navigation_NavigationUIState_NavigationError_Type
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.__NavigationUIState__NavigationErrorType]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.__NavigationUIState__NavigationErrorType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.NavigationUIState {
  public typealias NavigationErrorType = NunavSDKMultiplatform.__NavigationUIState__NavigationErrorType
}
extension NunavSDKMultiplatform.__Route__ParkingAreaType {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_ParkingArea_Type
}
extension NunavSDKMultiplatform.Route.__ParkingAreaType {
  public func toSwiftEnum() -> NunavSDKMultiplatform.__Route__ParkingAreaType
}
extension NunavSDKMultiplatform.__DeviceStatisticsProvider__ThermalState {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_statistics_DeviceStatisticsProvider_ThermalState
}
extension NunavSDKMultiplatform.DeviceStatisticsProvider.__ThermalState {
  public func toSwiftEnum() -> NunavSDKMultiplatform.__DeviceStatisticsProvider__ThermalState
}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_coreSerialKind {
  @frozen public enum Enum {
    case polymorphicKind(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PolymorphicKind)
    case primitiveKind(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind)
    case cONTEXTUAL(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_SerialKind_CONTEXTUAL)
    case eNUM(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_SerialKind_ENUM)
    case structureKind(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_coreSerialKind.Enum where SEALED : NunavSDKMultiplatform.Kotlinx_serialization_coreSerialKind
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readRemaining(limit: Swift.Int64) async throws -> NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_core_ByteReadPacket
  #endif
}
@frozen public enum Ktor_utilsWeekDay : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case monday
  case tuesday
  case wednesday
  case thursday
  case friday
  case saturday
  case sunday
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.String {
    get
  }
  public static var companion: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay_Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay, result: inout NunavSDKMultiplatform.Ktor_utilsWeekDay?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay, result: inout NunavSDKMultiplatform.Ktor_utilsWeekDay?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay?) -> NunavSDKMultiplatform.Ktor_utilsWeekDay
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay
  public typealias Companion = NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay_Companion
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.Ktor_utilsWeekDay]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.Ktor_utilsWeekDay] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.RouteProvider {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func requestRouteData(origin: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_model_LatLng, destination: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_model_LatLng, vehicleConfig: any NunavSDKMultiplatform.VehicleConfig) async throws -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_RouteData
  #endif
}
extension NunavSDKMultiplatform.HourCycle {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_core_units_HourCycle
}
extension NunavSDKMultiplatform.__HourCycle {
  public func toSwiftEnum() -> NunavSDKMultiplatform.HourCycle
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeByte(b: Swift.Int8) async throws
  #endif
}
extension NunavSDKMultiplatform.__ManeuverIconProvider__ManeuverIcon {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_maneuver_ManeuverIconProvider_ManeuverIcon
}
extension NunavSDKMultiplatform.ManeuverIconProvider.__ManeuverIcon {
  public func toSwiftEnum() -> NunavSDKMultiplatform.__ManeuverIconProvider__ManeuverIcon
}
extension NunavSDKMultiplatform.RouteProviderType {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_RouteProvider_Type
}
extension NunavSDKMultiplatform.__RouteProviderType {
  public func toSwiftEnum() -> NunavSDKMultiplatform.RouteProviderType
}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_corePrimitiveKind {
  @frozen public enum Enum {
    case bOOLEAN(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_BOOLEAN)
    case bYTE(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_BYTE)
    case cHAR(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_CHAR)
    case dOUBLE(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_DOUBLE)
    case fLOAT(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_FLOAT)
    case iNT(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_INT)
    case lONG(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_LONG)
    case sHORT(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_SHORT)
    case sTRING(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_STRING)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_corePrimitiveKind.Enum where SEALED : NunavSDKMultiplatform.Kotlinx_serialization_corePrimitiveKind
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readUTF8Line(limit: Swift.Int32) async throws -> Swift.String?
  #endif
}
@frozen public enum HourCycle : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case zeroToEleven
  case zeroToTwentyThree
  case oneToTwelve
  case oneToTwentyFour
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_core_units_HourCycle, result: inout NunavSDKMultiplatform.HourCycle?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_core_units_HourCycle, result: inout NunavSDKMultiplatform.HourCycle?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_core_units_HourCycle?) -> NunavSDKMultiplatform.HourCycle
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_core_units_HourCycle
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_core_units_HourCycle
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.HourCycle]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.HourCycle] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.LaneIcon {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIcon
}
extension NunavSDKMultiplatform.__LaneIcon {
  public func toSwiftEnum() -> NunavSDKMultiplatform.LaneIcon
}
extension NunavSDKMultiplatform.KotlinKVariance {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__stdlib__kotlin_reflect_KVariance
}
extension NunavSDKMultiplatform.__KotlinKVariance {
  public func toSwiftEnum() -> NunavSDKMultiplatform.KotlinKVariance
}
@frozen public enum SdkDurationConverterUnit : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case hour
  case minute
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_SdkDurationConverter_Unit, result: inout NunavSDKMultiplatform.SdkDurationConverterUnit?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_SdkDurationConverter_Unit, result: inout NunavSDKMultiplatform.SdkDurationConverterUnit?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_SdkDurationConverter_Unit?) -> NunavSDKMultiplatform.SdkDurationConverterUnit
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_SdkDurationConverter_Unit
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_formatter_SdkDurationConverter_Unit
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.SdkDurationConverterUnit]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.SdkDurationConverterUnit] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@frozen public enum OnRouteTrackerState : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case onRoute
  case offRoute
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_OnRouteTracker_State, result: inout NunavSDKMultiplatform.OnRouteTrackerState?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_OnRouteTracker_State, result: inout NunavSDKMultiplatform.OnRouteTrackerState?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_OnRouteTracker_State?) -> NunavSDKMultiplatform.OnRouteTrackerState
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_OnRouteTracker_State
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_OnRouteTracker_State
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.OnRouteTrackerState]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.OnRouteTrackerState] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = NunavSDKMultiplatform.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = NunavSDKMultiplatform.SkieKotlinStateFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  final public var value: T {
    get
  }
  final public func makeAsyncIterator() -> NunavSDKMultiplatform.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.SkieSwiftStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftStateFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftStateFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftStateFlow<T>._ObjectiveCType?) -> NunavSDKMultiplatform.SkieSwiftStateFlow<T>
  @objc deinit
}
#endif
@frozen public enum __Route__EnforcementType : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case maxSpeed
  case trafficSignals
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Enforcement_Type, result: inout NunavSDKMultiplatform.__Route__EnforcementType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Enforcement_Type, result: inout NunavSDKMultiplatform.__Route__EnforcementType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Enforcement_Type?) -> NunavSDKMultiplatform.__Route__EnforcementType
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Enforcement_Type
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Enforcement_Type
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.__Route__EnforcementType]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.__Route__EnforcementType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.Route {
  public typealias EnforcementType = NunavSDKMultiplatform.__Route__EnforcementType
}
extension NunavSDKMultiplatform.RoadClass {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_RoadClass
}
extension NunavSDKMultiplatform.__RoadClass {
  public func toSwiftEnum() -> NunavSDKMultiplatform.RoadClass
}
extension NunavSDKMultiplatform.__RelativeSpeedRouteFeatureCreator__Category {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_RelativeSpeedRouteFeatureCreator_Category
}
extension NunavSDKMultiplatform.RelativeSpeedRouteFeatureCreator.__Category {
  public func toSwiftEnum() -> NunavSDKMultiplatform.__RelativeSpeedRouteFeatureCreator__Category
}
extension NunavSDKMultiplatform.__NavigationUIState__NavigationErrorType {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_navigation_NavigationUIState_NavigationError_Type
}
extension NunavSDKMultiplatform.NavigationUIState.__NavigationErrorType {
  public func toSwiftEnum() -> NunavSDKMultiplatform.__NavigationUIState__NavigationErrorType
}
extension NunavSDKMultiplatform.__Route__EnforcementType {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Enforcement_Type
}
extension NunavSDKMultiplatform.Route.__EnforcementType {
  public func toSwiftEnum() -> NunavSDKMultiplatform.__Route__EnforcementType
}
extension NunavSDKMultiplatform.Kotlinx_coroutines_coreJob {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func join() async throws
  #endif
}
@frozen public enum __Route__FuelStationType : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case fuel
  case electric
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_FuelStation_Type, result: inout NunavSDKMultiplatform.__Route__FuelStationType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_FuelStation_Type, result: inout NunavSDKMultiplatform.__Route__FuelStationType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_FuelStation_Type?) -> NunavSDKMultiplatform.__Route__FuelStationType
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_FuelStation_Type
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_FuelStation_Type
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.__Route__FuelStationType]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.__Route__FuelStationType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.Route {
  public typealias FuelStationType = NunavSDKMultiplatform.__Route__FuelStationType
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readPacket(size: Swift.Int32) async throws -> NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_core_ByteReadPacket
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readByte() async throws -> NunavSDKMultiplatform.KotlinByte
  #endif
}
extension NunavSDKMultiplatform.__SwiftGen.ManeuverUIStateSecondaryManeuverInfo {
  @frozen public enum Enum {
    case followingManeuver(NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_state_ManeuverUIState_SecondaryManeuverInfo_FollowingManeuver)
    case laneInfo(NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_state_ManeuverUIState_SecondaryManeuverInfo_LaneInfo)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.ManeuverUIStateSecondaryManeuverInfo.Enum where SEALED : NunavSDKMultiplatform.ManeuverUIStateSecondaryManeuverInfo
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = NunavSDKMultiplatform.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = NunavSDKMultiplatform.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T?) async throws
  #endif
  final public func tryEmit(value: T?) -> Swift.Bool
  final public var subscriptionCount: NunavSDKMultiplatform.SkieSwiftStateFlow<NunavSDKMultiplatform.KotlinInt> {
    get
  }
  final public var value: T? {
    get
    set
  }
  final public func compareAndSet(expect: T?, update: T?) -> Swift.Bool
  final public func makeAsyncIterator() -> NunavSDKMultiplatform.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType?) -> NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>
  @objc deinit
}
#endif
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause2 {
  @frozen public enum Enum {
    case `else`
    public static func == (a: NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause2.Enum, b: NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause2.Enum) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause2.Enum where SEALED : NunavSDKMultiplatform.Kotlinx_coroutines_coreSelectClause2
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause0 {
  @frozen public enum Enum {
    case `else`
    public static func == (a: NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause0.Enum, b: NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause0.Enum) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause0.Enum where SEALED : NunavSDKMultiplatform.Kotlinx_coroutines_coreSelectClause0
extension NunavSDKMultiplatform.Kotlinx_coroutines_coreFlowCollector {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func emit(value: Any?) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readDouble() async throws -> NunavSDKMultiplatform.KotlinDouble
  #endif
}
extension NunavSDKMultiplatform.__TurnInfo__StreetSide {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnInfo_StreetSide
}
extension NunavSDKMultiplatform.TurnInfo.__StreetSide {
  public func toSwiftEnum() -> NunavSDKMultiplatform.__TurnInfo__StreetSide
}
public enum __SwiftGen {
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum Credentials {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum Skie_SuspendResult {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum RouteProgressUIState {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum ManeuverUIState {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum ManeuverUIStateSecondaryManeuverInfo {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum Ktor_httpOutgoingContent {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum Kotlinx_serialization_corePolymorphicKind {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum Kotlinx_serialization_coreSerialKind {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum Kotlinx_serialization_corePrimitiveKind {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum Kotlinx_serialization_coreStructureKind {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum Kotlinx_coroutines_coreSelectClause1 {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum Kotlinx_coroutines_coreSelectClause {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum Kotlinx_coroutines_coreSelectClause2 {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum Kotlinx_coroutines_coreSelectClause0 {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum Kotlinx_coroutines_coreSelectInstance {
  }
}
extension NunavSDKMultiplatform.__SwiftGen {
  public enum Kotlinx_serialization_coreSerializersModule {
  }
}
extension NunavSDKMultiplatform.Kotlinx_coroutines_coreFlow {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func collect(collector: any NunavSDKMultiplatform.Kotlinx_coroutines_coreFlowCollector) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readBoolean() async throws -> NunavSDKMultiplatform.KotlinBoolean
  #endif
}
extension NunavSDKMultiplatform.Ktor_utilsMonth {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month
}
extension NunavSDKMultiplatform.__Ktor_utilsMonth {
  public func toSwiftEnum() -> NunavSDKMultiplatform.Ktor_utilsMonth
}
@frozen public enum KotlinKVariance : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case invariant
  case `in`
  case out
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__stdlib__kotlin_reflect_KVariance, result: inout NunavSDKMultiplatform.KotlinKVariance?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__stdlib__kotlin_reflect_KVariance, result: inout NunavSDKMultiplatform.KotlinKVariance?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__stdlib__kotlin_reflect_KVariance?) -> NunavSDKMultiplatform.KotlinKVariance
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__stdlib__kotlin_reflect_KVariance
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__stdlib__kotlin_reflect_KVariance
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.KotlinKVariance]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.KotlinKVariance] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeDouble(d: Swift.Double) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_client_coreHttpClientCall {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getResponseContent() async throws -> any NunavSDKMultiplatform.Ktor_ioByteReadChannel
  #endif
}
extension NunavSDKMultiplatform.__SwiftGen.RouteProgressUIState {
  @frozen public enum Enum {
    case followingRoute(NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_routeProgress_ui_state_RouteProgressUIState_FollowingRoute)
    case loading(NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_routeProgress_ui_state_RouteProgressUIState_Loading)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.RouteProgressUIState.Enum where SEALED : NunavSDKMultiplatform.RouteProgressUIState
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func peekTo(destination: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_bits_Memory, destinationOffset: Swift.Int64, offset: Swift.Int64, min: Swift.Int64, max: Swift.Int64) async throws -> NunavSDKMultiplatform.KotlinLong
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = NunavSDKMultiplatform.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = NunavSDKMultiplatform.SkieKotlinMutableStateFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T) async throws
  #endif
  final public func tryEmit(value: T) -> Swift.Bool
  final public var subscriptionCount: NunavSDKMultiplatform.SkieSwiftStateFlow<NunavSDKMultiplatform.KotlinInt> {
    get
  }
  final public var value: T {
    get
    set
  }
  final public func compareAndSet(expect: T, update: T) -> Swift.Bool
  final public func makeAsyncIterator() -> NunavSDKMultiplatform.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>._ObjectiveCType?) -> NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>
  @objc deinit
}
#endif
@frozen public enum Ktor_utilsMonth : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case january
  case february
  case march
  case april
  case may
  case june
  case july
  case august
  case september
  case october
  case november
  case december
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.String {
    get
  }
  public static var companion: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month_Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month, result: inout NunavSDKMultiplatform.Ktor_utilsMonth?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month, result: inout NunavSDKMultiplatform.Ktor_utilsMonth?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month?) -> NunavSDKMultiplatform.Ktor_utilsMonth
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month
  public typealias Companion = NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month_Companion
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.Ktor_utilsMonth]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.Ktor_utilsMonth] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@frozen public enum RouteProviderType : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case light
  case full
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_RouteProvider_Type, result: inout NunavSDKMultiplatform.RouteProviderType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_RouteProvider_Type, result: inout NunavSDKMultiplatform.RouteProviderType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_RouteProvider_Type?) -> NunavSDKMultiplatform.RouteProviderType
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_RouteProvider_Type
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_routing_route_provider_RouteProvider_Type
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.RouteProviderType]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.RouteProviderType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@frozen public enum __RelativeSpeedRouteFeatureCreator__Category : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case default_
  case yellow
  case red
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_RelativeSpeedRouteFeatureCreator_Category, result: inout NunavSDKMultiplatform.__RelativeSpeedRouteFeatureCreator__Category?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_RelativeSpeedRouteFeatureCreator_Category, result: inout NunavSDKMultiplatform.__RelativeSpeedRouteFeatureCreator__Category?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_RelativeSpeedRouteFeatureCreator_Category?) -> NunavSDKMultiplatform.__RelativeSpeedRouteFeatureCreator__Category
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_RelativeSpeedRouteFeatureCreator_Category
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_map_route_feature_RelativeSpeedRouteFeatureCreator_Category
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.__RelativeSpeedRouteFeatureCreator__Category]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.__RelativeSpeedRouteFeatureCreator__Category] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.RelativeSpeedRouteFeatureCreator {
  public typealias Category = NunavSDKMultiplatform.__RelativeSpeedRouteFeatureCreator__Category
}
@frozen public enum __LaneIconProvider__LaneIcon : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case left
  case leftUseLeft
  case right
  case rightUseRight
  case slightLeft
  case slightLeftUseLeft
  case slightRight
  case slightRightUseRight
  case through
  case throughLeft
  case throughLeftUseLeft
  case throughLeftUseThrough
  case throughRight
  case throughRightUseRight
  case throughRightUseThrough
  case throughUseThrough
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIconProvider_LaneIcon, result: inout NunavSDKMultiplatform.__LaneIconProvider__LaneIcon?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIconProvider_LaneIcon, result: inout NunavSDKMultiplatform.__LaneIconProvider__LaneIcon?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIconProvider_LaneIcon?) -> NunavSDKMultiplatform.__LaneIconProvider__LaneIcon
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIconProvider_LaneIcon
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_navigation_ui_laneassist_LaneIconProvider_LaneIcon
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.__LaneIconProvider__LaneIcon]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.__LaneIconProvider__LaneIcon] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.LaneIconProvider {
  public typealias LaneIcon = NunavSDKMultiplatform.__LaneIconProvider__LaneIcon
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readAvailable(dst: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_core_internal_ChunkBuffer) async throws -> NunavSDKMultiplatform.KotlinInt
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readAvailable(dst: NunavSDKMultiplatform.__Skie.class__stdlib__kotlin_ByteArray, offset: Swift.Int32, length: Swift.Int32) async throws -> NunavSDKMultiplatform.KotlinInt
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readAvailable(dst: Swift.UnsafeMutableRawPointer, offset: Swift.Int32, length: Swift.Int32) async throws -> NunavSDKMultiplatform.KotlinInt
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readAvailable(dst: Swift.UnsafeMutableRawPointer, offset: Swift.Int64, length: Swift.Int64) async throws -> NunavSDKMultiplatform.KotlinInt
  #endif
}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause {
  @frozen public enum Enum {
    case selectClause0(any NunavSDKMultiplatform.Kotlinx_coroutines_coreSelectClause0)
    case selectClause1(any NunavSDKMultiplatform.Kotlinx_coroutines_coreSelectClause1)
    case selectClause2(any NunavSDKMultiplatform.Kotlinx_coroutines_coreSelectClause2)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause.Enum where SEALED : NunavSDKMultiplatform.Kotlinx_coroutines_coreSelectClause
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeSuspendSession(visitor: any NunavSDKMultiplatform.KotlinSuspendFunction1) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writePacket(packet: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_core_ByteReadPacket) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readInt() async throws -> NunavSDKMultiplatform.KotlinInt
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeFloat(f: Swift.Float) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_client_coreHttpClientCall {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func bodyNullable(info: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_utils__io_ktor_util_reflect_TypeInfo) async throws -> Any?
  #endif
}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause1 {
  @frozen public enum Enum {
    case `else`
    public static func == (a: NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause1.Enum, b: NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause1.Enum) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause1.Enum where SEALED : NunavSDKMultiplatform.Kotlinx_coroutines_coreSelectClause1
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftFlow<T>) -> NunavSDKMultiplatform.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftFlow<T>) -> NunavSDKMultiplatform.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftFlow where T : AnyObject {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftOptionalFlow where T : AnyObject {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftOptionalFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftSharedFlow where T : AnyObject {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow where T : AnyObject {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftStateFlow where T : AnyObject {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftOptionalStateFlow where T : AnyObject {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftOptionalStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>) -> NunavSDKMultiplatform.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: NunavSDKMultiplatform.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
}
#endif
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func awaitFreeSpace() async throws
  #endif
}
extension NunavSDKMultiplatform.__LaneInfo__LaneLaneTurn {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_LaneInfo_Lane_LaneTurn
}
extension NunavSDKMultiplatform.LaneInfo.__LaneLaneTurn {
  public func toSwiftEnum() -> NunavSDKMultiplatform.__LaneInfo__LaneLaneTurn
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeShort(s: Swift.Int16) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func awaitContent() async throws
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers public class SkieSwiftFlowIterator<T> : _Concurrency.AsyncIteratorProtocol {
  public typealias Element = T
  @objc deinit
  #if compiler(>=5.3) && $AsyncAwait
  public func next() async -> NunavSDKMultiplatform.SkieSwiftFlowIterator<T>.Element?
  #endif
}
#endif
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_coreStructureKind {
  @frozen public enum Enum {
    case cLASS(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_CLASS)
    case lIST(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_LIST)
    case mAP(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_MAP)
    case oBJECT(NunavSDKMultiplatform.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_OBJECT)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_coreStructureKind.Enum where SEALED : NunavSDKMultiplatform.Kotlinx_serialization_coreStructureKind
extension NunavSDKMultiplatform.__SkieSuspendWrappersKt {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public static func hasNext<E>(_ dispatchReceiver: NunavSDKMultiplatform.SkieColdFlowIterator<E>) async throws -> NunavSDKMultiplatform.KotlinBoolean where E : AnyObject
  #endif
}
@frozen public enum __Route__ParkingAreaType : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknown
  case surface
  case underground
  case multiStorey
  case rooftop
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_ParkingArea_Type, result: inout NunavSDKMultiplatform.__Route__ParkingAreaType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_ParkingArea_Type, result: inout NunavSDKMultiplatform.__Route__ParkingAreaType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_ParkingArea_Type?) -> NunavSDKMultiplatform.__Route__ParkingAreaType
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_ParkingArea_Type
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_ParkingArea_Type
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.__Route__ParkingAreaType]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.__Route__ParkingAreaType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.Route {
  public typealias ParkingAreaType = NunavSDKMultiplatform.__Route__ParkingAreaType
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func discard(max: Swift.Int64) async throws -> NunavSDKMultiplatform.KotlinLong
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = NunavSDKMultiplatform.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = NunavSDKMultiplatform.SkieKotlinFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> NunavSDKMultiplatform.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.SkieSwiftFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftFlow<T>._ObjectiveCType, result: inout NunavSDKMultiplatform.SkieSwiftFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.SkieSwiftFlow<T>._ObjectiveCType?) -> NunavSDKMultiplatform.SkieSwiftFlow<T>
  @objc deinit
}
#endif
@frozen public enum __TurnInfo__StreetSide : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case none
  case left
  case right
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnInfo_StreetSide, result: inout NunavSDKMultiplatform.__TurnInfo__StreetSide?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnInfo_StreetSide, result: inout NunavSDKMultiplatform.__TurnInfo__StreetSide?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnInfo_StreetSide?) -> NunavSDKMultiplatform.__TurnInfo__StreetSide
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnInfo_StreetSide
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_TurnInfo_StreetSide
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.__TurnInfo__StreetSide]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.__TurnInfo__StreetSide] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.TurnInfo {
  public typealias StreetSide = NunavSDKMultiplatform.__TurnInfo__StreetSide
}
@frozen public enum __LaneInfo__LaneLaneTurn : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case invalid
  case laneLeft
  case laneRight
  case laneSlightLeft
  case laneSlightRight
  case laneUturn
  case mergeToLeft
  case mergeToRight
  case through
  case unknown
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_LaneInfo_Lane_LaneTurn, result: inout NunavSDKMultiplatform.__LaneInfo__LaneLaneTurn?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_LaneInfo_Lane_LaneTurn, result: inout NunavSDKMultiplatform.__LaneInfo__LaneLaneTurn?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_LaneInfo_Lane_LaneTurn?) -> NunavSDKMultiplatform.__LaneInfo__LaneLaneTurn
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_LaneInfo_Lane_LaneTurn
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_LaneInfo_Lane_LaneTurn
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.__LaneInfo__LaneLaneTurn]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.__LaneInfo__LaneLaneTurn] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.LaneInfo {
  public typealias LaneLaneTurn = NunavSDKMultiplatform.__LaneInfo__LaneLaneTurn
}
extension NunavSDKMultiplatform.__Route__WaypointGpsQuality {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Waypoint_GpsQuality
}
extension NunavSDKMultiplatform.Route.__WaypointGpsQuality {
  public func toSwiftEnum() -> NunavSDKMultiplatform.__Route__WaypointGpsQuality
}
extension NunavSDKMultiplatform.KotlinSuspendFunction1 {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func invoke(p1: Any?) async throws -> Any?
  #endif
}
@frozen public enum __Route__WaypointGpsQuality : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case good
  case poor
  case useless
  case beaconOnly
  case unknown
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Waypoint_GpsQuality, result: inout NunavSDKMultiplatform.__Route__WaypointGpsQuality?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Waypoint_GpsQuality, result: inout NunavSDKMultiplatform.__Route__WaypointGpsQuality?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Waypoint_GpsQuality?) -> NunavSDKMultiplatform.__Route__WaypointGpsQuality
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Waypoint_GpsQuality
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_model_Route_Waypoint_GpsQuality
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.__Route__WaypointGpsQuality]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.__Route__WaypointGpsQuality] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.Route {
  public typealias WaypointGpsQuality = NunavSDKMultiplatform.__Route__WaypointGpsQuality
}
extension NunavSDKMultiplatform.OnRouteTrackerState {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_onroute_OnRouteTracker_State
}
extension NunavSDKMultiplatform.__OnRouteTrackerState {
  public func toSwiftEnum() -> NunavSDKMultiplatform.OnRouteTrackerState
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readUTF8LineTo(out: any NunavSDKMultiplatform.KotlinAppendable, limit: Swift.Int32) async throws -> NunavSDKMultiplatform.KotlinBoolean
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeLong(l: Swift.Int64) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_client_coreHttpClientEngine {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func execute(data: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_client_core__io_ktor_client_request_HttpRequestData) async throws -> NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_client_core__io_ktor_client_request_HttpResponseData
  #endif
}
extension NunavSDKMultiplatform.__SwiftGen.Ktor_httpOutgoingContent {
  @frozen public enum Enum {
    case noContent(NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_NoContent)
    case readChannelContent(NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_ReadChannelContent)
    case writeChannelContent(NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_WriteChannelContent)
    case byteArrayContent(NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_ByteArrayContent)
    case protocolUpgrade(NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_ProtocolUpgrade)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.Ktor_httpOutgoingContent.Enum where SEALED : NunavSDKMultiplatform.Ktor_httpOutgoingContent
extension NunavSDKMultiplatform.__BaseLaneVoiceInstructionStringGenerator__LaneSection {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_BaseLaneVoiceInstructionStringGenerator_LaneSection
}
extension NunavSDKMultiplatform.BaseLaneVoiceInstructionStringGenerator.__LaneSection {
  public func toSwiftEnum() -> NunavSDKMultiplatform.__BaseLaneVoiceInstructionStringGenerator__LaneSection
}
@frozen public enum __BaseLaneVoiceInstructionStringGenerator__LaneSection : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case left
  case center
  case right
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_BaseLaneVoiceInstructionStringGenerator_LaneSection, result: inout NunavSDKMultiplatform.__BaseLaneVoiceInstructionStringGenerator__LaneSection?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_BaseLaneVoiceInstructionStringGenerator_LaneSection, result: inout NunavSDKMultiplatform.__BaseLaneVoiceInstructionStringGenerator__LaneSection?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_BaseLaneVoiceInstructionStringGenerator_LaneSection?) -> NunavSDKMultiplatform.__BaseLaneVoiceInstructionStringGenerator__LaneSection
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_BaseLaneVoiceInstructionStringGenerator_LaneSection
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation_ui__net_graphmasters_multiplatform_navigation_ui_voice_instructions_BaseLaneVoiceInstructionStringGenerator_LaneSection
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.__BaseLaneVoiceInstructionStringGenerator__LaneSection]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.__BaseLaneVoiceInstructionStringGenerator__LaneSection] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.BaseLaneVoiceInstructionStringGenerator {
  public typealias LaneSection = NunavSDKMultiplatform.__BaseLaneVoiceInstructionStringGenerator__LaneSection
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeAvailable(src: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_core_internal_ChunkBuffer) async throws -> NunavSDKMultiplatform.KotlinInt
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeAvailable(src: NunavSDKMultiplatform.__Skie.class__stdlib__kotlin_ByteArray, offset: Swift.Int32, length: Swift.Int32) async throws -> NunavSDKMultiplatform.KotlinInt
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeAvailable(src: Swift.UnsafeMutableRawPointer, offset: Swift.Int32, length: Swift.Int32) async throws -> NunavSDKMultiplatform.KotlinInt
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeAvailable(src: Swift.UnsafeMutableRawPointer, offset: Swift.Int64, length: Swift.Int64) async throws -> NunavSDKMultiplatform.KotlinInt
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeFully(memory: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_bits_Memory, startIndex: Swift.Int32, endIndex: Swift.Int32) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeFully(src: NunavSDKMultiplatform.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_core_Buffer) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeFully(src: NunavSDKMultiplatform.__Skie.class__stdlib__kotlin_ByteArray, offset: Swift.Int32, length: Swift.Int32) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeFully(src: Swift.UnsafeMutableRawPointer, offset: Swift.Int32, length: Swift.Int32) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeFully(src: Swift.UnsafeMutableRawPointer, offset: Swift.Int64, length: Swift.Int64) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readSuspendableSession(consumer: any NunavSDKMultiplatform.KotlinSuspendFunction1) async throws
  #endif
}
extension NunavSDKMultiplatform.Ktor_httpOutgoingContent.WriteChannelContent {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeTo(channel: any NunavSDKMultiplatform.Ktor_ioByteWriteChannel) async throws
  #endif
}
extension NunavSDKMultiplatform.MeasurementSystem {
  public func toKotlinEnum() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_core__net_graphmasters_multiplatform_core_units_MeasurementSystem
}
extension NunavSDKMultiplatform.__MeasurementSystem {
  public func toSwiftEnum() -> NunavSDKMultiplatform.MeasurementSystem
}
extension NunavSDKMultiplatform.__SwiftGen.ManeuverUIState {
  @frozen public enum Enum {
    case followingRoute(NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_state_ManeuverUIState_FollowingRoute)
    case loading(NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_nunav_sdk_shared__net_graphmasters_multiplatform_nunav_sdk_maneuver_ui_state_ManeuverUIState_Loading)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> NunavSDKMultiplatform.__SwiftGen.ManeuverUIState.Enum where SEALED : NunavSDKMultiplatform.ManeuverUIState
@frozen public enum __DeviceStatisticsProvider__ThermalState : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case none
  case light
  case moderate
  case severe
  case critical
  case emergency
  case shutdown
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_statistics_DeviceStatisticsProvider_ThermalState, result: inout NunavSDKMultiplatform.__DeviceStatisticsProvider__ThermalState?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_statistics_DeviceStatisticsProvider_ThermalState, result: inout NunavSDKMultiplatform.__DeviceStatisticsProvider__ThermalState?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_statistics_DeviceStatisticsProvider_ThermalState?) -> NunavSDKMultiplatform.__DeviceStatisticsProvider__ThermalState
  public func _bridgeToObjectiveC() -> NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_statistics_DeviceStatisticsProvider_ThermalState
  public typealias _ObjectiveCType = NunavSDKMultiplatform.__Skie.class__net_graphmasters_multiplatform_multiplatform_navigation__net_graphmasters_multiplatform_navigation_statistics_DeviceStatisticsProvider_ThermalState
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NunavSDKMultiplatform.__DeviceStatisticsProvider__ThermalState]
  public typealias RawValue = Swift.String
  public static var allCases: [NunavSDKMultiplatform.__DeviceStatisticsProvider__ThermalState] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension NunavSDKMultiplatform.DeviceStatisticsProvider {
  public typealias ThermalState = NunavSDKMultiplatform.__DeviceStatisticsProvider__ThermalState
}
extension NunavSDKMultiplatform.TurnCommand : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.TurnCommand : Swift.Sendable {}
extension NunavSDKMultiplatform.MeasurementSystem : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.MeasurementSystem : Swift.Sendable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_coreSerializersModule.Enum : Swift.Equatable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_coreSerializersModule.Enum : Swift.Hashable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_serialization_coreSerializersModule.Enum : Swift.Sendable {}
extension NunavSDKMultiplatform.RoadClass : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.RoadClass : Swift.Sendable {}
extension NunavSDKMultiplatform.Ktor_utilsWeekDay : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.Ktor_utilsWeekDay : Swift.Sendable {}
extension NunavSDKMultiplatform.__Route__FuelStationType : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.__Route__FuelStationType : Swift.Sendable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectInstance.Enum : Swift.Equatable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectInstance.Enum : Swift.Hashable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectInstance.Enum : Swift.Sendable {}
extension NunavSDKMultiplatform.__ManeuverIconProvider__ManeuverIcon : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.__ManeuverIconProvider__ManeuverIcon : Swift.Sendable {}
extension NunavSDKMultiplatform.SdkDurationConverterUnit : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.SdkDurationConverterUnit : Swift.Sendable {}
extension NunavSDKMultiplatform.LaneIcon : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.LaneIcon : Swift.Sendable {}
extension NunavSDKMultiplatform.__LaneIconProvider__LaneIcon : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.__LaneIconProvider__LaneIcon : Swift.Sendable {}
extension NunavSDKMultiplatform.__NavigationUIState__NavigationErrorType : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.__NavigationUIState__NavigationErrorType : Swift.Sendable {}
extension NunavSDKMultiplatform.__Route__ParkingAreaType : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.__Route__ParkingAreaType : Swift.Sendable {}
extension NunavSDKMultiplatform.__DeviceStatisticsProvider__ThermalState : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.__DeviceStatisticsProvider__ThermalState : Swift.Sendable {}
extension NunavSDKMultiplatform.HourCycle : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.HourCycle : Swift.Sendable {}
extension NunavSDKMultiplatform.RouteProviderType : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.RouteProviderType : Swift.Sendable {}
extension NunavSDKMultiplatform.KotlinKVariance : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.KotlinKVariance : Swift.Sendable {}
extension NunavSDKMultiplatform.OnRouteTrackerState : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.OnRouteTrackerState : Swift.Sendable {}
extension NunavSDKMultiplatform.__Route__EnforcementType : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.__Route__EnforcementType : Swift.Sendable {}
extension NunavSDKMultiplatform.__RelativeSpeedRouteFeatureCreator__Category : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.__RelativeSpeedRouteFeatureCreator__Category : Swift.Sendable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause2.Enum : Swift.Equatable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause2.Enum : Swift.Hashable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause2.Enum : Swift.Sendable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause0.Enum : Swift.Equatable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause0.Enum : Swift.Hashable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause0.Enum : Swift.Sendable {}
extension NunavSDKMultiplatform.__TurnInfo__StreetSide : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.__TurnInfo__StreetSide : Swift.Sendable {}
extension NunavSDKMultiplatform.Ktor_utilsMonth : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.Ktor_utilsMonth : Swift.Sendable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause1.Enum : Swift.Equatable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause1.Enum : Swift.Hashable {}
extension NunavSDKMultiplatform.__SwiftGen.Kotlinx_coroutines_coreSelectClause1.Enum : Swift.Sendable {}
extension NunavSDKMultiplatform.__LaneInfo__LaneLaneTurn : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.__LaneInfo__LaneLaneTurn : Swift.Sendable {}
extension NunavSDKMultiplatform.__Route__WaypointGpsQuality : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.__Route__WaypointGpsQuality : Swift.Sendable {}
extension NunavSDKMultiplatform.__BaseLaneVoiceInstructionStringGenerator__LaneSection : Swift.RawRepresentable {}
extension NunavSDKMultiplatform.__BaseLaneVoiceInstructionStringGenerator__LaneSection : Swift.Sendable {}
